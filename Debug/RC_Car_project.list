
RC_Car_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004784  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  0800491c  0800491c  0000591c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800493c  0800493c  0000600c  2**0
                  CONTENTS
  4 .ARM          00000008  0800493c  0800493c  0000593c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004944  08004944  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004944  08004944  00005944  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004948  08004948  00005948  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800494c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000020c  2000000c  08004958  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000218  08004958  00006218  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f49a  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026f5  00000000  00000000  000154d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e08  00000000  00000000  00017bd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ae1  00000000  00000000  000189d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000182f5  00000000  00000000  000194b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000114c7  00000000  00000000  000317ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099c46  00000000  00000000  00042c75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dc8bb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003970  00000000  00000000  000dc900  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000e0270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08004904 	.word	0x08004904

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08004904 	.word	0x08004904

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b084      	sub	sp, #16
 80004cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004ce:	463b      	mov	r3, r7
 80004d0:	2200      	movs	r2, #0
 80004d2:	601a      	str	r2, [r3, #0]
 80004d4:	605a      	str	r2, [r3, #4]
 80004d6:	609a      	str	r2, [r3, #8]
 80004d8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80004da:	4b2f      	ldr	r3, [pc, #188]	@ (8000598 <MX_ADC1_Init+0xd0>)
 80004dc:	4a2f      	ldr	r2, [pc, #188]	@ (800059c <MX_ADC1_Init+0xd4>)
 80004de:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80004e0:	4b2d      	ldr	r3, [pc, #180]	@ (8000598 <MX_ADC1_Init+0xd0>)
 80004e2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80004e6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80004e8:	4b2b      	ldr	r3, [pc, #172]	@ (8000598 <MX_ADC1_Init+0xd0>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80004ee:	4b2a      	ldr	r3, [pc, #168]	@ (8000598 <MX_ADC1_Init+0xd0>)
 80004f0:	2201      	movs	r2, #1
 80004f2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80004f4:	4b28      	ldr	r3, [pc, #160]	@ (8000598 <MX_ADC1_Init+0xd0>)
 80004f6:	2201      	movs	r2, #1
 80004f8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80004fa:	4b27      	ldr	r3, [pc, #156]	@ (8000598 <MX_ADC1_Init+0xd0>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000502:	4b25      	ldr	r3, [pc, #148]	@ (8000598 <MX_ADC1_Init+0xd0>)
 8000504:	2200      	movs	r2, #0
 8000506:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000508:	4b23      	ldr	r3, [pc, #140]	@ (8000598 <MX_ADC1_Init+0xd0>)
 800050a:	4a25      	ldr	r2, [pc, #148]	@ (80005a0 <MX_ADC1_Init+0xd8>)
 800050c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800050e:	4b22      	ldr	r3, [pc, #136]	@ (8000598 <MX_ADC1_Init+0xd0>)
 8000510:	2200      	movs	r2, #0
 8000512:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8000514:	4b20      	ldr	r3, [pc, #128]	@ (8000598 <MX_ADC1_Init+0xd0>)
 8000516:	2203      	movs	r2, #3
 8000518:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800051a:	4b1f      	ldr	r3, [pc, #124]	@ (8000598 <MX_ADC1_Init+0xd0>)
 800051c:	2201      	movs	r2, #1
 800051e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000522:	4b1d      	ldr	r3, [pc, #116]	@ (8000598 <MX_ADC1_Init+0xd0>)
 8000524:	2201      	movs	r2, #1
 8000526:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000528:	481b      	ldr	r0, [pc, #108]	@ (8000598 <MX_ADC1_Init+0xd0>)
 800052a:	f000 fe87 	bl	800123c <HAL_ADC_Init>
 800052e:	4603      	mov	r3, r0
 8000530:	2b00      	cmp	r3, #0
 8000532:	d001      	beq.n	8000538 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000534:	f000 faa0 	bl	8000a78 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000538:	2301      	movs	r3, #1
 800053a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800053c:	2301      	movs	r3, #1
 800053e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8000540:	2306      	movs	r3, #6
 8000542:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000544:	463b      	mov	r3, r7
 8000546:	4619      	mov	r1, r3
 8000548:	4813      	ldr	r0, [pc, #76]	@ (8000598 <MX_ADC1_Init+0xd0>)
 800054a:	f000 febb 	bl	80012c4 <HAL_ADC_ConfigChannel>
 800054e:	4603      	mov	r3, r0
 8000550:	2b00      	cmp	r3, #0
 8000552:	d001      	beq.n	8000558 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000554:	f000 fa90 	bl	8000a78 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000558:	2304      	movs	r3, #4
 800055a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800055c:	2302      	movs	r3, #2
 800055e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000560:	463b      	mov	r3, r7
 8000562:	4619      	mov	r1, r3
 8000564:	480c      	ldr	r0, [pc, #48]	@ (8000598 <MX_ADC1_Init+0xd0>)
 8000566:	f000 fead 	bl	80012c4 <HAL_ADC_ConfigChannel>
 800056a:	4603      	mov	r3, r0
 800056c:	2b00      	cmp	r3, #0
 800056e:	d001      	beq.n	8000574 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000570:	f000 fa82 	bl	8000a78 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000574:	2308      	movs	r3, #8
 8000576:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000578:	2303      	movs	r3, #3
 800057a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800057c:	463b      	mov	r3, r7
 800057e:	4619      	mov	r1, r3
 8000580:	4805      	ldr	r0, [pc, #20]	@ (8000598 <MX_ADC1_Init+0xd0>)
 8000582:	f000 fe9f 	bl	80012c4 <HAL_ADC_ConfigChannel>
 8000586:	4603      	mov	r3, r0
 8000588:	2b00      	cmp	r3, #0
 800058a:	d001      	beq.n	8000590 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 800058c:	f000 fa74 	bl	8000a78 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000590:	bf00      	nop
 8000592:	3710      	adds	r7, #16
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}
 8000598:	20000028 	.word	0x20000028
 800059c:	40012000 	.word	0x40012000
 80005a0:	0f000001 	.word	0x0f000001

080005a4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b08a      	sub	sp, #40	@ 0x28
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ac:	f107 0314 	add.w	r3, r7, #20
 80005b0:	2200      	movs	r2, #0
 80005b2:	601a      	str	r2, [r3, #0]
 80005b4:	605a      	str	r2, [r3, #4]
 80005b6:	609a      	str	r2, [r3, #8]
 80005b8:	60da      	str	r2, [r3, #12]
 80005ba:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4a3c      	ldr	r2, [pc, #240]	@ (80006b4 <HAL_ADC_MspInit+0x110>)
 80005c2:	4293      	cmp	r3, r2
 80005c4:	d171      	bne.n	80006aa <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80005c6:	2300      	movs	r3, #0
 80005c8:	613b      	str	r3, [r7, #16]
 80005ca:	4b3b      	ldr	r3, [pc, #236]	@ (80006b8 <HAL_ADC_MspInit+0x114>)
 80005cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80005ce:	4a3a      	ldr	r2, [pc, #232]	@ (80006b8 <HAL_ADC_MspInit+0x114>)
 80005d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80005d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80005d6:	4b38      	ldr	r3, [pc, #224]	@ (80006b8 <HAL_ADC_MspInit+0x114>)
 80005d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80005da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80005de:	613b      	str	r3, [r7, #16]
 80005e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e2:	2300      	movs	r3, #0
 80005e4:	60fb      	str	r3, [r7, #12]
 80005e6:	4b34      	ldr	r3, [pc, #208]	@ (80006b8 <HAL_ADC_MspInit+0x114>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ea:	4a33      	ldr	r2, [pc, #204]	@ (80006b8 <HAL_ADC_MspInit+0x114>)
 80005ec:	f043 0301 	orr.w	r3, r3, #1
 80005f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005f2:	4b31      	ldr	r3, [pc, #196]	@ (80006b8 <HAL_ADC_MspInit+0x114>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005f6:	f003 0301 	and.w	r3, r3, #1
 80005fa:	60fb      	str	r3, [r7, #12]
 80005fc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005fe:	2300      	movs	r3, #0
 8000600:	60bb      	str	r3, [r7, #8]
 8000602:	4b2d      	ldr	r3, [pc, #180]	@ (80006b8 <HAL_ADC_MspInit+0x114>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000606:	4a2c      	ldr	r2, [pc, #176]	@ (80006b8 <HAL_ADC_MspInit+0x114>)
 8000608:	f043 0302 	orr.w	r3, r3, #2
 800060c:	6313      	str	r3, [r2, #48]	@ 0x30
 800060e:	4b2a      	ldr	r3, [pc, #168]	@ (80006b8 <HAL_ADC_MspInit+0x114>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000612:	f003 0302 	and.w	r3, r3, #2
 8000616:	60bb      	str	r3, [r7, #8]
 8000618:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4;
 800061a:	2312      	movs	r3, #18
 800061c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800061e:	2303      	movs	r3, #3
 8000620:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000622:	2300      	movs	r3, #0
 8000624:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000626:	f107 0314 	add.w	r3, r7, #20
 800062a:	4619      	mov	r1, r3
 800062c:	4823      	ldr	r0, [pc, #140]	@ (80006bc <HAL_ADC_MspInit+0x118>)
 800062e:	f001 fd8b 	bl	8002148 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000632:	2301      	movs	r3, #1
 8000634:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000636:	2303      	movs	r3, #3
 8000638:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063a:	2300      	movs	r3, #0
 800063c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800063e:	f107 0314 	add.w	r3, r7, #20
 8000642:	4619      	mov	r1, r3
 8000644:	481e      	ldr	r0, [pc, #120]	@ (80006c0 <HAL_ADC_MspInit+0x11c>)
 8000646:	f001 fd7f 	bl	8002148 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800064a:	4b1e      	ldr	r3, [pc, #120]	@ (80006c4 <HAL_ADC_MspInit+0x120>)
 800064c:	4a1e      	ldr	r2, [pc, #120]	@ (80006c8 <HAL_ADC_MspInit+0x124>)
 800064e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000650:	4b1c      	ldr	r3, [pc, #112]	@ (80006c4 <HAL_ADC_MspInit+0x120>)
 8000652:	2200      	movs	r2, #0
 8000654:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000656:	4b1b      	ldr	r3, [pc, #108]	@ (80006c4 <HAL_ADC_MspInit+0x120>)
 8000658:	2200      	movs	r2, #0
 800065a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800065c:	4b19      	ldr	r3, [pc, #100]	@ (80006c4 <HAL_ADC_MspInit+0x120>)
 800065e:	2200      	movs	r2, #0
 8000660:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000662:	4b18      	ldr	r3, [pc, #96]	@ (80006c4 <HAL_ADC_MspInit+0x120>)
 8000664:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000668:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800066a:	4b16      	ldr	r3, [pc, #88]	@ (80006c4 <HAL_ADC_MspInit+0x120>)
 800066c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000670:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000672:	4b14      	ldr	r3, [pc, #80]	@ (80006c4 <HAL_ADC_MspInit+0x120>)
 8000674:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000678:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800067a:	4b12      	ldr	r3, [pc, #72]	@ (80006c4 <HAL_ADC_MspInit+0x120>)
 800067c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000680:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000682:	4b10      	ldr	r3, [pc, #64]	@ (80006c4 <HAL_ADC_MspInit+0x120>)
 8000684:	2200      	movs	r2, #0
 8000686:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000688:	4b0e      	ldr	r3, [pc, #56]	@ (80006c4 <HAL_ADC_MspInit+0x120>)
 800068a:	2200      	movs	r2, #0
 800068c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800068e:	480d      	ldr	r0, [pc, #52]	@ (80006c4 <HAL_ADC_MspInit+0x120>)
 8000690:	f001 f958 	bl	8001944 <HAL_DMA_Init>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 800069a:	f000 f9ed 	bl	8000a78 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	4a08      	ldr	r2, [pc, #32]	@ (80006c4 <HAL_ADC_MspInit+0x120>)
 80006a2:	639a      	str	r2, [r3, #56]	@ 0x38
 80006a4:	4a07      	ldr	r2, [pc, #28]	@ (80006c4 <HAL_ADC_MspInit+0x120>)
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006aa:	bf00      	nop
 80006ac:	3728      	adds	r7, #40	@ 0x28
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	40012000 	.word	0x40012000
 80006b8:	40023800 	.word	0x40023800
 80006bc:	40020000 	.word	0x40020000
 80006c0:	40020400 	.word	0x40020400
 80006c4:	20000070 	.word	0x20000070
 80006c8:	40026410 	.word	0x40026410

080006cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80006d2:	2300      	movs	r3, #0
 80006d4:	607b      	str	r3, [r7, #4]
 80006d6:	4b10      	ldr	r3, [pc, #64]	@ (8000718 <MX_DMA_Init+0x4c>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006da:	4a0f      	ldr	r2, [pc, #60]	@ (8000718 <MX_DMA_Init+0x4c>)
 80006dc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80006e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006e2:	4b0d      	ldr	r3, [pc, #52]	@ (8000718 <MX_DMA_Init+0x4c>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80006ea:	607b      	str	r3, [r7, #4]
 80006ec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80006ee:	2200      	movs	r2, #0
 80006f0:	2100      	movs	r1, #0
 80006f2:	2038      	movs	r0, #56	@ 0x38
 80006f4:	f001 f8ef 	bl	80018d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80006f8:	2038      	movs	r0, #56	@ 0x38
 80006fa:	f001 f908 	bl	800190e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80006fe:	2200      	movs	r2, #0
 8000700:	2100      	movs	r1, #0
 8000702:	2039      	movs	r0, #57	@ 0x39
 8000704:	f001 f8e7 	bl	80018d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000708:	2039      	movs	r0, #57	@ 0x39
 800070a:	f001 f900 	bl	800190e <HAL_NVIC_EnableIRQ>

}
 800070e:	bf00      	nop
 8000710:	3708      	adds	r7, #8
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	40023800 	.word	0x40023800

0800071c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b08a      	sub	sp, #40	@ 0x28
 8000720:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000722:	f107 0314 	add.w	r3, r7, #20
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	605a      	str	r2, [r3, #4]
 800072c:	609a      	str	r2, [r3, #8]
 800072e:	60da      	str	r2, [r3, #12]
 8000730:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000732:	2300      	movs	r3, #0
 8000734:	613b      	str	r3, [r7, #16]
 8000736:	4b27      	ldr	r3, [pc, #156]	@ (80007d4 <MX_GPIO_Init+0xb8>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073a:	4a26      	ldr	r2, [pc, #152]	@ (80007d4 <MX_GPIO_Init+0xb8>)
 800073c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000740:	6313      	str	r3, [r2, #48]	@ 0x30
 8000742:	4b24      	ldr	r3, [pc, #144]	@ (80007d4 <MX_GPIO_Init+0xb8>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000746:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800074a:	613b      	str	r3, [r7, #16]
 800074c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800074e:	2300      	movs	r3, #0
 8000750:	60fb      	str	r3, [r7, #12]
 8000752:	4b20      	ldr	r3, [pc, #128]	@ (80007d4 <MX_GPIO_Init+0xb8>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000756:	4a1f      	ldr	r2, [pc, #124]	@ (80007d4 <MX_GPIO_Init+0xb8>)
 8000758:	f043 0301 	orr.w	r3, r3, #1
 800075c:	6313      	str	r3, [r2, #48]	@ 0x30
 800075e:	4b1d      	ldr	r3, [pc, #116]	@ (80007d4 <MX_GPIO_Init+0xb8>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000762:	f003 0301 	and.w	r3, r3, #1
 8000766:	60fb      	str	r3, [r7, #12]
 8000768:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800076a:	2300      	movs	r3, #0
 800076c:	60bb      	str	r3, [r7, #8]
 800076e:	4b19      	ldr	r3, [pc, #100]	@ (80007d4 <MX_GPIO_Init+0xb8>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000772:	4a18      	ldr	r2, [pc, #96]	@ (80007d4 <MX_GPIO_Init+0xb8>)
 8000774:	f043 0302 	orr.w	r3, r3, #2
 8000778:	6313      	str	r3, [r2, #48]	@ 0x30
 800077a:	4b16      	ldr	r3, [pc, #88]	@ (80007d4 <MX_GPIO_Init+0xb8>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077e:	f003 0302 	and.w	r3, r3, #2
 8000782:	60bb      	str	r3, [r7, #8]
 8000784:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000786:	2300      	movs	r3, #0
 8000788:	607b      	str	r3, [r7, #4]
 800078a:	4b12      	ldr	r3, [pc, #72]	@ (80007d4 <MX_GPIO_Init+0xb8>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078e:	4a11      	ldr	r2, [pc, #68]	@ (80007d4 <MX_GPIO_Init+0xb8>)
 8000790:	f043 0304 	orr.w	r3, r3, #4
 8000794:	6313      	str	r3, [r2, #48]	@ 0x30
 8000796:	4b0f      	ldr	r3, [pc, #60]	@ (80007d4 <MX_GPIO_Init+0xb8>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079a:	f003 0304 	and.w	r3, r3, #4
 800079e:	607b      	str	r3, [r7, #4]
 80007a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80007a2:	2200      	movs	r2, #0
 80007a4:	f24e 0102 	movw	r1, #57346	@ 0xe002
 80007a8:	480b      	ldr	r0, [pc, #44]	@ (80007d8 <MX_GPIO_Init+0xbc>)
 80007aa:	f001 fe51 	bl	8002450 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB1 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80007ae:	f24e 0302 	movw	r3, #57346	@ 0xe002
 80007b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b4:	2301      	movs	r3, #1
 80007b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b8:	2300      	movs	r3, #0
 80007ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007bc:	2300      	movs	r3, #0
 80007be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007c0:	f107 0314 	add.w	r3, r7, #20
 80007c4:	4619      	mov	r1, r3
 80007c6:	4804      	ldr	r0, [pc, #16]	@ (80007d8 <MX_GPIO_Init+0xbc>)
 80007c8:	f001 fcbe 	bl	8002148 <HAL_GPIO_Init>

}
 80007cc:	bf00      	nop
 80007ce:	3728      	adds	r7, #40	@ 0x28
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	40023800 	.word	0x40023800
 80007d8:	40020400 	.word	0x40020400

080007dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007e2:	f000 fcb9 	bl	8001158 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007e6:	f000 f8df 	bl	80009a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007ea:	f7ff ff97 	bl	800071c <MX_GPIO_Init>
  MX_DMA_Init();
 80007ee:	f7ff ff6d 	bl	80006cc <MX_DMA_Init>
  MX_TIM3_Init();
 80007f2:	f000 fab9 	bl	8000d68 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 80007f6:	f000 fb79 	bl	8000eec <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80007fa:	f7ff fe65 	bl	80004c8 <MX_ADC1_Init>
  MX_USART6_UART_Init();
 80007fe:	f000 fb9f 	bl	8000f40 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  //HAL_UART_Receive_IT( &huart6, rxData, 1);
//  HAL_ADC_Start_DMA(&hadc1, joyStick, 3);
  HAL_UART_Receive_DMA(&huart6, rxData, sizeof(rxData));
 8000802:	2208      	movs	r2, #8
 8000804:	4965      	ldr	r1, [pc, #404]	@ (800099c <main+0x1c0>)
 8000806:	4866      	ldr	r0, [pc, #408]	@ (80009a0 <main+0x1c4>)
 8000808:	f002 ff92 	bl	8003730 <HAL_UART_Receive_DMA>
  PWM_Init();
 800080c:	f000 fa14 	bl	8000c38 <PWM_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t dutyValue_Move = 0;
 8000810:	2300      	movs	r3, #0
 8000812:	71fb      	strb	r3, [r7, #7]
  uint8_t dutyValue_Speed = 0;
 8000814:	2300      	movs	r3, #0
 8000816:	71bb      	strb	r3, [r7, #6]
//  uint16_t joystickValue0 = 0;
//  uint16_t joystickValue1 = 0;
//  uint16_t joystickValue2 = 0;
  while (1)
  {
    if(rxData[6] == 0 || rxData[6] == 1 || rxData[6] == 2 || rxData[6] == 4 || rxData[6] == 8)
 8000818:	4b60      	ldr	r3, [pc, #384]	@ (800099c <main+0x1c0>)
 800081a:	799b      	ldrb	r3, [r3, #6]
 800081c:	2b00      	cmp	r3, #0
 800081e:	d00f      	beq.n	8000840 <main+0x64>
 8000820:	4b5e      	ldr	r3, [pc, #376]	@ (800099c <main+0x1c0>)
 8000822:	799b      	ldrb	r3, [r3, #6]
 8000824:	2b01      	cmp	r3, #1
 8000826:	d00b      	beq.n	8000840 <main+0x64>
 8000828:	4b5c      	ldr	r3, [pc, #368]	@ (800099c <main+0x1c0>)
 800082a:	799b      	ldrb	r3, [r3, #6]
 800082c:	2b02      	cmp	r3, #2
 800082e:	d007      	beq.n	8000840 <main+0x64>
 8000830:	4b5a      	ldr	r3, [pc, #360]	@ (800099c <main+0x1c0>)
 8000832:	799b      	ldrb	r3, [r3, #6]
 8000834:	2b04      	cmp	r3, #4
 8000836:	d003      	beq.n	8000840 <main+0x64>
 8000838:	4b58      	ldr	r3, [pc, #352]	@ (800099c <main+0x1c0>)
 800083a:	799b      	ldrb	r3, [r3, #6]
 800083c:	2b08      	cmp	r3, #8
 800083e:	d143      	bne.n	80008c8 <main+0xec>
    {
      dutyValue_Move = rxData[6];
 8000840:	4b56      	ldr	r3, [pc, #344]	@ (800099c <main+0x1c0>)
 8000842:	799b      	ldrb	r3, [r3, #6]
 8000844:	71fb      	strb	r3, [r7, #7]
      switch(dutyValue_Move)
 8000846:	79fb      	ldrb	r3, [r7, #7]
 8000848:	2b08      	cmp	r3, #8
 800084a:	d83c      	bhi.n	80008c6 <main+0xea>
 800084c:	a201      	add	r2, pc, #4	@ (adr r2, 8000854 <main+0x78>)
 800084e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000852:	bf00      	nop
 8000854:	08000879 	.word	0x08000879
 8000858:	08000889 	.word	0x08000889
 800085c:	08000899 	.word	0x08000899
 8000860:	080008c7 	.word	0x080008c7
 8000864:	080008a9 	.word	0x080008a9
 8000868:	080008c7 	.word	0x080008c7
 800086c:	080008c7 	.word	0x080008c7
 8000870:	080008c7 	.word	0x080008c7
 8000874:	080008b9 	.word	0x080008b9
      {
        case 0:
          Speed(speedvalue);
 8000878:	4b4a      	ldr	r3, [pc, #296]	@ (80009a4 <main+0x1c8>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4618      	mov	r0, r3
 800087e:	f000 f9c9 	bl	8000c14 <Speed>
          idle();
 8000882:	f000 f8ff 	bl	8000a84 <idle>
          break;
 8000886:	e01f      	b.n	80008c8 <main+0xec>
        case 1:
          Speed(speedvalue);
 8000888:	4b46      	ldr	r3, [pc, #280]	@ (80009a4 <main+0x1c8>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4618      	mov	r0, r3
 800088e:	f000 f9c1 	bl	8000c14 <Speed>
          forward();
 8000892:	f000 f91f 	bl	8000ad4 <forward>
          break;
 8000896:	e017      	b.n	80008c8 <main+0xec>
        case 2:
          Speed(speedvalue);
 8000898:	4b42      	ldr	r3, [pc, #264]	@ (80009a4 <main+0x1c8>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	4618      	mov	r0, r3
 800089e:	f000 f9b9 	bl	8000c14 <Speed>
          backward();
 80008a2:	f000 f93f 	bl	8000b24 <backward>
          break;
 80008a6:	e00f      	b.n	80008c8 <main+0xec>
        case 4:
          Speed(speedvalue);
 80008a8:	4b3e      	ldr	r3, [pc, #248]	@ (80009a4 <main+0x1c8>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4618      	mov	r0, r3
 80008ae:	f000 f9b1 	bl	8000c14 <Speed>
          left();
 80008b2:	f000 f987 	bl	8000bc4 <left>
          break;
 80008b6:	e007      	b.n	80008c8 <main+0xec>
        case 8:
          Speed(speedvalue);
 80008b8:	4b3a      	ldr	r3, [pc, #232]	@ (80009a4 <main+0x1c8>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4618      	mov	r0, r3
 80008be:	f000 f9a9 	bl	8000c14 <Speed>
          right();
 80008c2:	f000 f957 	bl	8000b74 <right>
        default:
          break;
 80008c6:	bf00      	nop
      }
   }

    if(rxData[5] == 4 || rxData[5] == 32 || rxData[5] ==16 || rxData[5] ==8)
 80008c8:	4b34      	ldr	r3, [pc, #208]	@ (800099c <main+0x1c0>)
 80008ca:	795b      	ldrb	r3, [r3, #5]
 80008cc:	2b04      	cmp	r3, #4
 80008ce:	d00b      	beq.n	80008e8 <main+0x10c>
 80008d0:	4b32      	ldr	r3, [pc, #200]	@ (800099c <main+0x1c0>)
 80008d2:	795b      	ldrb	r3, [r3, #5]
 80008d4:	2b20      	cmp	r3, #32
 80008d6:	d007      	beq.n	80008e8 <main+0x10c>
 80008d8:	4b30      	ldr	r3, [pc, #192]	@ (800099c <main+0x1c0>)
 80008da:	795b      	ldrb	r3, [r3, #5]
 80008dc:	2b10      	cmp	r3, #16
 80008de:	d003      	beq.n	80008e8 <main+0x10c>
 80008e0:	4b2e      	ldr	r3, [pc, #184]	@ (800099c <main+0x1c0>)
 80008e2:	795b      	ldrb	r3, [r3, #5]
 80008e4:	2b08      	cmp	r3, #8
 80008e6:	d197      	bne.n	8000818 <main+0x3c>
    {
      dutyValue_Speed = rxData[5];
 80008e8:	4b2c      	ldr	r3, [pc, #176]	@ (800099c <main+0x1c0>)
 80008ea:	795b      	ldrb	r3, [r3, #5]
 80008ec:	71bb      	strb	r3, [r7, #6]

      switch(dutyValue_Speed)
 80008ee:	79bb      	ldrb	r3, [r7, #6]
 80008f0:	3b04      	subs	r3, #4
 80008f2:	2b1c      	cmp	r3, #28
 80008f4:	d850      	bhi.n	8000998 <main+0x1bc>
 80008f6:	a201      	add	r2, pc, #4	@ (adr r2, 80008fc <main+0x120>)
 80008f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008fc:	08000971 	.word	0x08000971
 8000900:	08000999 	.word	0x08000999
 8000904:	08000999 	.word	0x08000999
 8000908:	08000999 	.word	0x08000999
 800090c:	0800098f 	.word	0x0800098f
 8000910:	08000999 	.word	0x08000999
 8000914:	08000999 	.word	0x08000999
 8000918:	08000999 	.word	0x08000999
 800091c:	08000999 	.word	0x08000999
 8000920:	08000999 	.word	0x08000999
 8000924:	08000999 	.word	0x08000999
 8000928:	08000999 	.word	0x08000999
 800092c:	08000985 	.word	0x08000985
 8000930:	08000999 	.word	0x08000999
 8000934:	08000999 	.word	0x08000999
 8000938:	08000999 	.word	0x08000999
 800093c:	08000999 	.word	0x08000999
 8000940:	08000999 	.word	0x08000999
 8000944:	08000999 	.word	0x08000999
 8000948:	08000999 	.word	0x08000999
 800094c:	08000999 	.word	0x08000999
 8000950:	08000999 	.word	0x08000999
 8000954:	08000999 	.word	0x08000999
 8000958:	08000999 	.word	0x08000999
 800095c:	08000999 	.word	0x08000999
 8000960:	08000999 	.word	0x08000999
 8000964:	08000999 	.word	0x08000999
 8000968:	08000999 	.word	0x08000999
 800096c:	0800097b 	.word	0x0800097b
      {
        case 4:
          speedvalue = 400;
 8000970:	4b0c      	ldr	r3, [pc, #48]	@ (80009a4 <main+0x1c8>)
 8000972:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8000976:	601a      	str	r2, [r3, #0]
          break;
 8000978:	e00f      	b.n	800099a <main+0x1be>
        case 32:
          speedvalue = 550;
 800097a:	4b0a      	ldr	r3, [pc, #40]	@ (80009a4 <main+0x1c8>)
 800097c:	f240 2226 	movw	r2, #550	@ 0x226
 8000980:	601a      	str	r2, [r3, #0]
          break;
 8000982:	e00a      	b.n	800099a <main+0x1be>
        case 16:
          speedvalue = 700;
 8000984:	4b07      	ldr	r3, [pc, #28]	@ (80009a4 <main+0x1c8>)
 8000986:	f44f 722f 	mov.w	r2, #700	@ 0x2bc
 800098a:	601a      	str	r2, [r3, #0]
          break;
 800098c:	e005      	b.n	800099a <main+0x1be>
        case 8:
          speedvalue = 950;
 800098e:	4b05      	ldr	r3, [pc, #20]	@ (80009a4 <main+0x1c8>)
 8000990:	f240 32b6 	movw	r2, #950	@ 0x3b6
 8000994:	601a      	str	r2, [r3, #0]
          break;
 8000996:	e000      	b.n	800099a <main+0x1be>
        default:
          break;
 8000998:	bf00      	nop
    if(rxData[6] == 0 || rxData[6] == 1 || rxData[6] == 2 || rxData[6] == 4 || rxData[6] == 8)
 800099a:	e73d      	b.n	8000818 <main+0x3c>
 800099c:	200000d0 	.word	0x200000d0
 80009a0:	2000016c 	.word	0x2000016c
 80009a4:	200000d8 	.word	0x200000d8

080009a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b094      	sub	sp, #80	@ 0x50
 80009ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ae:	f107 0320 	add.w	r3, r7, #32
 80009b2:	2230      	movs	r2, #48	@ 0x30
 80009b4:	2100      	movs	r1, #0
 80009b6:	4618      	mov	r0, r3
 80009b8:	f003 ff78 	bl	80048ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009bc:	f107 030c 	add.w	r3, r7, #12
 80009c0:	2200      	movs	r2, #0
 80009c2:	601a      	str	r2, [r3, #0]
 80009c4:	605a      	str	r2, [r3, #4]
 80009c6:	609a      	str	r2, [r3, #8]
 80009c8:	60da      	str	r2, [r3, #12]
 80009ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009cc:	2300      	movs	r3, #0
 80009ce:	60bb      	str	r3, [r7, #8]
 80009d0:	4b27      	ldr	r3, [pc, #156]	@ (8000a70 <SystemClock_Config+0xc8>)
 80009d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009d4:	4a26      	ldr	r2, [pc, #152]	@ (8000a70 <SystemClock_Config+0xc8>)
 80009d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009da:	6413      	str	r3, [r2, #64]	@ 0x40
 80009dc:	4b24      	ldr	r3, [pc, #144]	@ (8000a70 <SystemClock_Config+0xc8>)
 80009de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009e4:	60bb      	str	r3, [r7, #8]
 80009e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009e8:	2300      	movs	r3, #0
 80009ea:	607b      	str	r3, [r7, #4]
 80009ec:	4b21      	ldr	r3, [pc, #132]	@ (8000a74 <SystemClock_Config+0xcc>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a20      	ldr	r2, [pc, #128]	@ (8000a74 <SystemClock_Config+0xcc>)
 80009f2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80009f6:	6013      	str	r3, [r2, #0]
 80009f8:	4b1e      	ldr	r3, [pc, #120]	@ (8000a74 <SystemClock_Config+0xcc>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a00:	607b      	str	r3, [r7, #4]
 8000a02:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a04:	2301      	movs	r3, #1
 8000a06:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a08:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a0c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a0e:	2302      	movs	r3, #2
 8000a10:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a12:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000a16:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a18:	2304      	movs	r3, #4
 8000a1a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000a1c:	2364      	movs	r3, #100	@ 0x64
 8000a1e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a20:	2302      	movs	r3, #2
 8000a22:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a24:	2304      	movs	r3, #4
 8000a26:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a28:	f107 0320 	add.w	r3, r7, #32
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f001 fd29 	bl	8002484 <HAL_RCC_OscConfig>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000a38:	f000 f81e 	bl	8000a78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a3c:	230f      	movs	r3, #15
 8000a3e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a40:	2302      	movs	r3, #2
 8000a42:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a44:	2300      	movs	r3, #0
 8000a46:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a48:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a4c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000a52:	f107 030c 	add.w	r3, r7, #12
 8000a56:	2103      	movs	r1, #3
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f001 ff8b 	bl	8002974 <HAL_RCC_ClockConfig>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000a64:	f000 f808 	bl	8000a78 <Error_Handler>
  }
}
 8000a68:	bf00      	nop
 8000a6a:	3750      	adds	r7, #80	@ 0x50
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	40023800 	.word	0x40023800
 8000a74:	40007000 	.word	0x40007000

08000a78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a7c:	b672      	cpsid	i
}
 8000a7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a80:	bf00      	nop
 8000a82:	e7fd      	b.n	8000a80 <Error_Handler+0x8>

08000a84 <idle>:
#include "motor.h"


void idle()
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8000a88:	2201      	movs	r2, #1
 8000a8a:	2102      	movs	r1, #2
 8000a8c:	480f      	ldr	r0, [pc, #60]	@ (8000acc <idle+0x48>)
 8000a8e:	f001 fcdf 	bl	8002450 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8000a92:	2201      	movs	r2, #1
 8000a94:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000a98:	480c      	ldr	r0, [pc, #48]	@ (8000acc <idle+0x48>)
 8000a9a:	f001 fcd9 	bl	8002450 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000aa4:	4809      	ldr	r0, [pc, #36]	@ (8000acc <idle+0x48>)
 8000aa6:	f001 fcd3 	bl	8002450 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8000aaa:	2201      	movs	r2, #1
 8000aac:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ab0:	4806      	ldr	r0, [pc, #24]	@ (8000acc <idle+0x48>)
 8000ab2:	f001 fccd 	bl	8002450 <HAL_GPIO_WritePin>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000ab6:	2100      	movs	r1, #0
 8000ab8:	4805      	ldr	r0, [pc, #20]	@ (8000ad0 <idle+0x4c>)
 8000aba:	f002 f9cb 	bl	8002e54 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000abe:	2104      	movs	r1, #4
 8000ac0:	4803      	ldr	r0, [pc, #12]	@ (8000ad0 <idle+0x4c>)
 8000ac2:	f002 f9c7 	bl	8002e54 <HAL_TIM_PWM_Start>
}
 8000ac6:	bf00      	nop
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	40020400 	.word	0x40020400
 8000ad0:	200000dc 	.word	0x200000dc

08000ad4 <forward>:
void forward()
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8000ad8:	2200      	movs	r2, #0
 8000ada:	2102      	movs	r1, #2
 8000adc:	480f      	ldr	r0, [pc, #60]	@ (8000b1c <forward+0x48>)
 8000ade:	f001 fcb7 	bl	8002450 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000ae8:	480c      	ldr	r0, [pc, #48]	@ (8000b1c <forward+0x48>)
 8000aea:	f001 fcb1 	bl	8002450 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8000aee:	2201      	movs	r2, #1
 8000af0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000af4:	4809      	ldr	r0, [pc, #36]	@ (8000b1c <forward+0x48>)
 8000af6:	f001 fcab 	bl	8002450 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8000afa:	2200      	movs	r2, #0
 8000afc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b00:	4806      	ldr	r0, [pc, #24]	@ (8000b1c <forward+0x48>)
 8000b02:	f001 fca5 	bl	8002450 <HAL_GPIO_WritePin>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000b06:	2100      	movs	r1, #0
 8000b08:	4805      	ldr	r0, [pc, #20]	@ (8000b20 <forward+0x4c>)
 8000b0a:	f002 f9a3 	bl	8002e54 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000b0e:	2104      	movs	r1, #4
 8000b10:	4803      	ldr	r0, [pc, #12]	@ (8000b20 <forward+0x4c>)
 8000b12:	f002 f99f 	bl	8002e54 <HAL_TIM_PWM_Start>
}
 8000b16:	bf00      	nop
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	40020400 	.word	0x40020400
 8000b20:	200000dc 	.word	0x200000dc

08000b24 <backward>:
void backward()
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8000b28:	2201      	movs	r2, #1
 8000b2a:	2102      	movs	r1, #2
 8000b2c:	480f      	ldr	r0, [pc, #60]	@ (8000b6c <backward+0x48>)
 8000b2e:	f001 fc8f 	bl	8002450 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8000b32:	2200      	movs	r2, #0
 8000b34:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000b38:	480c      	ldr	r0, [pc, #48]	@ (8000b6c <backward+0x48>)
 8000b3a:	f001 fc89 	bl	8002450 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000b3e:	2200      	movs	r2, #0
 8000b40:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000b44:	4809      	ldr	r0, [pc, #36]	@ (8000b6c <backward+0x48>)
 8000b46:	f001 fc83 	bl	8002450 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b50:	4806      	ldr	r0, [pc, #24]	@ (8000b6c <backward+0x48>)
 8000b52:	f001 fc7d 	bl	8002450 <HAL_GPIO_WritePin>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000b56:	2100      	movs	r1, #0
 8000b58:	4805      	ldr	r0, [pc, #20]	@ (8000b70 <backward+0x4c>)
 8000b5a:	f002 f97b 	bl	8002e54 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000b5e:	2104      	movs	r1, #4
 8000b60:	4803      	ldr	r0, [pc, #12]	@ (8000b70 <backward+0x4c>)
 8000b62:	f002 f977 	bl	8002e54 <HAL_TIM_PWM_Start>
}
 8000b66:	bf00      	nop
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	40020400 	.word	0x40020400
 8000b70:	200000dc 	.word	0x200000dc

08000b74 <right>:
void right()
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8000b78:	2200      	movs	r2, #0
 8000b7a:	2102      	movs	r1, #2
 8000b7c:	480f      	ldr	r0, [pc, #60]	@ (8000bbc <right+0x48>)
 8000b7e:	f001 fc67 	bl	8002450 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8000b82:	2200      	movs	r2, #0
 8000b84:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000b88:	480c      	ldr	r0, [pc, #48]	@ (8000bbc <right+0x48>)
 8000b8a:	f001 fc61 	bl	8002450 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000b8e:	2200      	movs	r2, #0
 8000b90:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000b94:	4809      	ldr	r0, [pc, #36]	@ (8000bbc <right+0x48>)
 8000b96:	f001 fc5b 	bl	8002450 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ba0:	4806      	ldr	r0, [pc, #24]	@ (8000bbc <right+0x48>)
 8000ba2:	f001 fc55 	bl	8002450 <HAL_GPIO_WritePin>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	4805      	ldr	r0, [pc, #20]	@ (8000bc0 <right+0x4c>)
 8000baa:	f002 f953 	bl	8002e54 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000bae:	2104      	movs	r1, #4
 8000bb0:	4803      	ldr	r0, [pc, #12]	@ (8000bc0 <right+0x4c>)
 8000bb2:	f002 f94f 	bl	8002e54 <HAL_TIM_PWM_Start>
}
 8000bb6:	bf00      	nop
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	40020400 	.word	0x40020400
 8000bc0:	200000dc 	.word	0x200000dc

08000bc4 <left>:
void left()
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8000bc8:	2201      	movs	r2, #1
 8000bca:	2102      	movs	r1, #2
 8000bcc:	480f      	ldr	r0, [pc, #60]	@ (8000c0c <left+0x48>)
 8000bce:	f001 fc3f 	bl	8002450 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000bd8:	480c      	ldr	r0, [pc, #48]	@ (8000c0c <left+0x48>)
 8000bda:	f001 fc39 	bl	8002450 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000bde:	2200      	movs	r2, #0
 8000be0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000be4:	4809      	ldr	r0, [pc, #36]	@ (8000c0c <left+0x48>)
 8000be6:	f001 fc33 	bl	8002450 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8000bea:	2200      	movs	r2, #0
 8000bec:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000bf0:	4806      	ldr	r0, [pc, #24]	@ (8000c0c <left+0x48>)
 8000bf2:	f001 fc2d 	bl	8002450 <HAL_GPIO_WritePin>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	4805      	ldr	r0, [pc, #20]	@ (8000c10 <left+0x4c>)
 8000bfa:	f002 f92b 	bl	8002e54 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000bfe:	2104      	movs	r1, #4
 8000c00:	4803      	ldr	r0, [pc, #12]	@ (8000c10 <left+0x4c>)
 8000c02:	f002 f927 	bl	8002e54 <HAL_TIM_PWM_Start>
}
 8000c06:	bf00      	nop
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	40020400 	.word	0x40020400
 8000c10:	200000dc 	.word	0x200000dc

08000c14 <Speed>:

void Speed(int pwm)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b083      	sub	sp, #12
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  TIM3->CCR1 = pwm;
 8000c1c:	4a05      	ldr	r2, [pc, #20]	@ (8000c34 <Speed+0x20>)
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	6353      	str	r3, [r2, #52]	@ 0x34
  TIM3->CCR2 = pwm;
 8000c22:	4a04      	ldr	r2, [pc, #16]	@ (8000c34 <Speed+0x20>)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8000c28:	bf00      	nop
 8000c2a:	370c      	adds	r7, #12
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr
 8000c34:	40000400 	.word	0x40000400

08000c38 <PWM_Init>:
void PWM_Init()
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  TIM3->CCR1 = 0;
 8000c3c:	4b05      	ldr	r3, [pc, #20]	@ (8000c54 <PWM_Init+0x1c>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3->CCR2 = 0;
 8000c42:	4b04      	ldr	r3, [pc, #16]	@ (8000c54 <PWM_Init+0x1c>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8000c48:	bf00      	nop
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	40000400 	.word	0x40000400

08000c58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c5e:	2300      	movs	r3, #0
 8000c60:	607b      	str	r3, [r7, #4]
 8000c62:	4b10      	ldr	r3, [pc, #64]	@ (8000ca4 <HAL_MspInit+0x4c>)
 8000c64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c66:	4a0f      	ldr	r2, [pc, #60]	@ (8000ca4 <HAL_MspInit+0x4c>)
 8000c68:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c6e:	4b0d      	ldr	r3, [pc, #52]	@ (8000ca4 <HAL_MspInit+0x4c>)
 8000c70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c76:	607b      	str	r3, [r7, #4]
 8000c78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	603b      	str	r3, [r7, #0]
 8000c7e:	4b09      	ldr	r3, [pc, #36]	@ (8000ca4 <HAL_MspInit+0x4c>)
 8000c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c82:	4a08      	ldr	r2, [pc, #32]	@ (8000ca4 <HAL_MspInit+0x4c>)
 8000c84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c88:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c8a:	4b06      	ldr	r3, [pc, #24]	@ (8000ca4 <HAL_MspInit+0x4c>)
 8000c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c92:	603b      	str	r3, [r7, #0]
 8000c94:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c96:	bf00      	nop
 8000c98:	370c      	adds	r7, #12
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	40023800 	.word	0x40023800

08000ca8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cac:	bf00      	nop
 8000cae:	e7fd      	b.n	8000cac <NMI_Handler+0x4>

08000cb0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cb4:	bf00      	nop
 8000cb6:	e7fd      	b.n	8000cb4 <HardFault_Handler+0x4>

08000cb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cbc:	bf00      	nop
 8000cbe:	e7fd      	b.n	8000cbc <MemManage_Handler+0x4>

08000cc0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cc4:	bf00      	nop
 8000cc6:	e7fd      	b.n	8000cc4 <BusFault_Handler+0x4>

08000cc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ccc:	bf00      	nop
 8000cce:	e7fd      	b.n	8000ccc <UsageFault_Handler+0x4>

08000cd0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cd4:	bf00      	nop
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr

08000cde <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cde:	b480      	push	{r7}
 8000ce0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ce2:	bf00      	nop
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr

08000cec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cf0:	bf00      	nop
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr

08000cfa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cfa:	b580      	push	{r7, lr}
 8000cfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cfe:	f000 fa7d 	bl	80011fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d02:	bf00      	nop
 8000d04:	bd80      	pop	{r7, pc}
	...

08000d08 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000d0c:	4802      	ldr	r0, [pc, #8]	@ (8000d18 <USART2_IRQHandler+0x10>)
 8000d0e:	f002 fd35 	bl	800377c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000d12:	bf00      	nop
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	20000124 	.word	0x20000124

08000d1c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000d20:	4802      	ldr	r0, [pc, #8]	@ (8000d2c <DMA2_Stream0_IRQHandler+0x10>)
 8000d22:	f000 ffa7 	bl	8001c74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000d26:	bf00      	nop
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	20000070 	.word	0x20000070

08000d30 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8000d34:	4802      	ldr	r0, [pc, #8]	@ (8000d40 <DMA2_Stream1_IRQHandler+0x10>)
 8000d36:	f000 ff9d 	bl	8001c74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8000d3a:	bf00      	nop
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	200001b4 	.word	0x200001b4

08000d44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d48:	4b06      	ldr	r3, [pc, #24]	@ (8000d64 <SystemInit+0x20>)
 8000d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d4e:	4a05      	ldr	r2, [pc, #20]	@ (8000d64 <SystemInit+0x20>)
 8000d50:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d54:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d58:	bf00      	nop
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	e000ed00 	.word	0xe000ed00

08000d68 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b08a      	sub	sp, #40	@ 0x28
 8000d6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d6e:	f107 0320 	add.w	r3, r7, #32
 8000d72:	2200      	movs	r2, #0
 8000d74:	601a      	str	r2, [r3, #0]
 8000d76:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d78:	1d3b      	adds	r3, r7, #4
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	601a      	str	r2, [r3, #0]
 8000d7e:	605a      	str	r2, [r3, #4]
 8000d80:	609a      	str	r2, [r3, #8]
 8000d82:	60da      	str	r2, [r3, #12]
 8000d84:	611a      	str	r2, [r3, #16]
 8000d86:	615a      	str	r2, [r3, #20]
 8000d88:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d8a:	4b28      	ldr	r3, [pc, #160]	@ (8000e2c <MX_TIM3_Init+0xc4>)
 8000d8c:	4a28      	ldr	r2, [pc, #160]	@ (8000e30 <MX_TIM3_Init+0xc8>)
 8000d8e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1000-1;
 8000d90:	4b26      	ldr	r3, [pc, #152]	@ (8000e2c <MX_TIM3_Init+0xc4>)
 8000d92:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000d96:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d98:	4b24      	ldr	r3, [pc, #144]	@ (8000e2c <MX_TIM3_Init+0xc4>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8000d9e:	4b23      	ldr	r3, [pc, #140]	@ (8000e2c <MX_TIM3_Init+0xc4>)
 8000da0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000da4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000da6:	4b21      	ldr	r3, [pc, #132]	@ (8000e2c <MX_TIM3_Init+0xc4>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dac:	4b1f      	ldr	r3, [pc, #124]	@ (8000e2c <MX_TIM3_Init+0xc4>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000db2:	481e      	ldr	r0, [pc, #120]	@ (8000e2c <MX_TIM3_Init+0xc4>)
 8000db4:	f001 fffe 	bl	8002db4 <HAL_TIM_PWM_Init>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000dbe:	f7ff fe5b 	bl	8000a78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000dca:	f107 0320 	add.w	r3, r7, #32
 8000dce:	4619      	mov	r1, r3
 8000dd0:	4816      	ldr	r0, [pc, #88]	@ (8000e2c <MX_TIM3_Init+0xc4>)
 8000dd2:	f002 fbef 	bl	80035b4 <HAL_TIMEx_MasterConfigSynchronization>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000ddc:	f7ff fe4c 	bl	8000a78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000de0:	2360      	movs	r3, #96	@ 0x60
 8000de2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000de4:	2300      	movs	r3, #0
 8000de6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000de8:	2300      	movs	r3, #0
 8000dea:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dec:	2300      	movs	r3, #0
 8000dee:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000df0:	1d3b      	adds	r3, r7, #4
 8000df2:	2200      	movs	r2, #0
 8000df4:	4619      	mov	r1, r3
 8000df6:	480d      	ldr	r0, [pc, #52]	@ (8000e2c <MX_TIM3_Init+0xc4>)
 8000df8:	f002 f8dc 	bl	8002fb4 <HAL_TIM_PWM_ConfigChannel>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000e02:	f7ff fe39 	bl	8000a78 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e06:	1d3b      	adds	r3, r7, #4
 8000e08:	2204      	movs	r2, #4
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	4807      	ldr	r0, [pc, #28]	@ (8000e2c <MX_TIM3_Init+0xc4>)
 8000e0e:	f002 f8d1 	bl	8002fb4 <HAL_TIM_PWM_ConfigChannel>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000e18:	f7ff fe2e 	bl	8000a78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000e1c:	4803      	ldr	r0, [pc, #12]	@ (8000e2c <MX_TIM3_Init+0xc4>)
 8000e1e:	f000 f82b 	bl	8000e78 <HAL_TIM_MspPostInit>

}
 8000e22:	bf00      	nop
 8000e24:	3728      	adds	r7, #40	@ 0x28
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	200000dc 	.word	0x200000dc
 8000e30:	40000400 	.word	0x40000400

08000e34 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b085      	sub	sp, #20
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a0b      	ldr	r2, [pc, #44]	@ (8000e70 <HAL_TIM_PWM_MspInit+0x3c>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d10d      	bne.n	8000e62 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e46:	2300      	movs	r3, #0
 8000e48:	60fb      	str	r3, [r7, #12]
 8000e4a:	4b0a      	ldr	r3, [pc, #40]	@ (8000e74 <HAL_TIM_PWM_MspInit+0x40>)
 8000e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e4e:	4a09      	ldr	r2, [pc, #36]	@ (8000e74 <HAL_TIM_PWM_MspInit+0x40>)
 8000e50:	f043 0302 	orr.w	r3, r3, #2
 8000e54:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e56:	4b07      	ldr	r3, [pc, #28]	@ (8000e74 <HAL_TIM_PWM_MspInit+0x40>)
 8000e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e5a:	f003 0302 	and.w	r3, r3, #2
 8000e5e:	60fb      	str	r3, [r7, #12]
 8000e60:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000e62:	bf00      	nop
 8000e64:	3714      	adds	r7, #20
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	40000400 	.word	0x40000400
 8000e74:	40023800 	.word	0x40023800

08000e78 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b088      	sub	sp, #32
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e80:	f107 030c 	add.w	r3, r7, #12
 8000e84:	2200      	movs	r2, #0
 8000e86:	601a      	str	r2, [r3, #0]
 8000e88:	605a      	str	r2, [r3, #4]
 8000e8a:	609a      	str	r2, [r3, #8]
 8000e8c:	60da      	str	r2, [r3, #12]
 8000e8e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a12      	ldr	r2, [pc, #72]	@ (8000ee0 <HAL_TIM_MspPostInit+0x68>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d11d      	bne.n	8000ed6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	60bb      	str	r3, [r7, #8]
 8000e9e:	4b11      	ldr	r3, [pc, #68]	@ (8000ee4 <HAL_TIM_MspPostInit+0x6c>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ea2:	4a10      	ldr	r2, [pc, #64]	@ (8000ee4 <HAL_TIM_MspPostInit+0x6c>)
 8000ea4:	f043 0301 	orr.w	r3, r3, #1
 8000ea8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eaa:	4b0e      	ldr	r3, [pc, #56]	@ (8000ee4 <HAL_TIM_MspPostInit+0x6c>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eae:	f003 0301 	and.w	r3, r3, #1
 8000eb2:	60bb      	str	r3, [r7, #8]
 8000eb4:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000eb6:	23c0      	movs	r3, #192	@ 0xc0
 8000eb8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eba:	2302      	movs	r3, #2
 8000ebc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eca:	f107 030c 	add.w	r3, r7, #12
 8000ece:	4619      	mov	r1, r3
 8000ed0:	4805      	ldr	r0, [pc, #20]	@ (8000ee8 <HAL_TIM_MspPostInit+0x70>)
 8000ed2:	f001 f939 	bl	8002148 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000ed6:	bf00      	nop
 8000ed8:	3720      	adds	r7, #32
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	40000400 	.word	0x40000400
 8000ee4:	40023800 	.word	0x40023800
 8000ee8:	40020000 	.word	0x40020000

08000eec <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart6_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ef0:	4b11      	ldr	r3, [pc, #68]	@ (8000f38 <MX_USART2_UART_Init+0x4c>)
 8000ef2:	4a12      	ldr	r2, [pc, #72]	@ (8000f3c <MX_USART2_UART_Init+0x50>)
 8000ef4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ef6:	4b10      	ldr	r3, [pc, #64]	@ (8000f38 <MX_USART2_UART_Init+0x4c>)
 8000ef8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000efc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000efe:	4b0e      	ldr	r3, [pc, #56]	@ (8000f38 <MX_USART2_UART_Init+0x4c>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f04:	4b0c      	ldr	r3, [pc, #48]	@ (8000f38 <MX_USART2_UART_Init+0x4c>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f0a:	4b0b      	ldr	r3, [pc, #44]	@ (8000f38 <MX_USART2_UART_Init+0x4c>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f10:	4b09      	ldr	r3, [pc, #36]	@ (8000f38 <MX_USART2_UART_Init+0x4c>)
 8000f12:	220c      	movs	r2, #12
 8000f14:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f16:	4b08      	ldr	r3, [pc, #32]	@ (8000f38 <MX_USART2_UART_Init+0x4c>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f1c:	4b06      	ldr	r3, [pc, #24]	@ (8000f38 <MX_USART2_UART_Init+0x4c>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f22:	4805      	ldr	r0, [pc, #20]	@ (8000f38 <MX_USART2_UART_Init+0x4c>)
 8000f24:	f002 fbb4 	bl	8003690 <HAL_UART_Init>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f2e:	f7ff fda3 	bl	8000a78 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f32:	bf00      	nop
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	20000124 	.word	0x20000124
 8000f3c:	40004400 	.word	0x40004400

08000f40 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000f44:	4b11      	ldr	r3, [pc, #68]	@ (8000f8c <MX_USART6_UART_Init+0x4c>)
 8000f46:	4a12      	ldr	r2, [pc, #72]	@ (8000f90 <MX_USART6_UART_Init+0x50>)
 8000f48:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8000f4a:	4b10      	ldr	r3, [pc, #64]	@ (8000f8c <MX_USART6_UART_Init+0x4c>)
 8000f4c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000f50:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000f52:	4b0e      	ldr	r3, [pc, #56]	@ (8000f8c <MX_USART6_UART_Init+0x4c>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000f58:	4b0c      	ldr	r3, [pc, #48]	@ (8000f8c <MX_USART6_UART_Init+0x4c>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000f5e:	4b0b      	ldr	r3, [pc, #44]	@ (8000f8c <MX_USART6_UART_Init+0x4c>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000f64:	4b09      	ldr	r3, [pc, #36]	@ (8000f8c <MX_USART6_UART_Init+0x4c>)
 8000f66:	220c      	movs	r2, #12
 8000f68:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f6a:	4b08      	ldr	r3, [pc, #32]	@ (8000f8c <MX_USART6_UART_Init+0x4c>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f70:	4b06      	ldr	r3, [pc, #24]	@ (8000f8c <MX_USART6_UART_Init+0x4c>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000f76:	4805      	ldr	r0, [pc, #20]	@ (8000f8c <MX_USART6_UART_Init+0x4c>)
 8000f78:	f002 fb8a 	bl	8003690 <HAL_UART_Init>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000f82:	f7ff fd79 	bl	8000a78 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000f86:	bf00      	nop
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	2000016c 	.word	0x2000016c
 8000f90:	40011400 	.word	0x40011400

08000f94 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b08c      	sub	sp, #48	@ 0x30
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f9c:	f107 031c 	add.w	r3, r7, #28
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	601a      	str	r2, [r3, #0]
 8000fa4:	605a      	str	r2, [r3, #4]
 8000fa6:	609a      	str	r2, [r3, #8]
 8000fa8:	60da      	str	r2, [r3, #12]
 8000faa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a4d      	ldr	r2, [pc, #308]	@ (80010e8 <HAL_UART_MspInit+0x154>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d134      	bne.n	8001020 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	61bb      	str	r3, [r7, #24]
 8000fba:	4b4c      	ldr	r3, [pc, #304]	@ (80010ec <HAL_UART_MspInit+0x158>)
 8000fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fbe:	4a4b      	ldr	r2, [pc, #300]	@ (80010ec <HAL_UART_MspInit+0x158>)
 8000fc0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fc4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fc6:	4b49      	ldr	r3, [pc, #292]	@ (80010ec <HAL_UART_MspInit+0x158>)
 8000fc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fce:	61bb      	str	r3, [r7, #24]
 8000fd0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	617b      	str	r3, [r7, #20]
 8000fd6:	4b45      	ldr	r3, [pc, #276]	@ (80010ec <HAL_UART_MspInit+0x158>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fda:	4a44      	ldr	r2, [pc, #272]	@ (80010ec <HAL_UART_MspInit+0x158>)
 8000fdc:	f043 0301 	orr.w	r3, r3, #1
 8000fe0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fe2:	4b42      	ldr	r3, [pc, #264]	@ (80010ec <HAL_UART_MspInit+0x158>)
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fe6:	f003 0301 	and.w	r3, r3, #1
 8000fea:	617b      	str	r3, [r7, #20]
 8000fec:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000fee:	230c      	movs	r3, #12
 8000ff0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ffa:	2303      	movs	r3, #3
 8000ffc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ffe:	2307      	movs	r3, #7
 8001000:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001002:	f107 031c 	add.w	r3, r7, #28
 8001006:	4619      	mov	r1, r3
 8001008:	4839      	ldr	r0, [pc, #228]	@ (80010f0 <HAL_UART_MspInit+0x15c>)
 800100a:	f001 f89d 	bl	8002148 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800100e:	2200      	movs	r2, #0
 8001010:	2100      	movs	r1, #0
 8001012:	2026      	movs	r0, #38	@ 0x26
 8001014:	f000 fc5f 	bl	80018d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001018:	2026      	movs	r0, #38	@ 0x26
 800101a:	f000 fc78 	bl	800190e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 800101e:	e05f      	b.n	80010e0 <HAL_UART_MspInit+0x14c>
  else if(uartHandle->Instance==USART6)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a33      	ldr	r2, [pc, #204]	@ (80010f4 <HAL_UART_MspInit+0x160>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d15a      	bne.n	80010e0 <HAL_UART_MspInit+0x14c>
    __HAL_RCC_USART6_CLK_ENABLE();
 800102a:	2300      	movs	r3, #0
 800102c:	613b      	str	r3, [r7, #16]
 800102e:	4b2f      	ldr	r3, [pc, #188]	@ (80010ec <HAL_UART_MspInit+0x158>)
 8001030:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001032:	4a2e      	ldr	r2, [pc, #184]	@ (80010ec <HAL_UART_MspInit+0x158>)
 8001034:	f043 0320 	orr.w	r3, r3, #32
 8001038:	6453      	str	r3, [r2, #68]	@ 0x44
 800103a:	4b2c      	ldr	r3, [pc, #176]	@ (80010ec <HAL_UART_MspInit+0x158>)
 800103c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800103e:	f003 0320 	and.w	r3, r3, #32
 8001042:	613b      	str	r3, [r7, #16]
 8001044:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001046:	2300      	movs	r3, #0
 8001048:	60fb      	str	r3, [r7, #12]
 800104a:	4b28      	ldr	r3, [pc, #160]	@ (80010ec <HAL_UART_MspInit+0x158>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800104e:	4a27      	ldr	r2, [pc, #156]	@ (80010ec <HAL_UART_MspInit+0x158>)
 8001050:	f043 0304 	orr.w	r3, r3, #4
 8001054:	6313      	str	r3, [r2, #48]	@ 0x30
 8001056:	4b25      	ldr	r3, [pc, #148]	@ (80010ec <HAL_UART_MspInit+0x158>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800105a:	f003 0304 	and.w	r3, r3, #4
 800105e:	60fb      	str	r3, [r7, #12]
 8001060:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001062:	23c0      	movs	r3, #192	@ 0xc0
 8001064:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001066:	2302      	movs	r3, #2
 8001068:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106a:	2300      	movs	r3, #0
 800106c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800106e:	2303      	movs	r3, #3
 8001070:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001072:	2308      	movs	r3, #8
 8001074:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001076:	f107 031c 	add.w	r3, r7, #28
 800107a:	4619      	mov	r1, r3
 800107c:	481e      	ldr	r0, [pc, #120]	@ (80010f8 <HAL_UART_MspInit+0x164>)
 800107e:	f001 f863 	bl	8002148 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8001082:	4b1e      	ldr	r3, [pc, #120]	@ (80010fc <HAL_UART_MspInit+0x168>)
 8001084:	4a1e      	ldr	r2, [pc, #120]	@ (8001100 <HAL_UART_MspInit+0x16c>)
 8001086:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8001088:	4b1c      	ldr	r3, [pc, #112]	@ (80010fc <HAL_UART_MspInit+0x168>)
 800108a:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 800108e:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001090:	4b1a      	ldr	r3, [pc, #104]	@ (80010fc <HAL_UART_MspInit+0x168>)
 8001092:	2200      	movs	r2, #0
 8001094:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001096:	4b19      	ldr	r3, [pc, #100]	@ (80010fc <HAL_UART_MspInit+0x168>)
 8001098:	2200      	movs	r2, #0
 800109a:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 800109c:	4b17      	ldr	r3, [pc, #92]	@ (80010fc <HAL_UART_MspInit+0x168>)
 800109e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80010a2:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010a4:	4b15      	ldr	r3, [pc, #84]	@ (80010fc <HAL_UART_MspInit+0x168>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010aa:	4b14      	ldr	r3, [pc, #80]	@ (80010fc <HAL_UART_MspInit+0x168>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 80010b0:	4b12      	ldr	r3, [pc, #72]	@ (80010fc <HAL_UART_MspInit+0x168>)
 80010b2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80010b6:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 80010b8:	4b10      	ldr	r3, [pc, #64]	@ (80010fc <HAL_UART_MspInit+0x168>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010be:	4b0f      	ldr	r3, [pc, #60]	@ (80010fc <HAL_UART_MspInit+0x168>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 80010c4:	480d      	ldr	r0, [pc, #52]	@ (80010fc <HAL_UART_MspInit+0x168>)
 80010c6:	f000 fc3d 	bl	8001944 <HAL_DMA_Init>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <HAL_UART_MspInit+0x140>
      Error_Handler();
 80010d0:	f7ff fcd2 	bl	8000a78 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	4a09      	ldr	r2, [pc, #36]	@ (80010fc <HAL_UART_MspInit+0x168>)
 80010d8:	63da      	str	r2, [r3, #60]	@ 0x3c
 80010da:	4a08      	ldr	r2, [pc, #32]	@ (80010fc <HAL_UART_MspInit+0x168>)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80010e0:	bf00      	nop
 80010e2:	3730      	adds	r7, #48	@ 0x30
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	40004400 	.word	0x40004400
 80010ec:	40023800 	.word	0x40023800
 80010f0:	40020000 	.word	0x40020000
 80010f4:	40011400 	.word	0x40011400
 80010f8:	40020800 	.word	0x40020800
 80010fc:	200001b4 	.word	0x200001b4
 8001100:	40026428 	.word	0x40026428

08001104 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001104:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800113c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001108:	f7ff fe1c 	bl	8000d44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800110c:	480c      	ldr	r0, [pc, #48]	@ (8001140 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800110e:	490d      	ldr	r1, [pc, #52]	@ (8001144 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001110:	4a0d      	ldr	r2, [pc, #52]	@ (8001148 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001112:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001114:	e002      	b.n	800111c <LoopCopyDataInit>

08001116 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001116:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001118:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800111a:	3304      	adds	r3, #4

0800111c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800111c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800111e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001120:	d3f9      	bcc.n	8001116 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001122:	4a0a      	ldr	r2, [pc, #40]	@ (800114c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001124:	4c0a      	ldr	r4, [pc, #40]	@ (8001150 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001126:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001128:	e001      	b.n	800112e <LoopFillZerobss>

0800112a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800112a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800112c:	3204      	adds	r2, #4

0800112e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800112e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001130:	d3fb      	bcc.n	800112a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001132:	f003 fbc3 	bl	80048bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001136:	f7ff fb51 	bl	80007dc <main>
  bx  lr    
 800113a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800113c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001140:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001144:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001148:	0800494c 	.word	0x0800494c
  ldr r2, =_sbss
 800114c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001150:	20000218 	.word	0x20000218

08001154 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001154:	e7fe      	b.n	8001154 <ADC_IRQHandler>
	...

08001158 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800115c:	4b0e      	ldr	r3, [pc, #56]	@ (8001198 <HAL_Init+0x40>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a0d      	ldr	r2, [pc, #52]	@ (8001198 <HAL_Init+0x40>)
 8001162:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001166:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001168:	4b0b      	ldr	r3, [pc, #44]	@ (8001198 <HAL_Init+0x40>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a0a      	ldr	r2, [pc, #40]	@ (8001198 <HAL_Init+0x40>)
 800116e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001172:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001174:	4b08      	ldr	r3, [pc, #32]	@ (8001198 <HAL_Init+0x40>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a07      	ldr	r2, [pc, #28]	@ (8001198 <HAL_Init+0x40>)
 800117a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800117e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001180:	2003      	movs	r0, #3
 8001182:	f000 fb9d 	bl	80018c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001186:	200f      	movs	r0, #15
 8001188:	f000 f808 	bl	800119c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800118c:	f7ff fd64 	bl	8000c58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001190:	2300      	movs	r3, #0
}
 8001192:	4618      	mov	r0, r3
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	40023c00 	.word	0x40023c00

0800119c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011a4:	4b12      	ldr	r3, [pc, #72]	@ (80011f0 <HAL_InitTick+0x54>)
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	4b12      	ldr	r3, [pc, #72]	@ (80011f4 <HAL_InitTick+0x58>)
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	4619      	mov	r1, r3
 80011ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80011b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80011ba:	4618      	mov	r0, r3
 80011bc:	f000 fbb5 	bl	800192a <HAL_SYSTICK_Config>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011c6:	2301      	movs	r3, #1
 80011c8:	e00e      	b.n	80011e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2b0f      	cmp	r3, #15
 80011ce:	d80a      	bhi.n	80011e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011d0:	2200      	movs	r2, #0
 80011d2:	6879      	ldr	r1, [r7, #4]
 80011d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80011d8:	f000 fb7d 	bl	80018d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011dc:	4a06      	ldr	r2, [pc, #24]	@ (80011f8 <HAL_InitTick+0x5c>)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011e2:	2300      	movs	r3, #0
 80011e4:	e000      	b.n	80011e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011e6:	2301      	movs	r3, #1
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	3708      	adds	r7, #8
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	20000000 	.word	0x20000000
 80011f4:	20000008 	.word	0x20000008
 80011f8:	20000004 	.word	0x20000004

080011fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001200:	4b06      	ldr	r3, [pc, #24]	@ (800121c <HAL_IncTick+0x20>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	461a      	mov	r2, r3
 8001206:	4b06      	ldr	r3, [pc, #24]	@ (8001220 <HAL_IncTick+0x24>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4413      	add	r3, r2
 800120c:	4a04      	ldr	r2, [pc, #16]	@ (8001220 <HAL_IncTick+0x24>)
 800120e:	6013      	str	r3, [r2, #0]
}
 8001210:	bf00      	nop
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	20000008 	.word	0x20000008
 8001220:	20000214 	.word	0x20000214

08001224 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  return uwTick;
 8001228:	4b03      	ldr	r3, [pc, #12]	@ (8001238 <HAL_GetTick+0x14>)
 800122a:	681b      	ldr	r3, [r3, #0]
}
 800122c:	4618      	mov	r0, r3
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	20000214 	.word	0x20000214

0800123c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b084      	sub	sp, #16
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001244:	2300      	movs	r3, #0
 8001246:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d101      	bne.n	8001252 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800124e:	2301      	movs	r3, #1
 8001250:	e033      	b.n	80012ba <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001256:	2b00      	cmp	r3, #0
 8001258:	d109      	bne.n	800126e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800125a:	6878      	ldr	r0, [r7, #4]
 800125c:	f7ff f9a2 	bl	80005a4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	2200      	movs	r2, #0
 8001264:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2200      	movs	r2, #0
 800126a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001272:	f003 0310 	and.w	r3, r3, #16
 8001276:	2b00      	cmp	r3, #0
 8001278:	d118      	bne.n	80012ac <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800127e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001282:	f023 0302 	bic.w	r3, r3, #2
 8001286:	f043 0202 	orr.w	r2, r3, #2
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800128e:	6878      	ldr	r0, [r7, #4]
 8001290:	f000 f94a 	bl	8001528 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2200      	movs	r2, #0
 8001298:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800129e:	f023 0303 	bic.w	r3, r3, #3
 80012a2:	f043 0201 	orr.w	r2, r3, #1
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	641a      	str	r2, [r3, #64]	@ 0x40
 80012aa:	e001      	b.n	80012b0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80012ac:	2301      	movs	r3, #1
 80012ae:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2200      	movs	r2, #0
 80012b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80012b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3710      	adds	r7, #16
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
	...

080012c4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b085      	sub	sp, #20
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
 80012cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80012ce:	2300      	movs	r3, #0
 80012d0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80012d8:	2b01      	cmp	r3, #1
 80012da:	d101      	bne.n	80012e0 <HAL_ADC_ConfigChannel+0x1c>
 80012dc:	2302      	movs	r3, #2
 80012de:	e113      	b.n	8001508 <HAL_ADC_ConfigChannel+0x244>
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2201      	movs	r2, #1
 80012e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	2b09      	cmp	r3, #9
 80012ee:	d925      	bls.n	800133c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	68d9      	ldr	r1, [r3, #12]
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	b29b      	uxth	r3, r3
 80012fc:	461a      	mov	r2, r3
 80012fe:	4613      	mov	r3, r2
 8001300:	005b      	lsls	r3, r3, #1
 8001302:	4413      	add	r3, r2
 8001304:	3b1e      	subs	r3, #30
 8001306:	2207      	movs	r2, #7
 8001308:	fa02 f303 	lsl.w	r3, r2, r3
 800130c:	43da      	mvns	r2, r3
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	400a      	ands	r2, r1
 8001314:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	68d9      	ldr	r1, [r3, #12]
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	689a      	ldr	r2, [r3, #8]
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	b29b      	uxth	r3, r3
 8001326:	4618      	mov	r0, r3
 8001328:	4603      	mov	r3, r0
 800132a:	005b      	lsls	r3, r3, #1
 800132c:	4403      	add	r3, r0
 800132e:	3b1e      	subs	r3, #30
 8001330:	409a      	lsls	r2, r3
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	430a      	orrs	r2, r1
 8001338:	60da      	str	r2, [r3, #12]
 800133a:	e022      	b.n	8001382 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	6919      	ldr	r1, [r3, #16]
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	b29b      	uxth	r3, r3
 8001348:	461a      	mov	r2, r3
 800134a:	4613      	mov	r3, r2
 800134c:	005b      	lsls	r3, r3, #1
 800134e:	4413      	add	r3, r2
 8001350:	2207      	movs	r2, #7
 8001352:	fa02 f303 	lsl.w	r3, r2, r3
 8001356:	43da      	mvns	r2, r3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	400a      	ands	r2, r1
 800135e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	6919      	ldr	r1, [r3, #16]
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	689a      	ldr	r2, [r3, #8]
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	b29b      	uxth	r3, r3
 8001370:	4618      	mov	r0, r3
 8001372:	4603      	mov	r3, r0
 8001374:	005b      	lsls	r3, r3, #1
 8001376:	4403      	add	r3, r0
 8001378:	409a      	lsls	r2, r3
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	430a      	orrs	r2, r1
 8001380:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	2b06      	cmp	r3, #6
 8001388:	d824      	bhi.n	80013d4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	685a      	ldr	r2, [r3, #4]
 8001394:	4613      	mov	r3, r2
 8001396:	009b      	lsls	r3, r3, #2
 8001398:	4413      	add	r3, r2
 800139a:	3b05      	subs	r3, #5
 800139c:	221f      	movs	r2, #31
 800139e:	fa02 f303 	lsl.w	r3, r2, r3
 80013a2:	43da      	mvns	r2, r3
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	400a      	ands	r2, r1
 80013aa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	b29b      	uxth	r3, r3
 80013b8:	4618      	mov	r0, r3
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	685a      	ldr	r2, [r3, #4]
 80013be:	4613      	mov	r3, r2
 80013c0:	009b      	lsls	r3, r3, #2
 80013c2:	4413      	add	r3, r2
 80013c4:	3b05      	subs	r3, #5
 80013c6:	fa00 f203 	lsl.w	r2, r0, r3
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	430a      	orrs	r2, r1
 80013d0:	635a      	str	r2, [r3, #52]	@ 0x34
 80013d2:	e04c      	b.n	800146e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	2b0c      	cmp	r3, #12
 80013da:	d824      	bhi.n	8001426 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	685a      	ldr	r2, [r3, #4]
 80013e6:	4613      	mov	r3, r2
 80013e8:	009b      	lsls	r3, r3, #2
 80013ea:	4413      	add	r3, r2
 80013ec:	3b23      	subs	r3, #35	@ 0x23
 80013ee:	221f      	movs	r2, #31
 80013f0:	fa02 f303 	lsl.w	r3, r2, r3
 80013f4:	43da      	mvns	r2, r3
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	400a      	ands	r2, r1
 80013fc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	b29b      	uxth	r3, r3
 800140a:	4618      	mov	r0, r3
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	685a      	ldr	r2, [r3, #4]
 8001410:	4613      	mov	r3, r2
 8001412:	009b      	lsls	r3, r3, #2
 8001414:	4413      	add	r3, r2
 8001416:	3b23      	subs	r3, #35	@ 0x23
 8001418:	fa00 f203 	lsl.w	r2, r0, r3
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	430a      	orrs	r2, r1
 8001422:	631a      	str	r2, [r3, #48]	@ 0x30
 8001424:	e023      	b.n	800146e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	685a      	ldr	r2, [r3, #4]
 8001430:	4613      	mov	r3, r2
 8001432:	009b      	lsls	r3, r3, #2
 8001434:	4413      	add	r3, r2
 8001436:	3b41      	subs	r3, #65	@ 0x41
 8001438:	221f      	movs	r2, #31
 800143a:	fa02 f303 	lsl.w	r3, r2, r3
 800143e:	43da      	mvns	r2, r3
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	400a      	ands	r2, r1
 8001446:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	b29b      	uxth	r3, r3
 8001454:	4618      	mov	r0, r3
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	685a      	ldr	r2, [r3, #4]
 800145a:	4613      	mov	r3, r2
 800145c:	009b      	lsls	r3, r3, #2
 800145e:	4413      	add	r3, r2
 8001460:	3b41      	subs	r3, #65	@ 0x41
 8001462:	fa00 f203 	lsl.w	r2, r0, r3
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	430a      	orrs	r2, r1
 800146c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800146e:	4b29      	ldr	r3, [pc, #164]	@ (8001514 <HAL_ADC_ConfigChannel+0x250>)
 8001470:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a28      	ldr	r2, [pc, #160]	@ (8001518 <HAL_ADC_ConfigChannel+0x254>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d10f      	bne.n	800149c <HAL_ADC_ConfigChannel+0x1d8>
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	2b12      	cmp	r3, #18
 8001482:	d10b      	bne.n	800149c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a1d      	ldr	r2, [pc, #116]	@ (8001518 <HAL_ADC_ConfigChannel+0x254>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d12b      	bne.n	80014fe <HAL_ADC_ConfigChannel+0x23a>
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a1c      	ldr	r2, [pc, #112]	@ (800151c <HAL_ADC_ConfigChannel+0x258>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d003      	beq.n	80014b8 <HAL_ADC_ConfigChannel+0x1f4>
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	2b11      	cmp	r3, #17
 80014b6:	d122      	bne.n	80014fe <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a11      	ldr	r2, [pc, #68]	@ (800151c <HAL_ADC_ConfigChannel+0x258>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d111      	bne.n	80014fe <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80014da:	4b11      	ldr	r3, [pc, #68]	@ (8001520 <HAL_ADC_ConfigChannel+0x25c>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a11      	ldr	r2, [pc, #68]	@ (8001524 <HAL_ADC_ConfigChannel+0x260>)
 80014e0:	fba2 2303 	umull	r2, r3, r2, r3
 80014e4:	0c9a      	lsrs	r2, r3, #18
 80014e6:	4613      	mov	r3, r2
 80014e8:	009b      	lsls	r3, r3, #2
 80014ea:	4413      	add	r3, r2
 80014ec:	005b      	lsls	r3, r3, #1
 80014ee:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80014f0:	e002      	b.n	80014f8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80014f2:	68bb      	ldr	r3, [r7, #8]
 80014f4:	3b01      	subs	r3, #1
 80014f6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d1f9      	bne.n	80014f2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2200      	movs	r2, #0
 8001502:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001506:	2300      	movs	r3, #0
}
 8001508:	4618      	mov	r0, r3
 800150a:	3714      	adds	r7, #20
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr
 8001514:	40012300 	.word	0x40012300
 8001518:	40012000 	.word	0x40012000
 800151c:	10000012 	.word	0x10000012
 8001520:	20000000 	.word	0x20000000
 8001524:	431bde83 	.word	0x431bde83

08001528 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001528:	b480      	push	{r7}
 800152a:	b085      	sub	sp, #20
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001530:	4b79      	ldr	r3, [pc, #484]	@ (8001718 <ADC_Init+0x1f0>)
 8001532:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	685a      	ldr	r2, [r3, #4]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	431a      	orrs	r2, r3
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	685a      	ldr	r2, [r3, #4]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800155c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	6859      	ldr	r1, [r3, #4]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	691b      	ldr	r3, [r3, #16]
 8001568:	021a      	lsls	r2, r3, #8
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	430a      	orrs	r2, r1
 8001570:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	685a      	ldr	r2, [r3, #4]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001580:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	6859      	ldr	r1, [r3, #4]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	689a      	ldr	r2, [r3, #8]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	430a      	orrs	r2, r1
 8001592:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	689a      	ldr	r2, [r3, #8]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80015a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	6899      	ldr	r1, [r3, #8]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	68da      	ldr	r2, [r3, #12]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	430a      	orrs	r2, r1
 80015b4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015ba:	4a58      	ldr	r2, [pc, #352]	@ (800171c <ADC_Init+0x1f4>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d022      	beq.n	8001606 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	689a      	ldr	r2, [r3, #8]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80015ce:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	6899      	ldr	r1, [r3, #8]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	430a      	orrs	r2, r1
 80015e0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	689a      	ldr	r2, [r3, #8]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80015f0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	6899      	ldr	r1, [r3, #8]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	430a      	orrs	r2, r1
 8001602:	609a      	str	r2, [r3, #8]
 8001604:	e00f      	b.n	8001626 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	689a      	ldr	r2, [r3, #8]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001614:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	689a      	ldr	r2, [r3, #8]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001624:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	689a      	ldr	r2, [r3, #8]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f022 0202 	bic.w	r2, r2, #2
 8001634:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	6899      	ldr	r1, [r3, #8]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	7e1b      	ldrb	r3, [r3, #24]
 8001640:	005a      	lsls	r2, r3, #1
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	430a      	orrs	r2, r1
 8001648:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d01b      	beq.n	800168c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	685a      	ldr	r2, [r3, #4]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001662:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	685a      	ldr	r2, [r3, #4]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001672:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	6859      	ldr	r1, [r3, #4]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800167e:	3b01      	subs	r3, #1
 8001680:	035a      	lsls	r2, r3, #13
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	430a      	orrs	r2, r1
 8001688:	605a      	str	r2, [r3, #4]
 800168a:	e007      	b.n	800169c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	685a      	ldr	r2, [r3, #4]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800169a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80016aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	69db      	ldr	r3, [r3, #28]
 80016b6:	3b01      	subs	r3, #1
 80016b8:	051a      	lsls	r2, r3, #20
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	430a      	orrs	r2, r1
 80016c0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	689a      	ldr	r2, [r3, #8]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80016d0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	6899      	ldr	r1, [r3, #8]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80016de:	025a      	lsls	r2, r3, #9
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	430a      	orrs	r2, r1
 80016e6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	689a      	ldr	r2, [r3, #8]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80016f6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	6899      	ldr	r1, [r3, #8]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	695b      	ldr	r3, [r3, #20]
 8001702:	029a      	lsls	r2, r3, #10
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	430a      	orrs	r2, r1
 800170a:	609a      	str	r2, [r3, #8]
}
 800170c:	bf00      	nop
 800170e:	3714      	adds	r7, #20
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr
 8001718:	40012300 	.word	0x40012300
 800171c:	0f000001 	.word	0x0f000001

08001720 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001720:	b480      	push	{r7}
 8001722:	b085      	sub	sp, #20
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	f003 0307 	and.w	r3, r3, #7
 800172e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001730:	4b0c      	ldr	r3, [pc, #48]	@ (8001764 <__NVIC_SetPriorityGrouping+0x44>)
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001736:	68ba      	ldr	r2, [r7, #8]
 8001738:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800173c:	4013      	ands	r3, r2
 800173e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001748:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800174c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001750:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001752:	4a04      	ldr	r2, [pc, #16]	@ (8001764 <__NVIC_SetPriorityGrouping+0x44>)
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	60d3      	str	r3, [r2, #12]
}
 8001758:	bf00      	nop
 800175a:	3714      	adds	r7, #20
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr
 8001764:	e000ed00 	.word	0xe000ed00

08001768 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800176c:	4b04      	ldr	r3, [pc, #16]	@ (8001780 <__NVIC_GetPriorityGrouping+0x18>)
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	0a1b      	lsrs	r3, r3, #8
 8001772:	f003 0307 	and.w	r3, r3, #7
}
 8001776:	4618      	mov	r0, r3
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr
 8001780:	e000ed00 	.word	0xe000ed00

08001784 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	4603      	mov	r3, r0
 800178c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800178e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001792:	2b00      	cmp	r3, #0
 8001794:	db0b      	blt.n	80017ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001796:	79fb      	ldrb	r3, [r7, #7]
 8001798:	f003 021f 	and.w	r2, r3, #31
 800179c:	4907      	ldr	r1, [pc, #28]	@ (80017bc <__NVIC_EnableIRQ+0x38>)
 800179e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a2:	095b      	lsrs	r3, r3, #5
 80017a4:	2001      	movs	r0, #1
 80017a6:	fa00 f202 	lsl.w	r2, r0, r2
 80017aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80017ae:	bf00      	nop
 80017b0:	370c      	adds	r7, #12
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	e000e100 	.word	0xe000e100

080017c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	4603      	mov	r3, r0
 80017c8:	6039      	str	r1, [r7, #0]
 80017ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	db0a      	blt.n	80017ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	b2da      	uxtb	r2, r3
 80017d8:	490c      	ldr	r1, [pc, #48]	@ (800180c <__NVIC_SetPriority+0x4c>)
 80017da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017de:	0112      	lsls	r2, r2, #4
 80017e0:	b2d2      	uxtb	r2, r2
 80017e2:	440b      	add	r3, r1
 80017e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017e8:	e00a      	b.n	8001800 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	b2da      	uxtb	r2, r3
 80017ee:	4908      	ldr	r1, [pc, #32]	@ (8001810 <__NVIC_SetPriority+0x50>)
 80017f0:	79fb      	ldrb	r3, [r7, #7]
 80017f2:	f003 030f 	and.w	r3, r3, #15
 80017f6:	3b04      	subs	r3, #4
 80017f8:	0112      	lsls	r2, r2, #4
 80017fa:	b2d2      	uxtb	r2, r2
 80017fc:	440b      	add	r3, r1
 80017fe:	761a      	strb	r2, [r3, #24]
}
 8001800:	bf00      	nop
 8001802:	370c      	adds	r7, #12
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr
 800180c:	e000e100 	.word	0xe000e100
 8001810:	e000ed00 	.word	0xe000ed00

08001814 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001814:	b480      	push	{r7}
 8001816:	b089      	sub	sp, #36	@ 0x24
 8001818:	af00      	add	r7, sp, #0
 800181a:	60f8      	str	r0, [r7, #12]
 800181c:	60b9      	str	r1, [r7, #8]
 800181e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	f003 0307 	and.w	r3, r3, #7
 8001826:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001828:	69fb      	ldr	r3, [r7, #28]
 800182a:	f1c3 0307 	rsb	r3, r3, #7
 800182e:	2b04      	cmp	r3, #4
 8001830:	bf28      	it	cs
 8001832:	2304      	movcs	r3, #4
 8001834:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001836:	69fb      	ldr	r3, [r7, #28]
 8001838:	3304      	adds	r3, #4
 800183a:	2b06      	cmp	r3, #6
 800183c:	d902      	bls.n	8001844 <NVIC_EncodePriority+0x30>
 800183e:	69fb      	ldr	r3, [r7, #28]
 8001840:	3b03      	subs	r3, #3
 8001842:	e000      	b.n	8001846 <NVIC_EncodePriority+0x32>
 8001844:	2300      	movs	r3, #0
 8001846:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001848:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800184c:	69bb      	ldr	r3, [r7, #24]
 800184e:	fa02 f303 	lsl.w	r3, r2, r3
 8001852:	43da      	mvns	r2, r3
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	401a      	ands	r2, r3
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800185c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	fa01 f303 	lsl.w	r3, r1, r3
 8001866:	43d9      	mvns	r1, r3
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800186c:	4313      	orrs	r3, r2
         );
}
 800186e:	4618      	mov	r0, r3
 8001870:	3724      	adds	r7, #36	@ 0x24
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr
	...

0800187c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	3b01      	subs	r3, #1
 8001888:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800188c:	d301      	bcc.n	8001892 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800188e:	2301      	movs	r3, #1
 8001890:	e00f      	b.n	80018b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001892:	4a0a      	ldr	r2, [pc, #40]	@ (80018bc <SysTick_Config+0x40>)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	3b01      	subs	r3, #1
 8001898:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800189a:	210f      	movs	r1, #15
 800189c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80018a0:	f7ff ff8e 	bl	80017c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018a4:	4b05      	ldr	r3, [pc, #20]	@ (80018bc <SysTick_Config+0x40>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018aa:	4b04      	ldr	r3, [pc, #16]	@ (80018bc <SysTick_Config+0x40>)
 80018ac:	2207      	movs	r2, #7
 80018ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018b0:	2300      	movs	r3, #0
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3708      	adds	r7, #8
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	e000e010 	.word	0xe000e010

080018c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018c8:	6878      	ldr	r0, [r7, #4]
 80018ca:	f7ff ff29 	bl	8001720 <__NVIC_SetPriorityGrouping>
}
 80018ce:	bf00      	nop
 80018d0:	3708      	adds	r7, #8
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}

080018d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018d6:	b580      	push	{r7, lr}
 80018d8:	b086      	sub	sp, #24
 80018da:	af00      	add	r7, sp, #0
 80018dc:	4603      	mov	r3, r0
 80018de:	60b9      	str	r1, [r7, #8]
 80018e0:	607a      	str	r2, [r7, #4]
 80018e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018e4:	2300      	movs	r3, #0
 80018e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018e8:	f7ff ff3e 	bl	8001768 <__NVIC_GetPriorityGrouping>
 80018ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018ee:	687a      	ldr	r2, [r7, #4]
 80018f0:	68b9      	ldr	r1, [r7, #8]
 80018f2:	6978      	ldr	r0, [r7, #20]
 80018f4:	f7ff ff8e 	bl	8001814 <NVIC_EncodePriority>
 80018f8:	4602      	mov	r2, r0
 80018fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018fe:	4611      	mov	r1, r2
 8001900:	4618      	mov	r0, r3
 8001902:	f7ff ff5d 	bl	80017c0 <__NVIC_SetPriority>
}
 8001906:	bf00      	nop
 8001908:	3718      	adds	r7, #24
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}

0800190e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800190e:	b580      	push	{r7, lr}
 8001910:	b082      	sub	sp, #8
 8001912:	af00      	add	r7, sp, #0
 8001914:	4603      	mov	r3, r0
 8001916:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001918:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800191c:	4618      	mov	r0, r3
 800191e:	f7ff ff31 	bl	8001784 <__NVIC_EnableIRQ>
}
 8001922:	bf00      	nop
 8001924:	3708      	adds	r7, #8
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}

0800192a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800192a:	b580      	push	{r7, lr}
 800192c:	b082      	sub	sp, #8
 800192e:	af00      	add	r7, sp, #0
 8001930:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001932:	6878      	ldr	r0, [r7, #4]
 8001934:	f7ff ffa2 	bl	800187c <SysTick_Config>
 8001938:	4603      	mov	r3, r0
}
 800193a:	4618      	mov	r0, r3
 800193c:	3708      	adds	r7, #8
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
	...

08001944 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b086      	sub	sp, #24
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800194c:	2300      	movs	r3, #0
 800194e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001950:	f7ff fc68 	bl	8001224 <HAL_GetTick>
 8001954:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d101      	bne.n	8001960 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800195c:	2301      	movs	r3, #1
 800195e:	e099      	b.n	8001a94 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2202      	movs	r2, #2
 8001964:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2200      	movs	r2, #0
 800196c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f022 0201 	bic.w	r2, r2, #1
 800197e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001980:	e00f      	b.n	80019a2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001982:	f7ff fc4f 	bl	8001224 <HAL_GetTick>
 8001986:	4602      	mov	r2, r0
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	1ad3      	subs	r3, r2, r3
 800198c:	2b05      	cmp	r3, #5
 800198e:	d908      	bls.n	80019a2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2220      	movs	r2, #32
 8001994:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2203      	movs	r2, #3
 800199a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800199e:	2303      	movs	r3, #3
 80019a0:	e078      	b.n	8001a94 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 0301 	and.w	r3, r3, #1
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d1e8      	bne.n	8001982 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80019b8:	697a      	ldr	r2, [r7, #20]
 80019ba:	4b38      	ldr	r3, [pc, #224]	@ (8001a9c <HAL_DMA_Init+0x158>)
 80019bc:	4013      	ands	r3, r2
 80019be:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	685a      	ldr	r2, [r3, #4]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	691b      	ldr	r3, [r3, #16]
 80019d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	699b      	ldr	r3, [r3, #24]
 80019e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6a1b      	ldr	r3, [r3, #32]
 80019ec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019ee:	697a      	ldr	r2, [r7, #20]
 80019f0:	4313      	orrs	r3, r2
 80019f2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019f8:	2b04      	cmp	r3, #4
 80019fa:	d107      	bne.n	8001a0c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a04:	4313      	orrs	r3, r2
 8001a06:	697a      	ldr	r2, [r7, #20]
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	697a      	ldr	r2, [r7, #20]
 8001a12:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	695b      	ldr	r3, [r3, #20]
 8001a1a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	f023 0307 	bic.w	r3, r3, #7
 8001a22:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a28:	697a      	ldr	r2, [r7, #20]
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a32:	2b04      	cmp	r3, #4
 8001a34:	d117      	bne.n	8001a66 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a3a:	697a      	ldr	r2, [r7, #20]
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d00e      	beq.n	8001a66 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	f000 fb01 	bl	8002050 <DMA_CheckFifoParam>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d008      	beq.n	8001a66 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2240      	movs	r2, #64	@ 0x40
 8001a58:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001a62:	2301      	movs	r3, #1
 8001a64:	e016      	b.n	8001a94 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	697a      	ldr	r2, [r7, #20]
 8001a6c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001a6e:	6878      	ldr	r0, [r7, #4]
 8001a70:	f000 fab8 	bl	8001fe4 <DMA_CalcBaseAndBitshift>
 8001a74:	4603      	mov	r3, r0
 8001a76:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a7c:	223f      	movs	r2, #63	@ 0x3f
 8001a7e:	409a      	lsls	r2, r3
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2200      	movs	r2, #0
 8001a88:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001a92:	2300      	movs	r3, #0
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3718      	adds	r7, #24
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	f010803f 	.word	0xf010803f

08001aa0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b086      	sub	sp, #24
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	60f8      	str	r0, [r7, #12]
 8001aa8:	60b9      	str	r1, [r7, #8]
 8001aaa:	607a      	str	r2, [r7, #4]
 8001aac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ab6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d101      	bne.n	8001ac6 <HAL_DMA_Start_IT+0x26>
 8001ac2:	2302      	movs	r3, #2
 8001ac4:	e040      	b.n	8001b48 <HAL_DMA_Start_IT+0xa8>
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	2201      	movs	r2, #1
 8001aca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d12f      	bne.n	8001b3a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	2202      	movs	r2, #2
 8001ade:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	687a      	ldr	r2, [r7, #4]
 8001aec:	68b9      	ldr	r1, [r7, #8]
 8001aee:	68f8      	ldr	r0, [r7, #12]
 8001af0:	f000 fa4a 	bl	8001f88 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001af8:	223f      	movs	r2, #63	@ 0x3f
 8001afa:	409a      	lsls	r2, r3
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f042 0216 	orr.w	r2, r2, #22
 8001b0e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d007      	beq.n	8001b28 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f042 0208 	orr.w	r2, r2, #8
 8001b26:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f042 0201 	orr.w	r2, r2, #1
 8001b36:	601a      	str	r2, [r3, #0]
 8001b38:	e005      	b.n	8001b46 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001b42:	2302      	movs	r3, #2
 8001b44:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001b46:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3718      	adds	r7, #24
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}

08001b50 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b084      	sub	sp, #16
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b5c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001b5e:	f7ff fb61 	bl	8001224 <HAL_GetTick>
 8001b62:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	2b02      	cmp	r3, #2
 8001b6e:	d008      	beq.n	8001b82 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2280      	movs	r2, #128	@ 0x80
 8001b74:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e052      	b.n	8001c28 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f022 0216 	bic.w	r2, r2, #22
 8001b90:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	695a      	ldr	r2, [r3, #20]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001ba0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d103      	bne.n	8001bb2 <HAL_DMA_Abort+0x62>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d007      	beq.n	8001bc2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f022 0208 	bic.w	r2, r2, #8
 8001bc0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f022 0201 	bic.w	r2, r2, #1
 8001bd0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001bd2:	e013      	b.n	8001bfc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001bd4:	f7ff fb26 	bl	8001224 <HAL_GetTick>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	68bb      	ldr	r3, [r7, #8]
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	2b05      	cmp	r3, #5
 8001be0:	d90c      	bls.n	8001bfc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2220      	movs	r2, #32
 8001be6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2203      	movs	r2, #3
 8001bec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001bf8:	2303      	movs	r3, #3
 8001bfa:	e015      	b.n	8001c28 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 0301 	and.w	r3, r3, #1
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d1e4      	bne.n	8001bd4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c0e:	223f      	movs	r2, #63	@ 0x3f
 8001c10:	409a      	lsls	r2, r3
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2201      	movs	r2, #1
 8001c1a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2200      	movs	r2, #0
 8001c22:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001c26:	2300      	movs	r3, #0
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3710      	adds	r7, #16
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}

08001c30 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	2b02      	cmp	r3, #2
 8001c42:	d004      	beq.n	8001c4e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2280      	movs	r2, #128	@ 0x80
 8001c48:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e00c      	b.n	8001c68 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2205      	movs	r2, #5
 8001c52:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f022 0201 	bic.w	r2, r2, #1
 8001c64:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001c66:	2300      	movs	r3, #0
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	370c      	adds	r7, #12
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr

08001c74 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b086      	sub	sp, #24
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001c80:	4b8e      	ldr	r3, [pc, #568]	@ (8001ebc <HAL_DMA_IRQHandler+0x248>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a8e      	ldr	r2, [pc, #568]	@ (8001ec0 <HAL_DMA_IRQHandler+0x24c>)
 8001c86:	fba2 2303 	umull	r2, r3, r2, r3
 8001c8a:	0a9b      	lsrs	r3, r3, #10
 8001c8c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c92:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c9e:	2208      	movs	r2, #8
 8001ca0:	409a      	lsls	r2, r3
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d01a      	beq.n	8001ce0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f003 0304 	and.w	r3, r3, #4
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d013      	beq.n	8001ce0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f022 0204 	bic.w	r2, r2, #4
 8001cc6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ccc:	2208      	movs	r2, #8
 8001cce:	409a      	lsls	r2, r3
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cd8:	f043 0201 	orr.w	r2, r3, #1
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	409a      	lsls	r2, r3
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	4013      	ands	r3, r2
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d012      	beq.n	8001d16 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	695b      	ldr	r3, [r3, #20]
 8001cf6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d00b      	beq.n	8001d16 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d02:	2201      	movs	r2, #1
 8001d04:	409a      	lsls	r2, r3
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d0e:	f043 0202 	orr.w	r2, r3, #2
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d1a:	2204      	movs	r2, #4
 8001d1c:	409a      	lsls	r2, r3
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	4013      	ands	r3, r2
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d012      	beq.n	8001d4c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 0302 	and.w	r3, r3, #2
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d00b      	beq.n	8001d4c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d38:	2204      	movs	r2, #4
 8001d3a:	409a      	lsls	r2, r3
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d44:	f043 0204 	orr.w	r2, r3, #4
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d50:	2210      	movs	r2, #16
 8001d52:	409a      	lsls	r2, r3
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	4013      	ands	r3, r2
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d043      	beq.n	8001de4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 0308 	and.w	r3, r3, #8
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d03c      	beq.n	8001de4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d6e:	2210      	movs	r2, #16
 8001d70:	409a      	lsls	r2, r3
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d018      	beq.n	8001db6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d108      	bne.n	8001da4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d024      	beq.n	8001de4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	4798      	blx	r3
 8001da2:	e01f      	b.n	8001de4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d01b      	beq.n	8001de4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	4798      	blx	r3
 8001db4:	e016      	b.n	8001de4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d107      	bne.n	8001dd4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f022 0208 	bic.w	r2, r2, #8
 8001dd2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d003      	beq.n	8001de4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001de0:	6878      	ldr	r0, [r7, #4]
 8001de2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001de8:	2220      	movs	r2, #32
 8001dea:	409a      	lsls	r2, r3
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	4013      	ands	r3, r2
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	f000 808f 	beq.w	8001f14 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 0310 	and.w	r3, r3, #16
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	f000 8087 	beq.w	8001f14 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e0a:	2220      	movs	r2, #32
 8001e0c:	409a      	lsls	r2, r3
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	2b05      	cmp	r3, #5
 8001e1c:	d136      	bne.n	8001e8c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f022 0216 	bic.w	r2, r2, #22
 8001e2c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	695a      	ldr	r2, [r3, #20]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001e3c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d103      	bne.n	8001e4e <HAL_DMA_IRQHandler+0x1da>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d007      	beq.n	8001e5e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f022 0208 	bic.w	r2, r2, #8
 8001e5c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e62:	223f      	movs	r2, #63	@ 0x3f
 8001e64:	409a      	lsls	r2, r3
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2200      	movs	r2, #0
 8001e76:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d07e      	beq.n	8001f80 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	4798      	blx	r3
        }
        return;
 8001e8a:	e079      	b.n	8001f80 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d01d      	beq.n	8001ed6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d10d      	bne.n	8001ec4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d031      	beq.n	8001f14 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	4798      	blx	r3
 8001eb8:	e02c      	b.n	8001f14 <HAL_DMA_IRQHandler+0x2a0>
 8001eba:	bf00      	nop
 8001ebc:	20000000 	.word	0x20000000
 8001ec0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d023      	beq.n	8001f14 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	4798      	blx	r3
 8001ed4:	e01e      	b.n	8001f14 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d10f      	bne.n	8001f04 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f022 0210 	bic.w	r2, r2, #16
 8001ef2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2200      	movs	r2, #0
 8001f00:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d003      	beq.n	8001f14 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d032      	beq.n	8001f82 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f20:	f003 0301 	and.w	r3, r3, #1
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d022      	beq.n	8001f6e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2205      	movs	r2, #5
 8001f2c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f022 0201 	bic.w	r2, r2, #1
 8001f3e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	3301      	adds	r3, #1
 8001f44:	60bb      	str	r3, [r7, #8]
 8001f46:	697a      	ldr	r2, [r7, #20]
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d307      	bcc.n	8001f5c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 0301 	and.w	r3, r3, #1
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d1f2      	bne.n	8001f40 <HAL_DMA_IRQHandler+0x2cc>
 8001f5a:	e000      	b.n	8001f5e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001f5c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2201      	movs	r2, #1
 8001f62:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d005      	beq.n	8001f82 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	4798      	blx	r3
 8001f7e:	e000      	b.n	8001f82 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001f80:	bf00      	nop
    }
  }
}
 8001f82:	3718      	adds	r7, #24
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}

08001f88 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b085      	sub	sp, #20
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	60f8      	str	r0, [r7, #12]
 8001f90:	60b9      	str	r1, [r7, #8]
 8001f92:	607a      	str	r2, [r7, #4]
 8001f94:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001fa4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	683a      	ldr	r2, [r7, #0]
 8001fac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	2b40      	cmp	r3, #64	@ 0x40
 8001fb4:	d108      	bne.n	8001fc8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	687a      	ldr	r2, [r7, #4]
 8001fbc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	68ba      	ldr	r2, [r7, #8]
 8001fc4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001fc6:	e007      	b.n	8001fd8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	68ba      	ldr	r2, [r7, #8]
 8001fce:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	687a      	ldr	r2, [r7, #4]
 8001fd6:	60da      	str	r2, [r3, #12]
}
 8001fd8:	bf00      	nop
 8001fda:	3714      	adds	r7, #20
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr

08001fe4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b085      	sub	sp, #20
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	3b10      	subs	r3, #16
 8001ff4:	4a14      	ldr	r2, [pc, #80]	@ (8002048 <DMA_CalcBaseAndBitshift+0x64>)
 8001ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8001ffa:	091b      	lsrs	r3, r3, #4
 8001ffc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001ffe:	4a13      	ldr	r2, [pc, #76]	@ (800204c <DMA_CalcBaseAndBitshift+0x68>)
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	4413      	add	r3, r2
 8002004:	781b      	ldrb	r3, [r3, #0]
 8002006:	461a      	mov	r2, r3
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	2b03      	cmp	r3, #3
 8002010:	d909      	bls.n	8002026 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800201a:	f023 0303 	bic.w	r3, r3, #3
 800201e:	1d1a      	adds	r2, r3, #4
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	659a      	str	r2, [r3, #88]	@ 0x58
 8002024:	e007      	b.n	8002036 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800202e:	f023 0303 	bic.w	r3, r3, #3
 8002032:	687a      	ldr	r2, [r7, #4]
 8002034:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800203a:	4618      	mov	r0, r3
 800203c:	3714      	adds	r7, #20
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
 8002046:	bf00      	nop
 8002048:	aaaaaaab 	.word	0xaaaaaaab
 800204c:	08004934 	.word	0x08004934

08002050 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002050:	b480      	push	{r7}
 8002052:	b085      	sub	sp, #20
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002058:	2300      	movs	r3, #0
 800205a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002060:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	699b      	ldr	r3, [r3, #24]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d11f      	bne.n	80020aa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	2b03      	cmp	r3, #3
 800206e:	d856      	bhi.n	800211e <DMA_CheckFifoParam+0xce>
 8002070:	a201      	add	r2, pc, #4	@ (adr r2, 8002078 <DMA_CheckFifoParam+0x28>)
 8002072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002076:	bf00      	nop
 8002078:	08002089 	.word	0x08002089
 800207c:	0800209b 	.word	0x0800209b
 8002080:	08002089 	.word	0x08002089
 8002084:	0800211f 	.word	0x0800211f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800208c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002090:	2b00      	cmp	r3, #0
 8002092:	d046      	beq.n	8002122 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002098:	e043      	b.n	8002122 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800209e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80020a2:	d140      	bne.n	8002126 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020a8:	e03d      	b.n	8002126 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	699b      	ldr	r3, [r3, #24]
 80020ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80020b2:	d121      	bne.n	80020f8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	2b03      	cmp	r3, #3
 80020b8:	d837      	bhi.n	800212a <DMA_CheckFifoParam+0xda>
 80020ba:	a201      	add	r2, pc, #4	@ (adr r2, 80020c0 <DMA_CheckFifoParam+0x70>)
 80020bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020c0:	080020d1 	.word	0x080020d1
 80020c4:	080020d7 	.word	0x080020d7
 80020c8:	080020d1 	.word	0x080020d1
 80020cc:	080020e9 	.word	0x080020e9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80020d0:	2301      	movs	r3, #1
 80020d2:	73fb      	strb	r3, [r7, #15]
      break;
 80020d4:	e030      	b.n	8002138 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020da:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d025      	beq.n	800212e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020e6:	e022      	b.n	800212e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020ec:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80020f0:	d11f      	bne.n	8002132 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80020f6:	e01c      	b.n	8002132 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	d903      	bls.n	8002106 <DMA_CheckFifoParam+0xb6>
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	2b03      	cmp	r3, #3
 8002102:	d003      	beq.n	800210c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002104:	e018      	b.n	8002138 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	73fb      	strb	r3, [r7, #15]
      break;
 800210a:	e015      	b.n	8002138 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002110:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002114:	2b00      	cmp	r3, #0
 8002116:	d00e      	beq.n	8002136 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	73fb      	strb	r3, [r7, #15]
      break;
 800211c:	e00b      	b.n	8002136 <DMA_CheckFifoParam+0xe6>
      break;
 800211e:	bf00      	nop
 8002120:	e00a      	b.n	8002138 <DMA_CheckFifoParam+0xe8>
      break;
 8002122:	bf00      	nop
 8002124:	e008      	b.n	8002138 <DMA_CheckFifoParam+0xe8>
      break;
 8002126:	bf00      	nop
 8002128:	e006      	b.n	8002138 <DMA_CheckFifoParam+0xe8>
      break;
 800212a:	bf00      	nop
 800212c:	e004      	b.n	8002138 <DMA_CheckFifoParam+0xe8>
      break;
 800212e:	bf00      	nop
 8002130:	e002      	b.n	8002138 <DMA_CheckFifoParam+0xe8>
      break;   
 8002132:	bf00      	nop
 8002134:	e000      	b.n	8002138 <DMA_CheckFifoParam+0xe8>
      break;
 8002136:	bf00      	nop
    }
  } 
  
  return status; 
 8002138:	7bfb      	ldrb	r3, [r7, #15]
}
 800213a:	4618      	mov	r0, r3
 800213c:	3714      	adds	r7, #20
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr
 8002146:	bf00      	nop

08002148 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002148:	b480      	push	{r7}
 800214a:	b089      	sub	sp, #36	@ 0x24
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002152:	2300      	movs	r3, #0
 8002154:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002156:	2300      	movs	r3, #0
 8002158:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800215a:	2300      	movs	r3, #0
 800215c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800215e:	2300      	movs	r3, #0
 8002160:	61fb      	str	r3, [r7, #28]
 8002162:	e159      	b.n	8002418 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002164:	2201      	movs	r2, #1
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	fa02 f303 	lsl.w	r3, r2, r3
 800216c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	697a      	ldr	r2, [r7, #20]
 8002174:	4013      	ands	r3, r2
 8002176:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002178:	693a      	ldr	r2, [r7, #16]
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	429a      	cmp	r2, r3
 800217e:	f040 8148 	bne.w	8002412 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	f003 0303 	and.w	r3, r3, #3
 800218a:	2b01      	cmp	r3, #1
 800218c:	d005      	beq.n	800219a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002196:	2b02      	cmp	r3, #2
 8002198:	d130      	bne.n	80021fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021a0:	69fb      	ldr	r3, [r7, #28]
 80021a2:	005b      	lsls	r3, r3, #1
 80021a4:	2203      	movs	r2, #3
 80021a6:	fa02 f303 	lsl.w	r3, r2, r3
 80021aa:	43db      	mvns	r3, r3
 80021ac:	69ba      	ldr	r2, [r7, #24]
 80021ae:	4013      	ands	r3, r2
 80021b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	68da      	ldr	r2, [r3, #12]
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	005b      	lsls	r3, r3, #1
 80021ba:	fa02 f303 	lsl.w	r3, r2, r3
 80021be:	69ba      	ldr	r2, [r7, #24]
 80021c0:	4313      	orrs	r3, r2
 80021c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	69ba      	ldr	r2, [r7, #24]
 80021c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021d0:	2201      	movs	r2, #1
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	fa02 f303 	lsl.w	r3, r2, r3
 80021d8:	43db      	mvns	r3, r3
 80021da:	69ba      	ldr	r2, [r7, #24]
 80021dc:	4013      	ands	r3, r2
 80021de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	091b      	lsrs	r3, r3, #4
 80021e6:	f003 0201 	and.w	r2, r3, #1
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	fa02 f303 	lsl.w	r3, r2, r3
 80021f0:	69ba      	ldr	r2, [r7, #24]
 80021f2:	4313      	orrs	r3, r2
 80021f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	69ba      	ldr	r2, [r7, #24]
 80021fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	f003 0303 	and.w	r3, r3, #3
 8002204:	2b03      	cmp	r3, #3
 8002206:	d017      	beq.n	8002238 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	005b      	lsls	r3, r3, #1
 8002212:	2203      	movs	r2, #3
 8002214:	fa02 f303 	lsl.w	r3, r2, r3
 8002218:	43db      	mvns	r3, r3
 800221a:	69ba      	ldr	r2, [r7, #24]
 800221c:	4013      	ands	r3, r2
 800221e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	689a      	ldr	r2, [r3, #8]
 8002224:	69fb      	ldr	r3, [r7, #28]
 8002226:	005b      	lsls	r3, r3, #1
 8002228:	fa02 f303 	lsl.w	r3, r2, r3
 800222c:	69ba      	ldr	r2, [r7, #24]
 800222e:	4313      	orrs	r3, r2
 8002230:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	69ba      	ldr	r2, [r7, #24]
 8002236:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f003 0303 	and.w	r3, r3, #3
 8002240:	2b02      	cmp	r3, #2
 8002242:	d123      	bne.n	800228c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	08da      	lsrs	r2, r3, #3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	3208      	adds	r2, #8
 800224c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002250:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	f003 0307 	and.w	r3, r3, #7
 8002258:	009b      	lsls	r3, r3, #2
 800225a:	220f      	movs	r2, #15
 800225c:	fa02 f303 	lsl.w	r3, r2, r3
 8002260:	43db      	mvns	r3, r3
 8002262:	69ba      	ldr	r2, [r7, #24]
 8002264:	4013      	ands	r3, r2
 8002266:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	691a      	ldr	r2, [r3, #16]
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	f003 0307 	and.w	r3, r3, #7
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	fa02 f303 	lsl.w	r3, r2, r3
 8002278:	69ba      	ldr	r2, [r7, #24]
 800227a:	4313      	orrs	r3, r2
 800227c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	08da      	lsrs	r2, r3, #3
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	3208      	adds	r2, #8
 8002286:	69b9      	ldr	r1, [r7, #24]
 8002288:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	005b      	lsls	r3, r3, #1
 8002296:	2203      	movs	r2, #3
 8002298:	fa02 f303 	lsl.w	r3, r2, r3
 800229c:	43db      	mvns	r3, r3
 800229e:	69ba      	ldr	r2, [r7, #24]
 80022a0:	4013      	ands	r3, r2
 80022a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f003 0203 	and.w	r2, r3, #3
 80022ac:	69fb      	ldr	r3, [r7, #28]
 80022ae:	005b      	lsls	r3, r3, #1
 80022b0:	fa02 f303 	lsl.w	r3, r2, r3
 80022b4:	69ba      	ldr	r2, [r7, #24]
 80022b6:	4313      	orrs	r3, r2
 80022b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	69ba      	ldr	r2, [r7, #24]
 80022be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	f000 80a2 	beq.w	8002412 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022ce:	2300      	movs	r3, #0
 80022d0:	60fb      	str	r3, [r7, #12]
 80022d2:	4b57      	ldr	r3, [pc, #348]	@ (8002430 <HAL_GPIO_Init+0x2e8>)
 80022d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022d6:	4a56      	ldr	r2, [pc, #344]	@ (8002430 <HAL_GPIO_Init+0x2e8>)
 80022d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80022dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80022de:	4b54      	ldr	r3, [pc, #336]	@ (8002430 <HAL_GPIO_Init+0x2e8>)
 80022e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022e6:	60fb      	str	r3, [r7, #12]
 80022e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022ea:	4a52      	ldr	r2, [pc, #328]	@ (8002434 <HAL_GPIO_Init+0x2ec>)
 80022ec:	69fb      	ldr	r3, [r7, #28]
 80022ee:	089b      	lsrs	r3, r3, #2
 80022f0:	3302      	adds	r3, #2
 80022f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	f003 0303 	and.w	r3, r3, #3
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	220f      	movs	r2, #15
 8002302:	fa02 f303 	lsl.w	r3, r2, r3
 8002306:	43db      	mvns	r3, r3
 8002308:	69ba      	ldr	r2, [r7, #24]
 800230a:	4013      	ands	r3, r2
 800230c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4a49      	ldr	r2, [pc, #292]	@ (8002438 <HAL_GPIO_Init+0x2f0>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d019      	beq.n	800234a <HAL_GPIO_Init+0x202>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4a48      	ldr	r2, [pc, #288]	@ (800243c <HAL_GPIO_Init+0x2f4>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d013      	beq.n	8002346 <HAL_GPIO_Init+0x1fe>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4a47      	ldr	r2, [pc, #284]	@ (8002440 <HAL_GPIO_Init+0x2f8>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d00d      	beq.n	8002342 <HAL_GPIO_Init+0x1fa>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	4a46      	ldr	r2, [pc, #280]	@ (8002444 <HAL_GPIO_Init+0x2fc>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d007      	beq.n	800233e <HAL_GPIO_Init+0x1f6>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4a45      	ldr	r2, [pc, #276]	@ (8002448 <HAL_GPIO_Init+0x300>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d101      	bne.n	800233a <HAL_GPIO_Init+0x1f2>
 8002336:	2304      	movs	r3, #4
 8002338:	e008      	b.n	800234c <HAL_GPIO_Init+0x204>
 800233a:	2307      	movs	r3, #7
 800233c:	e006      	b.n	800234c <HAL_GPIO_Init+0x204>
 800233e:	2303      	movs	r3, #3
 8002340:	e004      	b.n	800234c <HAL_GPIO_Init+0x204>
 8002342:	2302      	movs	r3, #2
 8002344:	e002      	b.n	800234c <HAL_GPIO_Init+0x204>
 8002346:	2301      	movs	r3, #1
 8002348:	e000      	b.n	800234c <HAL_GPIO_Init+0x204>
 800234a:	2300      	movs	r3, #0
 800234c:	69fa      	ldr	r2, [r7, #28]
 800234e:	f002 0203 	and.w	r2, r2, #3
 8002352:	0092      	lsls	r2, r2, #2
 8002354:	4093      	lsls	r3, r2
 8002356:	69ba      	ldr	r2, [r7, #24]
 8002358:	4313      	orrs	r3, r2
 800235a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800235c:	4935      	ldr	r1, [pc, #212]	@ (8002434 <HAL_GPIO_Init+0x2ec>)
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	089b      	lsrs	r3, r3, #2
 8002362:	3302      	adds	r3, #2
 8002364:	69ba      	ldr	r2, [r7, #24]
 8002366:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800236a:	4b38      	ldr	r3, [pc, #224]	@ (800244c <HAL_GPIO_Init+0x304>)
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	43db      	mvns	r3, r3
 8002374:	69ba      	ldr	r2, [r7, #24]
 8002376:	4013      	ands	r3, r2
 8002378:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002382:	2b00      	cmp	r3, #0
 8002384:	d003      	beq.n	800238e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002386:	69ba      	ldr	r2, [r7, #24]
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	4313      	orrs	r3, r2
 800238c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800238e:	4a2f      	ldr	r2, [pc, #188]	@ (800244c <HAL_GPIO_Init+0x304>)
 8002390:	69bb      	ldr	r3, [r7, #24]
 8002392:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002394:	4b2d      	ldr	r3, [pc, #180]	@ (800244c <HAL_GPIO_Init+0x304>)
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	43db      	mvns	r3, r3
 800239e:	69ba      	ldr	r2, [r7, #24]
 80023a0:	4013      	ands	r3, r2
 80023a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d003      	beq.n	80023b8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80023b0:	69ba      	ldr	r2, [r7, #24]
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	4313      	orrs	r3, r2
 80023b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80023b8:	4a24      	ldr	r2, [pc, #144]	@ (800244c <HAL_GPIO_Init+0x304>)
 80023ba:	69bb      	ldr	r3, [r7, #24]
 80023bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80023be:	4b23      	ldr	r3, [pc, #140]	@ (800244c <HAL_GPIO_Init+0x304>)
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	43db      	mvns	r3, r3
 80023c8:	69ba      	ldr	r2, [r7, #24]
 80023ca:	4013      	ands	r3, r2
 80023cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d003      	beq.n	80023e2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80023da:	69ba      	ldr	r2, [r7, #24]
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	4313      	orrs	r3, r2
 80023e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80023e2:	4a1a      	ldr	r2, [pc, #104]	@ (800244c <HAL_GPIO_Init+0x304>)
 80023e4:	69bb      	ldr	r3, [r7, #24]
 80023e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023e8:	4b18      	ldr	r3, [pc, #96]	@ (800244c <HAL_GPIO_Init+0x304>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	43db      	mvns	r3, r3
 80023f2:	69ba      	ldr	r2, [r7, #24]
 80023f4:	4013      	ands	r3, r2
 80023f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002400:	2b00      	cmp	r3, #0
 8002402:	d003      	beq.n	800240c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002404:	69ba      	ldr	r2, [r7, #24]
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	4313      	orrs	r3, r2
 800240a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800240c:	4a0f      	ldr	r2, [pc, #60]	@ (800244c <HAL_GPIO_Init+0x304>)
 800240e:	69bb      	ldr	r3, [r7, #24]
 8002410:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	3301      	adds	r3, #1
 8002416:	61fb      	str	r3, [r7, #28]
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	2b0f      	cmp	r3, #15
 800241c:	f67f aea2 	bls.w	8002164 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002420:	bf00      	nop
 8002422:	bf00      	nop
 8002424:	3724      	adds	r7, #36	@ 0x24
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr
 800242e:	bf00      	nop
 8002430:	40023800 	.word	0x40023800
 8002434:	40013800 	.word	0x40013800
 8002438:	40020000 	.word	0x40020000
 800243c:	40020400 	.word	0x40020400
 8002440:	40020800 	.word	0x40020800
 8002444:	40020c00 	.word	0x40020c00
 8002448:	40021000 	.word	0x40021000
 800244c:	40013c00 	.word	0x40013c00

08002450 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002450:	b480      	push	{r7}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	460b      	mov	r3, r1
 800245a:	807b      	strh	r3, [r7, #2]
 800245c:	4613      	mov	r3, r2
 800245e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002460:	787b      	ldrb	r3, [r7, #1]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d003      	beq.n	800246e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002466:	887a      	ldrh	r2, [r7, #2]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800246c:	e003      	b.n	8002476 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800246e:	887b      	ldrh	r3, [r7, #2]
 8002470:	041a      	lsls	r2, r3, #16
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	619a      	str	r2, [r3, #24]
}
 8002476:	bf00      	nop
 8002478:	370c      	adds	r7, #12
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr
	...

08002484 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b086      	sub	sp, #24
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d101      	bne.n	8002496 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e267      	b.n	8002966 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 0301 	and.w	r3, r3, #1
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d075      	beq.n	800258e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80024a2:	4b88      	ldr	r3, [pc, #544]	@ (80026c4 <HAL_RCC_OscConfig+0x240>)
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	f003 030c 	and.w	r3, r3, #12
 80024aa:	2b04      	cmp	r3, #4
 80024ac:	d00c      	beq.n	80024c8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024ae:	4b85      	ldr	r3, [pc, #532]	@ (80026c4 <HAL_RCC_OscConfig+0x240>)
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80024b6:	2b08      	cmp	r3, #8
 80024b8:	d112      	bne.n	80024e0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024ba:	4b82      	ldr	r3, [pc, #520]	@ (80026c4 <HAL_RCC_OscConfig+0x240>)
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024c2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80024c6:	d10b      	bne.n	80024e0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024c8:	4b7e      	ldr	r3, [pc, #504]	@ (80026c4 <HAL_RCC_OscConfig+0x240>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d05b      	beq.n	800258c <HAL_RCC_OscConfig+0x108>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d157      	bne.n	800258c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e242      	b.n	8002966 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024e8:	d106      	bne.n	80024f8 <HAL_RCC_OscConfig+0x74>
 80024ea:	4b76      	ldr	r3, [pc, #472]	@ (80026c4 <HAL_RCC_OscConfig+0x240>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a75      	ldr	r2, [pc, #468]	@ (80026c4 <HAL_RCC_OscConfig+0x240>)
 80024f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024f4:	6013      	str	r3, [r2, #0]
 80024f6:	e01d      	b.n	8002534 <HAL_RCC_OscConfig+0xb0>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002500:	d10c      	bne.n	800251c <HAL_RCC_OscConfig+0x98>
 8002502:	4b70      	ldr	r3, [pc, #448]	@ (80026c4 <HAL_RCC_OscConfig+0x240>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a6f      	ldr	r2, [pc, #444]	@ (80026c4 <HAL_RCC_OscConfig+0x240>)
 8002508:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800250c:	6013      	str	r3, [r2, #0]
 800250e:	4b6d      	ldr	r3, [pc, #436]	@ (80026c4 <HAL_RCC_OscConfig+0x240>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a6c      	ldr	r2, [pc, #432]	@ (80026c4 <HAL_RCC_OscConfig+0x240>)
 8002514:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002518:	6013      	str	r3, [r2, #0]
 800251a:	e00b      	b.n	8002534 <HAL_RCC_OscConfig+0xb0>
 800251c:	4b69      	ldr	r3, [pc, #420]	@ (80026c4 <HAL_RCC_OscConfig+0x240>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a68      	ldr	r2, [pc, #416]	@ (80026c4 <HAL_RCC_OscConfig+0x240>)
 8002522:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002526:	6013      	str	r3, [r2, #0]
 8002528:	4b66      	ldr	r3, [pc, #408]	@ (80026c4 <HAL_RCC_OscConfig+0x240>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a65      	ldr	r2, [pc, #404]	@ (80026c4 <HAL_RCC_OscConfig+0x240>)
 800252e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002532:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d013      	beq.n	8002564 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800253c:	f7fe fe72 	bl	8001224 <HAL_GetTick>
 8002540:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002542:	e008      	b.n	8002556 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002544:	f7fe fe6e 	bl	8001224 <HAL_GetTick>
 8002548:	4602      	mov	r2, r0
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	2b64      	cmp	r3, #100	@ 0x64
 8002550:	d901      	bls.n	8002556 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002552:	2303      	movs	r3, #3
 8002554:	e207      	b.n	8002966 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002556:	4b5b      	ldr	r3, [pc, #364]	@ (80026c4 <HAL_RCC_OscConfig+0x240>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d0f0      	beq.n	8002544 <HAL_RCC_OscConfig+0xc0>
 8002562:	e014      	b.n	800258e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002564:	f7fe fe5e 	bl	8001224 <HAL_GetTick>
 8002568:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800256a:	e008      	b.n	800257e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800256c:	f7fe fe5a 	bl	8001224 <HAL_GetTick>
 8002570:	4602      	mov	r2, r0
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	2b64      	cmp	r3, #100	@ 0x64
 8002578:	d901      	bls.n	800257e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800257a:	2303      	movs	r3, #3
 800257c:	e1f3      	b.n	8002966 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800257e:	4b51      	ldr	r3, [pc, #324]	@ (80026c4 <HAL_RCC_OscConfig+0x240>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d1f0      	bne.n	800256c <HAL_RCC_OscConfig+0xe8>
 800258a:	e000      	b.n	800258e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800258c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 0302 	and.w	r3, r3, #2
 8002596:	2b00      	cmp	r3, #0
 8002598:	d063      	beq.n	8002662 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800259a:	4b4a      	ldr	r3, [pc, #296]	@ (80026c4 <HAL_RCC_OscConfig+0x240>)
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	f003 030c 	and.w	r3, r3, #12
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d00b      	beq.n	80025be <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025a6:	4b47      	ldr	r3, [pc, #284]	@ (80026c4 <HAL_RCC_OscConfig+0x240>)
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80025ae:	2b08      	cmp	r3, #8
 80025b0:	d11c      	bne.n	80025ec <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025b2:	4b44      	ldr	r3, [pc, #272]	@ (80026c4 <HAL_RCC_OscConfig+0x240>)
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d116      	bne.n	80025ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025be:	4b41      	ldr	r3, [pc, #260]	@ (80026c4 <HAL_RCC_OscConfig+0x240>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0302 	and.w	r3, r3, #2
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d005      	beq.n	80025d6 <HAL_RCC_OscConfig+0x152>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	68db      	ldr	r3, [r3, #12]
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d001      	beq.n	80025d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e1c7      	b.n	8002966 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025d6:	4b3b      	ldr	r3, [pc, #236]	@ (80026c4 <HAL_RCC_OscConfig+0x240>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	691b      	ldr	r3, [r3, #16]
 80025e2:	00db      	lsls	r3, r3, #3
 80025e4:	4937      	ldr	r1, [pc, #220]	@ (80026c4 <HAL_RCC_OscConfig+0x240>)
 80025e6:	4313      	orrs	r3, r2
 80025e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025ea:	e03a      	b.n	8002662 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d020      	beq.n	8002636 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025f4:	4b34      	ldr	r3, [pc, #208]	@ (80026c8 <HAL_RCC_OscConfig+0x244>)
 80025f6:	2201      	movs	r2, #1
 80025f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025fa:	f7fe fe13 	bl	8001224 <HAL_GetTick>
 80025fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002600:	e008      	b.n	8002614 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002602:	f7fe fe0f 	bl	8001224 <HAL_GetTick>
 8002606:	4602      	mov	r2, r0
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	1ad3      	subs	r3, r2, r3
 800260c:	2b02      	cmp	r3, #2
 800260e:	d901      	bls.n	8002614 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002610:	2303      	movs	r3, #3
 8002612:	e1a8      	b.n	8002966 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002614:	4b2b      	ldr	r3, [pc, #172]	@ (80026c4 <HAL_RCC_OscConfig+0x240>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 0302 	and.w	r3, r3, #2
 800261c:	2b00      	cmp	r3, #0
 800261e:	d0f0      	beq.n	8002602 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002620:	4b28      	ldr	r3, [pc, #160]	@ (80026c4 <HAL_RCC_OscConfig+0x240>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	691b      	ldr	r3, [r3, #16]
 800262c:	00db      	lsls	r3, r3, #3
 800262e:	4925      	ldr	r1, [pc, #148]	@ (80026c4 <HAL_RCC_OscConfig+0x240>)
 8002630:	4313      	orrs	r3, r2
 8002632:	600b      	str	r3, [r1, #0]
 8002634:	e015      	b.n	8002662 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002636:	4b24      	ldr	r3, [pc, #144]	@ (80026c8 <HAL_RCC_OscConfig+0x244>)
 8002638:	2200      	movs	r2, #0
 800263a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800263c:	f7fe fdf2 	bl	8001224 <HAL_GetTick>
 8002640:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002642:	e008      	b.n	8002656 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002644:	f7fe fdee 	bl	8001224 <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	2b02      	cmp	r3, #2
 8002650:	d901      	bls.n	8002656 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e187      	b.n	8002966 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002656:	4b1b      	ldr	r3, [pc, #108]	@ (80026c4 <HAL_RCC_OscConfig+0x240>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0302 	and.w	r3, r3, #2
 800265e:	2b00      	cmp	r3, #0
 8002660:	d1f0      	bne.n	8002644 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0308 	and.w	r3, r3, #8
 800266a:	2b00      	cmp	r3, #0
 800266c:	d036      	beq.n	80026dc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	695b      	ldr	r3, [r3, #20]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d016      	beq.n	80026a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002676:	4b15      	ldr	r3, [pc, #84]	@ (80026cc <HAL_RCC_OscConfig+0x248>)
 8002678:	2201      	movs	r2, #1
 800267a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800267c:	f7fe fdd2 	bl	8001224 <HAL_GetTick>
 8002680:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002682:	e008      	b.n	8002696 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002684:	f7fe fdce 	bl	8001224 <HAL_GetTick>
 8002688:	4602      	mov	r2, r0
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	2b02      	cmp	r3, #2
 8002690:	d901      	bls.n	8002696 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002692:	2303      	movs	r3, #3
 8002694:	e167      	b.n	8002966 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002696:	4b0b      	ldr	r3, [pc, #44]	@ (80026c4 <HAL_RCC_OscConfig+0x240>)
 8002698:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800269a:	f003 0302 	and.w	r3, r3, #2
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d0f0      	beq.n	8002684 <HAL_RCC_OscConfig+0x200>
 80026a2:	e01b      	b.n	80026dc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026a4:	4b09      	ldr	r3, [pc, #36]	@ (80026cc <HAL_RCC_OscConfig+0x248>)
 80026a6:	2200      	movs	r2, #0
 80026a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026aa:	f7fe fdbb 	bl	8001224 <HAL_GetTick>
 80026ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026b0:	e00e      	b.n	80026d0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026b2:	f7fe fdb7 	bl	8001224 <HAL_GetTick>
 80026b6:	4602      	mov	r2, r0
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	1ad3      	subs	r3, r2, r3
 80026bc:	2b02      	cmp	r3, #2
 80026be:	d907      	bls.n	80026d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80026c0:	2303      	movs	r3, #3
 80026c2:	e150      	b.n	8002966 <HAL_RCC_OscConfig+0x4e2>
 80026c4:	40023800 	.word	0x40023800
 80026c8:	42470000 	.word	0x42470000
 80026cc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026d0:	4b88      	ldr	r3, [pc, #544]	@ (80028f4 <HAL_RCC_OscConfig+0x470>)
 80026d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026d4:	f003 0302 	and.w	r3, r3, #2
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d1ea      	bne.n	80026b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f003 0304 	and.w	r3, r3, #4
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	f000 8097 	beq.w	8002818 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026ea:	2300      	movs	r3, #0
 80026ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026ee:	4b81      	ldr	r3, [pc, #516]	@ (80028f4 <HAL_RCC_OscConfig+0x470>)
 80026f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d10f      	bne.n	800271a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026fa:	2300      	movs	r3, #0
 80026fc:	60bb      	str	r3, [r7, #8]
 80026fe:	4b7d      	ldr	r3, [pc, #500]	@ (80028f4 <HAL_RCC_OscConfig+0x470>)
 8002700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002702:	4a7c      	ldr	r2, [pc, #496]	@ (80028f4 <HAL_RCC_OscConfig+0x470>)
 8002704:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002708:	6413      	str	r3, [r2, #64]	@ 0x40
 800270a:	4b7a      	ldr	r3, [pc, #488]	@ (80028f4 <HAL_RCC_OscConfig+0x470>)
 800270c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800270e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002712:	60bb      	str	r3, [r7, #8]
 8002714:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002716:	2301      	movs	r3, #1
 8002718:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800271a:	4b77      	ldr	r3, [pc, #476]	@ (80028f8 <HAL_RCC_OscConfig+0x474>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002722:	2b00      	cmp	r3, #0
 8002724:	d118      	bne.n	8002758 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002726:	4b74      	ldr	r3, [pc, #464]	@ (80028f8 <HAL_RCC_OscConfig+0x474>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a73      	ldr	r2, [pc, #460]	@ (80028f8 <HAL_RCC_OscConfig+0x474>)
 800272c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002730:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002732:	f7fe fd77 	bl	8001224 <HAL_GetTick>
 8002736:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002738:	e008      	b.n	800274c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800273a:	f7fe fd73 	bl	8001224 <HAL_GetTick>
 800273e:	4602      	mov	r2, r0
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	1ad3      	subs	r3, r2, r3
 8002744:	2b02      	cmp	r3, #2
 8002746:	d901      	bls.n	800274c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002748:	2303      	movs	r3, #3
 800274a:	e10c      	b.n	8002966 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800274c:	4b6a      	ldr	r3, [pc, #424]	@ (80028f8 <HAL_RCC_OscConfig+0x474>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002754:	2b00      	cmp	r3, #0
 8002756:	d0f0      	beq.n	800273a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	2b01      	cmp	r3, #1
 800275e:	d106      	bne.n	800276e <HAL_RCC_OscConfig+0x2ea>
 8002760:	4b64      	ldr	r3, [pc, #400]	@ (80028f4 <HAL_RCC_OscConfig+0x470>)
 8002762:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002764:	4a63      	ldr	r2, [pc, #396]	@ (80028f4 <HAL_RCC_OscConfig+0x470>)
 8002766:	f043 0301 	orr.w	r3, r3, #1
 800276a:	6713      	str	r3, [r2, #112]	@ 0x70
 800276c:	e01c      	b.n	80027a8 <HAL_RCC_OscConfig+0x324>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	2b05      	cmp	r3, #5
 8002774:	d10c      	bne.n	8002790 <HAL_RCC_OscConfig+0x30c>
 8002776:	4b5f      	ldr	r3, [pc, #380]	@ (80028f4 <HAL_RCC_OscConfig+0x470>)
 8002778:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800277a:	4a5e      	ldr	r2, [pc, #376]	@ (80028f4 <HAL_RCC_OscConfig+0x470>)
 800277c:	f043 0304 	orr.w	r3, r3, #4
 8002780:	6713      	str	r3, [r2, #112]	@ 0x70
 8002782:	4b5c      	ldr	r3, [pc, #368]	@ (80028f4 <HAL_RCC_OscConfig+0x470>)
 8002784:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002786:	4a5b      	ldr	r2, [pc, #364]	@ (80028f4 <HAL_RCC_OscConfig+0x470>)
 8002788:	f043 0301 	orr.w	r3, r3, #1
 800278c:	6713      	str	r3, [r2, #112]	@ 0x70
 800278e:	e00b      	b.n	80027a8 <HAL_RCC_OscConfig+0x324>
 8002790:	4b58      	ldr	r3, [pc, #352]	@ (80028f4 <HAL_RCC_OscConfig+0x470>)
 8002792:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002794:	4a57      	ldr	r2, [pc, #348]	@ (80028f4 <HAL_RCC_OscConfig+0x470>)
 8002796:	f023 0301 	bic.w	r3, r3, #1
 800279a:	6713      	str	r3, [r2, #112]	@ 0x70
 800279c:	4b55      	ldr	r3, [pc, #340]	@ (80028f4 <HAL_RCC_OscConfig+0x470>)
 800279e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027a0:	4a54      	ldr	r2, [pc, #336]	@ (80028f4 <HAL_RCC_OscConfig+0x470>)
 80027a2:	f023 0304 	bic.w	r3, r3, #4
 80027a6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d015      	beq.n	80027dc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027b0:	f7fe fd38 	bl	8001224 <HAL_GetTick>
 80027b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027b6:	e00a      	b.n	80027ce <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027b8:	f7fe fd34 	bl	8001224 <HAL_GetTick>
 80027bc:	4602      	mov	r2, r0
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d901      	bls.n	80027ce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80027ca:	2303      	movs	r3, #3
 80027cc:	e0cb      	b.n	8002966 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027ce:	4b49      	ldr	r3, [pc, #292]	@ (80028f4 <HAL_RCC_OscConfig+0x470>)
 80027d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027d2:	f003 0302 	and.w	r3, r3, #2
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d0ee      	beq.n	80027b8 <HAL_RCC_OscConfig+0x334>
 80027da:	e014      	b.n	8002806 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027dc:	f7fe fd22 	bl	8001224 <HAL_GetTick>
 80027e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027e2:	e00a      	b.n	80027fa <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027e4:	f7fe fd1e 	bl	8001224 <HAL_GetTick>
 80027e8:	4602      	mov	r2, r0
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d901      	bls.n	80027fa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	e0b5      	b.n	8002966 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027fa:	4b3e      	ldr	r3, [pc, #248]	@ (80028f4 <HAL_RCC_OscConfig+0x470>)
 80027fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027fe:	f003 0302 	and.w	r3, r3, #2
 8002802:	2b00      	cmp	r3, #0
 8002804:	d1ee      	bne.n	80027e4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002806:	7dfb      	ldrb	r3, [r7, #23]
 8002808:	2b01      	cmp	r3, #1
 800280a:	d105      	bne.n	8002818 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800280c:	4b39      	ldr	r3, [pc, #228]	@ (80028f4 <HAL_RCC_OscConfig+0x470>)
 800280e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002810:	4a38      	ldr	r2, [pc, #224]	@ (80028f4 <HAL_RCC_OscConfig+0x470>)
 8002812:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002816:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	699b      	ldr	r3, [r3, #24]
 800281c:	2b00      	cmp	r3, #0
 800281e:	f000 80a1 	beq.w	8002964 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002822:	4b34      	ldr	r3, [pc, #208]	@ (80028f4 <HAL_RCC_OscConfig+0x470>)
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	f003 030c 	and.w	r3, r3, #12
 800282a:	2b08      	cmp	r3, #8
 800282c:	d05c      	beq.n	80028e8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	699b      	ldr	r3, [r3, #24]
 8002832:	2b02      	cmp	r3, #2
 8002834:	d141      	bne.n	80028ba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002836:	4b31      	ldr	r3, [pc, #196]	@ (80028fc <HAL_RCC_OscConfig+0x478>)
 8002838:	2200      	movs	r2, #0
 800283a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800283c:	f7fe fcf2 	bl	8001224 <HAL_GetTick>
 8002840:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002842:	e008      	b.n	8002856 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002844:	f7fe fcee 	bl	8001224 <HAL_GetTick>
 8002848:	4602      	mov	r2, r0
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	2b02      	cmp	r3, #2
 8002850:	d901      	bls.n	8002856 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e087      	b.n	8002966 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002856:	4b27      	ldr	r3, [pc, #156]	@ (80028f4 <HAL_RCC_OscConfig+0x470>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d1f0      	bne.n	8002844 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	69da      	ldr	r2, [r3, #28]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6a1b      	ldr	r3, [r3, #32]
 800286a:	431a      	orrs	r2, r3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002870:	019b      	lsls	r3, r3, #6
 8002872:	431a      	orrs	r2, r3
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002878:	085b      	lsrs	r3, r3, #1
 800287a:	3b01      	subs	r3, #1
 800287c:	041b      	lsls	r3, r3, #16
 800287e:	431a      	orrs	r2, r3
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002884:	061b      	lsls	r3, r3, #24
 8002886:	491b      	ldr	r1, [pc, #108]	@ (80028f4 <HAL_RCC_OscConfig+0x470>)
 8002888:	4313      	orrs	r3, r2
 800288a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800288c:	4b1b      	ldr	r3, [pc, #108]	@ (80028fc <HAL_RCC_OscConfig+0x478>)
 800288e:	2201      	movs	r2, #1
 8002890:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002892:	f7fe fcc7 	bl	8001224 <HAL_GetTick>
 8002896:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002898:	e008      	b.n	80028ac <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800289a:	f7fe fcc3 	bl	8001224 <HAL_GetTick>
 800289e:	4602      	mov	r2, r0
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	1ad3      	subs	r3, r2, r3
 80028a4:	2b02      	cmp	r3, #2
 80028a6:	d901      	bls.n	80028ac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80028a8:	2303      	movs	r3, #3
 80028aa:	e05c      	b.n	8002966 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028ac:	4b11      	ldr	r3, [pc, #68]	@ (80028f4 <HAL_RCC_OscConfig+0x470>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d0f0      	beq.n	800289a <HAL_RCC_OscConfig+0x416>
 80028b8:	e054      	b.n	8002964 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028ba:	4b10      	ldr	r3, [pc, #64]	@ (80028fc <HAL_RCC_OscConfig+0x478>)
 80028bc:	2200      	movs	r2, #0
 80028be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028c0:	f7fe fcb0 	bl	8001224 <HAL_GetTick>
 80028c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028c6:	e008      	b.n	80028da <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028c8:	f7fe fcac 	bl	8001224 <HAL_GetTick>
 80028cc:	4602      	mov	r2, r0
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	2b02      	cmp	r3, #2
 80028d4:	d901      	bls.n	80028da <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80028d6:	2303      	movs	r3, #3
 80028d8:	e045      	b.n	8002966 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028da:	4b06      	ldr	r3, [pc, #24]	@ (80028f4 <HAL_RCC_OscConfig+0x470>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d1f0      	bne.n	80028c8 <HAL_RCC_OscConfig+0x444>
 80028e6:	e03d      	b.n	8002964 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	699b      	ldr	r3, [r3, #24]
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d107      	bne.n	8002900 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	e038      	b.n	8002966 <HAL_RCC_OscConfig+0x4e2>
 80028f4:	40023800 	.word	0x40023800
 80028f8:	40007000 	.word	0x40007000
 80028fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002900:	4b1b      	ldr	r3, [pc, #108]	@ (8002970 <HAL_RCC_OscConfig+0x4ec>)
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	699b      	ldr	r3, [r3, #24]
 800290a:	2b01      	cmp	r3, #1
 800290c:	d028      	beq.n	8002960 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002918:	429a      	cmp	r2, r3
 800291a:	d121      	bne.n	8002960 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002926:	429a      	cmp	r2, r3
 8002928:	d11a      	bne.n	8002960 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800292a:	68fa      	ldr	r2, [r7, #12]
 800292c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002930:	4013      	ands	r3, r2
 8002932:	687a      	ldr	r2, [r7, #4]
 8002934:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002936:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002938:	4293      	cmp	r3, r2
 800293a:	d111      	bne.n	8002960 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002946:	085b      	lsrs	r3, r3, #1
 8002948:	3b01      	subs	r3, #1
 800294a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800294c:	429a      	cmp	r2, r3
 800294e:	d107      	bne.n	8002960 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800295a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800295c:	429a      	cmp	r2, r3
 800295e:	d001      	beq.n	8002964 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e000      	b.n	8002966 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002964:	2300      	movs	r3, #0
}
 8002966:	4618      	mov	r0, r3
 8002968:	3718      	adds	r7, #24
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	40023800 	.word	0x40023800

08002974 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b084      	sub	sp, #16
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
 800297c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d101      	bne.n	8002988 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	e0cc      	b.n	8002b22 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002988:	4b68      	ldr	r3, [pc, #416]	@ (8002b2c <HAL_RCC_ClockConfig+0x1b8>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 0307 	and.w	r3, r3, #7
 8002990:	683a      	ldr	r2, [r7, #0]
 8002992:	429a      	cmp	r2, r3
 8002994:	d90c      	bls.n	80029b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002996:	4b65      	ldr	r3, [pc, #404]	@ (8002b2c <HAL_RCC_ClockConfig+0x1b8>)
 8002998:	683a      	ldr	r2, [r7, #0]
 800299a:	b2d2      	uxtb	r2, r2
 800299c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800299e:	4b63      	ldr	r3, [pc, #396]	@ (8002b2c <HAL_RCC_ClockConfig+0x1b8>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 0307 	and.w	r3, r3, #7
 80029a6:	683a      	ldr	r2, [r7, #0]
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d001      	beq.n	80029b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e0b8      	b.n	8002b22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 0302 	and.w	r3, r3, #2
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d020      	beq.n	80029fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 0304 	and.w	r3, r3, #4
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d005      	beq.n	80029d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029c8:	4b59      	ldr	r3, [pc, #356]	@ (8002b30 <HAL_RCC_ClockConfig+0x1bc>)
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	4a58      	ldr	r2, [pc, #352]	@ (8002b30 <HAL_RCC_ClockConfig+0x1bc>)
 80029ce:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80029d2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 0308 	and.w	r3, r3, #8
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d005      	beq.n	80029ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029e0:	4b53      	ldr	r3, [pc, #332]	@ (8002b30 <HAL_RCC_ClockConfig+0x1bc>)
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	4a52      	ldr	r2, [pc, #328]	@ (8002b30 <HAL_RCC_ClockConfig+0x1bc>)
 80029e6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80029ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029ec:	4b50      	ldr	r3, [pc, #320]	@ (8002b30 <HAL_RCC_ClockConfig+0x1bc>)
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	494d      	ldr	r1, [pc, #308]	@ (8002b30 <HAL_RCC_ClockConfig+0x1bc>)
 80029fa:	4313      	orrs	r3, r2
 80029fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 0301 	and.w	r3, r3, #1
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d044      	beq.n	8002a94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d107      	bne.n	8002a22 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a12:	4b47      	ldr	r3, [pc, #284]	@ (8002b30 <HAL_RCC_ClockConfig+0x1bc>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d119      	bne.n	8002a52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e07f      	b.n	8002b22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	2b02      	cmp	r3, #2
 8002a28:	d003      	beq.n	8002a32 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a2e:	2b03      	cmp	r3, #3
 8002a30:	d107      	bne.n	8002a42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a32:	4b3f      	ldr	r3, [pc, #252]	@ (8002b30 <HAL_RCC_ClockConfig+0x1bc>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d109      	bne.n	8002a52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e06f      	b.n	8002b22 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a42:	4b3b      	ldr	r3, [pc, #236]	@ (8002b30 <HAL_RCC_ClockConfig+0x1bc>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0302 	and.w	r3, r3, #2
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d101      	bne.n	8002a52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e067      	b.n	8002b22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a52:	4b37      	ldr	r3, [pc, #220]	@ (8002b30 <HAL_RCC_ClockConfig+0x1bc>)
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	f023 0203 	bic.w	r2, r3, #3
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	4934      	ldr	r1, [pc, #208]	@ (8002b30 <HAL_RCC_ClockConfig+0x1bc>)
 8002a60:	4313      	orrs	r3, r2
 8002a62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a64:	f7fe fbde 	bl	8001224 <HAL_GetTick>
 8002a68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a6a:	e00a      	b.n	8002a82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a6c:	f7fe fbda 	bl	8001224 <HAL_GetTick>
 8002a70:	4602      	mov	r2, r0
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d901      	bls.n	8002a82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a7e:	2303      	movs	r3, #3
 8002a80:	e04f      	b.n	8002b22 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a82:	4b2b      	ldr	r3, [pc, #172]	@ (8002b30 <HAL_RCC_ClockConfig+0x1bc>)
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	f003 020c 	and.w	r2, r3, #12
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	429a      	cmp	r2, r3
 8002a92:	d1eb      	bne.n	8002a6c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a94:	4b25      	ldr	r3, [pc, #148]	@ (8002b2c <HAL_RCC_ClockConfig+0x1b8>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 0307 	and.w	r3, r3, #7
 8002a9c:	683a      	ldr	r2, [r7, #0]
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	d20c      	bcs.n	8002abc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aa2:	4b22      	ldr	r3, [pc, #136]	@ (8002b2c <HAL_RCC_ClockConfig+0x1b8>)
 8002aa4:	683a      	ldr	r2, [r7, #0]
 8002aa6:	b2d2      	uxtb	r2, r2
 8002aa8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aaa:	4b20      	ldr	r3, [pc, #128]	@ (8002b2c <HAL_RCC_ClockConfig+0x1b8>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 0307 	and.w	r3, r3, #7
 8002ab2:	683a      	ldr	r2, [r7, #0]
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d001      	beq.n	8002abc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	e032      	b.n	8002b22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 0304 	and.w	r3, r3, #4
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d008      	beq.n	8002ada <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ac8:	4b19      	ldr	r3, [pc, #100]	@ (8002b30 <HAL_RCC_ClockConfig+0x1bc>)
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	4916      	ldr	r1, [pc, #88]	@ (8002b30 <HAL_RCC_ClockConfig+0x1bc>)
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 0308 	and.w	r3, r3, #8
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d009      	beq.n	8002afa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ae6:	4b12      	ldr	r3, [pc, #72]	@ (8002b30 <HAL_RCC_ClockConfig+0x1bc>)
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	691b      	ldr	r3, [r3, #16]
 8002af2:	00db      	lsls	r3, r3, #3
 8002af4:	490e      	ldr	r1, [pc, #56]	@ (8002b30 <HAL_RCC_ClockConfig+0x1bc>)
 8002af6:	4313      	orrs	r3, r2
 8002af8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002afa:	f000 f821 	bl	8002b40 <HAL_RCC_GetSysClockFreq>
 8002afe:	4602      	mov	r2, r0
 8002b00:	4b0b      	ldr	r3, [pc, #44]	@ (8002b30 <HAL_RCC_ClockConfig+0x1bc>)
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	091b      	lsrs	r3, r3, #4
 8002b06:	f003 030f 	and.w	r3, r3, #15
 8002b0a:	490a      	ldr	r1, [pc, #40]	@ (8002b34 <HAL_RCC_ClockConfig+0x1c0>)
 8002b0c:	5ccb      	ldrb	r3, [r1, r3]
 8002b0e:	fa22 f303 	lsr.w	r3, r2, r3
 8002b12:	4a09      	ldr	r2, [pc, #36]	@ (8002b38 <HAL_RCC_ClockConfig+0x1c4>)
 8002b14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002b16:	4b09      	ldr	r3, [pc, #36]	@ (8002b3c <HAL_RCC_ClockConfig+0x1c8>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f7fe fb3e 	bl	800119c <HAL_InitTick>

  return HAL_OK;
 8002b20:	2300      	movs	r3, #0
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	3710      	adds	r7, #16
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	40023c00 	.word	0x40023c00
 8002b30:	40023800 	.word	0x40023800
 8002b34:	0800491c 	.word	0x0800491c
 8002b38:	20000000 	.word	0x20000000
 8002b3c:	20000004 	.word	0x20000004

08002b40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b44:	b094      	sub	sp, #80	@ 0x50
 8002b46:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002b50:	2300      	movs	r3, #0
 8002b52:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002b54:	2300      	movs	r3, #0
 8002b56:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b58:	4b79      	ldr	r3, [pc, #484]	@ (8002d40 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	f003 030c 	and.w	r3, r3, #12
 8002b60:	2b08      	cmp	r3, #8
 8002b62:	d00d      	beq.n	8002b80 <HAL_RCC_GetSysClockFreq+0x40>
 8002b64:	2b08      	cmp	r3, #8
 8002b66:	f200 80e1 	bhi.w	8002d2c <HAL_RCC_GetSysClockFreq+0x1ec>
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d002      	beq.n	8002b74 <HAL_RCC_GetSysClockFreq+0x34>
 8002b6e:	2b04      	cmp	r3, #4
 8002b70:	d003      	beq.n	8002b7a <HAL_RCC_GetSysClockFreq+0x3a>
 8002b72:	e0db      	b.n	8002d2c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b74:	4b73      	ldr	r3, [pc, #460]	@ (8002d44 <HAL_RCC_GetSysClockFreq+0x204>)
 8002b76:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002b78:	e0db      	b.n	8002d32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b7a:	4b73      	ldr	r3, [pc, #460]	@ (8002d48 <HAL_RCC_GetSysClockFreq+0x208>)
 8002b7c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002b7e:	e0d8      	b.n	8002d32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b80:	4b6f      	ldr	r3, [pc, #444]	@ (8002d40 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002b88:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b8a:	4b6d      	ldr	r3, [pc, #436]	@ (8002d40 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d063      	beq.n	8002c5e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b96:	4b6a      	ldr	r3, [pc, #424]	@ (8002d40 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	099b      	lsrs	r3, r3, #6
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002ba0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002ba2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ba4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ba8:	633b      	str	r3, [r7, #48]	@ 0x30
 8002baa:	2300      	movs	r3, #0
 8002bac:	637b      	str	r3, [r7, #52]	@ 0x34
 8002bae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002bb2:	4622      	mov	r2, r4
 8002bb4:	462b      	mov	r3, r5
 8002bb6:	f04f 0000 	mov.w	r0, #0
 8002bba:	f04f 0100 	mov.w	r1, #0
 8002bbe:	0159      	lsls	r1, r3, #5
 8002bc0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002bc4:	0150      	lsls	r0, r2, #5
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	460b      	mov	r3, r1
 8002bca:	4621      	mov	r1, r4
 8002bcc:	1a51      	subs	r1, r2, r1
 8002bce:	6139      	str	r1, [r7, #16]
 8002bd0:	4629      	mov	r1, r5
 8002bd2:	eb63 0301 	sbc.w	r3, r3, r1
 8002bd6:	617b      	str	r3, [r7, #20]
 8002bd8:	f04f 0200 	mov.w	r2, #0
 8002bdc:	f04f 0300 	mov.w	r3, #0
 8002be0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002be4:	4659      	mov	r1, fp
 8002be6:	018b      	lsls	r3, r1, #6
 8002be8:	4651      	mov	r1, sl
 8002bea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002bee:	4651      	mov	r1, sl
 8002bf0:	018a      	lsls	r2, r1, #6
 8002bf2:	4651      	mov	r1, sl
 8002bf4:	ebb2 0801 	subs.w	r8, r2, r1
 8002bf8:	4659      	mov	r1, fp
 8002bfa:	eb63 0901 	sbc.w	r9, r3, r1
 8002bfe:	f04f 0200 	mov.w	r2, #0
 8002c02:	f04f 0300 	mov.w	r3, #0
 8002c06:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c0a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c0e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c12:	4690      	mov	r8, r2
 8002c14:	4699      	mov	r9, r3
 8002c16:	4623      	mov	r3, r4
 8002c18:	eb18 0303 	adds.w	r3, r8, r3
 8002c1c:	60bb      	str	r3, [r7, #8]
 8002c1e:	462b      	mov	r3, r5
 8002c20:	eb49 0303 	adc.w	r3, r9, r3
 8002c24:	60fb      	str	r3, [r7, #12]
 8002c26:	f04f 0200 	mov.w	r2, #0
 8002c2a:	f04f 0300 	mov.w	r3, #0
 8002c2e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002c32:	4629      	mov	r1, r5
 8002c34:	024b      	lsls	r3, r1, #9
 8002c36:	4621      	mov	r1, r4
 8002c38:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002c3c:	4621      	mov	r1, r4
 8002c3e:	024a      	lsls	r2, r1, #9
 8002c40:	4610      	mov	r0, r2
 8002c42:	4619      	mov	r1, r3
 8002c44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c46:	2200      	movs	r2, #0
 8002c48:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002c4a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002c4c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002c50:	f7fd fac2 	bl	80001d8 <__aeabi_uldivmod>
 8002c54:	4602      	mov	r2, r0
 8002c56:	460b      	mov	r3, r1
 8002c58:	4613      	mov	r3, r2
 8002c5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002c5c:	e058      	b.n	8002d10 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c5e:	4b38      	ldr	r3, [pc, #224]	@ (8002d40 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	099b      	lsrs	r3, r3, #6
 8002c64:	2200      	movs	r2, #0
 8002c66:	4618      	mov	r0, r3
 8002c68:	4611      	mov	r1, r2
 8002c6a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002c6e:	623b      	str	r3, [r7, #32]
 8002c70:	2300      	movs	r3, #0
 8002c72:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c74:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002c78:	4642      	mov	r2, r8
 8002c7a:	464b      	mov	r3, r9
 8002c7c:	f04f 0000 	mov.w	r0, #0
 8002c80:	f04f 0100 	mov.w	r1, #0
 8002c84:	0159      	lsls	r1, r3, #5
 8002c86:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c8a:	0150      	lsls	r0, r2, #5
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	460b      	mov	r3, r1
 8002c90:	4641      	mov	r1, r8
 8002c92:	ebb2 0a01 	subs.w	sl, r2, r1
 8002c96:	4649      	mov	r1, r9
 8002c98:	eb63 0b01 	sbc.w	fp, r3, r1
 8002c9c:	f04f 0200 	mov.w	r2, #0
 8002ca0:	f04f 0300 	mov.w	r3, #0
 8002ca4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002ca8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002cac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002cb0:	ebb2 040a 	subs.w	r4, r2, sl
 8002cb4:	eb63 050b 	sbc.w	r5, r3, fp
 8002cb8:	f04f 0200 	mov.w	r2, #0
 8002cbc:	f04f 0300 	mov.w	r3, #0
 8002cc0:	00eb      	lsls	r3, r5, #3
 8002cc2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002cc6:	00e2      	lsls	r2, r4, #3
 8002cc8:	4614      	mov	r4, r2
 8002cca:	461d      	mov	r5, r3
 8002ccc:	4643      	mov	r3, r8
 8002cce:	18e3      	adds	r3, r4, r3
 8002cd0:	603b      	str	r3, [r7, #0]
 8002cd2:	464b      	mov	r3, r9
 8002cd4:	eb45 0303 	adc.w	r3, r5, r3
 8002cd8:	607b      	str	r3, [r7, #4]
 8002cda:	f04f 0200 	mov.w	r2, #0
 8002cde:	f04f 0300 	mov.w	r3, #0
 8002ce2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002ce6:	4629      	mov	r1, r5
 8002ce8:	028b      	lsls	r3, r1, #10
 8002cea:	4621      	mov	r1, r4
 8002cec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002cf0:	4621      	mov	r1, r4
 8002cf2:	028a      	lsls	r2, r1, #10
 8002cf4:	4610      	mov	r0, r2
 8002cf6:	4619      	mov	r1, r3
 8002cf8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	61bb      	str	r3, [r7, #24]
 8002cfe:	61fa      	str	r2, [r7, #28]
 8002d00:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d04:	f7fd fa68 	bl	80001d8 <__aeabi_uldivmod>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	460b      	mov	r3, r1
 8002d0c:	4613      	mov	r3, r2
 8002d0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002d10:	4b0b      	ldr	r3, [pc, #44]	@ (8002d40 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	0c1b      	lsrs	r3, r3, #16
 8002d16:	f003 0303 	and.w	r3, r3, #3
 8002d1a:	3301      	adds	r3, #1
 8002d1c:	005b      	lsls	r3, r3, #1
 8002d1e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002d20:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002d22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d24:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d28:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002d2a:	e002      	b.n	8002d32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d2c:	4b05      	ldr	r3, [pc, #20]	@ (8002d44 <HAL_RCC_GetSysClockFreq+0x204>)
 8002d2e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002d30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	3750      	adds	r7, #80	@ 0x50
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d3e:	bf00      	nop
 8002d40:	40023800 	.word	0x40023800
 8002d44:	00f42400 	.word	0x00f42400
 8002d48:	007a1200 	.word	0x007a1200

08002d4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d50:	4b03      	ldr	r3, [pc, #12]	@ (8002d60 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d52:	681b      	ldr	r3, [r3, #0]
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr
 8002d5e:	bf00      	nop
 8002d60:	20000000 	.word	0x20000000

08002d64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002d68:	f7ff fff0 	bl	8002d4c <HAL_RCC_GetHCLKFreq>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	4b05      	ldr	r3, [pc, #20]	@ (8002d84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	0a9b      	lsrs	r3, r3, #10
 8002d74:	f003 0307 	and.w	r3, r3, #7
 8002d78:	4903      	ldr	r1, [pc, #12]	@ (8002d88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d7a:	5ccb      	ldrb	r3, [r1, r3]
 8002d7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	40023800 	.word	0x40023800
 8002d88:	0800492c 	.word	0x0800492c

08002d8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002d90:	f7ff ffdc 	bl	8002d4c <HAL_RCC_GetHCLKFreq>
 8002d94:	4602      	mov	r2, r0
 8002d96:	4b05      	ldr	r3, [pc, #20]	@ (8002dac <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	0b5b      	lsrs	r3, r3, #13
 8002d9c:	f003 0307 	and.w	r3, r3, #7
 8002da0:	4903      	ldr	r1, [pc, #12]	@ (8002db0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002da2:	5ccb      	ldrb	r3, [r1, r3]
 8002da4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	40023800 	.word	0x40023800
 8002db0:	0800492c 	.word	0x0800492c

08002db4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b082      	sub	sp, #8
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d101      	bne.n	8002dc6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e041      	b.n	8002e4a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d106      	bne.n	8002de0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f7fe f82a 	bl	8000e34 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2202      	movs	r2, #2
 8002de4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	3304      	adds	r3, #4
 8002df0:	4619      	mov	r1, r3
 8002df2:	4610      	mov	r0, r2
 8002df4:	f000 f9a0 	bl	8003138 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2201      	movs	r2, #1
 8002e04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2201      	movs	r2, #1
 8002e14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2201      	movs	r2, #1
 8002e24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2201      	movs	r2, #1
 8002e34:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2201      	movs	r2, #1
 8002e44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002e48:	2300      	movs	r3, #0
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3708      	adds	r7, #8
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}
	...

08002e54 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b084      	sub	sp, #16
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
 8002e5c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d109      	bne.n	8002e78 <HAL_TIM_PWM_Start+0x24>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	bf14      	ite	ne
 8002e70:	2301      	movne	r3, #1
 8002e72:	2300      	moveq	r3, #0
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	e022      	b.n	8002ebe <HAL_TIM_PWM_Start+0x6a>
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	2b04      	cmp	r3, #4
 8002e7c:	d109      	bne.n	8002e92 <HAL_TIM_PWM_Start+0x3e>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	bf14      	ite	ne
 8002e8a:	2301      	movne	r3, #1
 8002e8c:	2300      	moveq	r3, #0
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	e015      	b.n	8002ebe <HAL_TIM_PWM_Start+0x6a>
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	2b08      	cmp	r3, #8
 8002e96:	d109      	bne.n	8002eac <HAL_TIM_PWM_Start+0x58>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002e9e:	b2db      	uxtb	r3, r3
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	bf14      	ite	ne
 8002ea4:	2301      	movne	r3, #1
 8002ea6:	2300      	moveq	r3, #0
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	e008      	b.n	8002ebe <HAL_TIM_PWM_Start+0x6a>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	bf14      	ite	ne
 8002eb8:	2301      	movne	r3, #1
 8002eba:	2300      	moveq	r3, #0
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d001      	beq.n	8002ec6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e068      	b.n	8002f98 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d104      	bne.n	8002ed6 <HAL_TIM_PWM_Start+0x82>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2202      	movs	r2, #2
 8002ed0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002ed4:	e013      	b.n	8002efe <HAL_TIM_PWM_Start+0xaa>
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	2b04      	cmp	r3, #4
 8002eda:	d104      	bne.n	8002ee6 <HAL_TIM_PWM_Start+0x92>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2202      	movs	r2, #2
 8002ee0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002ee4:	e00b      	b.n	8002efe <HAL_TIM_PWM_Start+0xaa>
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	2b08      	cmp	r3, #8
 8002eea:	d104      	bne.n	8002ef6 <HAL_TIM_PWM_Start+0xa2>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2202      	movs	r2, #2
 8002ef0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002ef4:	e003      	b.n	8002efe <HAL_TIM_PWM_Start+0xaa>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2202      	movs	r2, #2
 8002efa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	2201      	movs	r2, #1
 8002f04:	6839      	ldr	r1, [r7, #0]
 8002f06:	4618      	mov	r0, r3
 8002f08:	f000 fb2e 	bl	8003568 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a23      	ldr	r2, [pc, #140]	@ (8002fa0 <HAL_TIM_PWM_Start+0x14c>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d107      	bne.n	8002f26 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002f24:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a1d      	ldr	r2, [pc, #116]	@ (8002fa0 <HAL_TIM_PWM_Start+0x14c>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d018      	beq.n	8002f62 <HAL_TIM_PWM_Start+0x10e>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f38:	d013      	beq.n	8002f62 <HAL_TIM_PWM_Start+0x10e>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a19      	ldr	r2, [pc, #100]	@ (8002fa4 <HAL_TIM_PWM_Start+0x150>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d00e      	beq.n	8002f62 <HAL_TIM_PWM_Start+0x10e>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a17      	ldr	r2, [pc, #92]	@ (8002fa8 <HAL_TIM_PWM_Start+0x154>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d009      	beq.n	8002f62 <HAL_TIM_PWM_Start+0x10e>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a16      	ldr	r2, [pc, #88]	@ (8002fac <HAL_TIM_PWM_Start+0x158>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d004      	beq.n	8002f62 <HAL_TIM_PWM_Start+0x10e>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a14      	ldr	r2, [pc, #80]	@ (8002fb0 <HAL_TIM_PWM_Start+0x15c>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d111      	bne.n	8002f86 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	f003 0307 	and.w	r3, r3, #7
 8002f6c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2b06      	cmp	r3, #6
 8002f72:	d010      	beq.n	8002f96 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f042 0201 	orr.w	r2, r2, #1
 8002f82:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f84:	e007      	b.n	8002f96 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f042 0201 	orr.w	r2, r2, #1
 8002f94:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f96:	2300      	movs	r3, #0
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	3710      	adds	r7, #16
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}
 8002fa0:	40010000 	.word	0x40010000
 8002fa4:	40000400 	.word	0x40000400
 8002fa8:	40000800 	.word	0x40000800
 8002fac:	40000c00 	.word	0x40000c00
 8002fb0:	40014000 	.word	0x40014000

08002fb4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b086      	sub	sp, #24
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	60f8      	str	r0, [r7, #12]
 8002fbc:	60b9      	str	r1, [r7, #8]
 8002fbe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d101      	bne.n	8002fd2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002fce:	2302      	movs	r3, #2
 8002fd0:	e0ae      	b.n	8003130 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2b0c      	cmp	r3, #12
 8002fde:	f200 809f 	bhi.w	8003120 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002fe2:	a201      	add	r2, pc, #4	@ (adr r2, 8002fe8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fe8:	0800301d 	.word	0x0800301d
 8002fec:	08003121 	.word	0x08003121
 8002ff0:	08003121 	.word	0x08003121
 8002ff4:	08003121 	.word	0x08003121
 8002ff8:	0800305d 	.word	0x0800305d
 8002ffc:	08003121 	.word	0x08003121
 8003000:	08003121 	.word	0x08003121
 8003004:	08003121 	.word	0x08003121
 8003008:	0800309f 	.word	0x0800309f
 800300c:	08003121 	.word	0x08003121
 8003010:	08003121 	.word	0x08003121
 8003014:	08003121 	.word	0x08003121
 8003018:	080030df 	.word	0x080030df
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	68b9      	ldr	r1, [r7, #8]
 8003022:	4618      	mov	r0, r3
 8003024:	f000 f914 	bl	8003250 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	699a      	ldr	r2, [r3, #24]
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f042 0208 	orr.w	r2, r2, #8
 8003036:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	699a      	ldr	r2, [r3, #24]
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f022 0204 	bic.w	r2, r2, #4
 8003046:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	6999      	ldr	r1, [r3, #24]
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	691a      	ldr	r2, [r3, #16]
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	430a      	orrs	r2, r1
 8003058:	619a      	str	r2, [r3, #24]
      break;
 800305a:	e064      	b.n	8003126 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	68b9      	ldr	r1, [r7, #8]
 8003062:	4618      	mov	r0, r3
 8003064:	f000 f95a 	bl	800331c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	699a      	ldr	r2, [r3, #24]
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003076:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	699a      	ldr	r2, [r3, #24]
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003086:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	6999      	ldr	r1, [r3, #24]
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	691b      	ldr	r3, [r3, #16]
 8003092:	021a      	lsls	r2, r3, #8
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	430a      	orrs	r2, r1
 800309a:	619a      	str	r2, [r3, #24]
      break;
 800309c:	e043      	b.n	8003126 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	68b9      	ldr	r1, [r7, #8]
 80030a4:	4618      	mov	r0, r3
 80030a6:	f000 f9a5 	bl	80033f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	69da      	ldr	r2, [r3, #28]
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f042 0208 	orr.w	r2, r2, #8
 80030b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	69da      	ldr	r2, [r3, #28]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f022 0204 	bic.w	r2, r2, #4
 80030c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	69d9      	ldr	r1, [r3, #28]
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	691a      	ldr	r2, [r3, #16]
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	430a      	orrs	r2, r1
 80030da:	61da      	str	r2, [r3, #28]
      break;
 80030dc:	e023      	b.n	8003126 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	68b9      	ldr	r1, [r7, #8]
 80030e4:	4618      	mov	r0, r3
 80030e6:	f000 f9ef 	bl	80034c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	69da      	ldr	r2, [r3, #28]
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80030f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	69da      	ldr	r2, [r3, #28]
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003108:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	69d9      	ldr	r1, [r3, #28]
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	691b      	ldr	r3, [r3, #16]
 8003114:	021a      	lsls	r2, r3, #8
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	430a      	orrs	r2, r1
 800311c:	61da      	str	r2, [r3, #28]
      break;
 800311e:	e002      	b.n	8003126 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	75fb      	strb	r3, [r7, #23]
      break;
 8003124:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2200      	movs	r2, #0
 800312a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800312e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003130:	4618      	mov	r0, r3
 8003132:	3718      	adds	r7, #24
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}

08003138 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003138:	b480      	push	{r7}
 800313a:	b085      	sub	sp, #20
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
 8003140:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	4a3a      	ldr	r2, [pc, #232]	@ (8003234 <TIM_Base_SetConfig+0xfc>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d00f      	beq.n	8003170 <TIM_Base_SetConfig+0x38>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003156:	d00b      	beq.n	8003170 <TIM_Base_SetConfig+0x38>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	4a37      	ldr	r2, [pc, #220]	@ (8003238 <TIM_Base_SetConfig+0x100>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d007      	beq.n	8003170 <TIM_Base_SetConfig+0x38>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	4a36      	ldr	r2, [pc, #216]	@ (800323c <TIM_Base_SetConfig+0x104>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d003      	beq.n	8003170 <TIM_Base_SetConfig+0x38>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	4a35      	ldr	r2, [pc, #212]	@ (8003240 <TIM_Base_SetConfig+0x108>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d108      	bne.n	8003182 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003176:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	68fa      	ldr	r2, [r7, #12]
 800317e:	4313      	orrs	r3, r2
 8003180:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	4a2b      	ldr	r2, [pc, #172]	@ (8003234 <TIM_Base_SetConfig+0xfc>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d01b      	beq.n	80031c2 <TIM_Base_SetConfig+0x8a>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003190:	d017      	beq.n	80031c2 <TIM_Base_SetConfig+0x8a>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4a28      	ldr	r2, [pc, #160]	@ (8003238 <TIM_Base_SetConfig+0x100>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d013      	beq.n	80031c2 <TIM_Base_SetConfig+0x8a>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	4a27      	ldr	r2, [pc, #156]	@ (800323c <TIM_Base_SetConfig+0x104>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d00f      	beq.n	80031c2 <TIM_Base_SetConfig+0x8a>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	4a26      	ldr	r2, [pc, #152]	@ (8003240 <TIM_Base_SetConfig+0x108>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d00b      	beq.n	80031c2 <TIM_Base_SetConfig+0x8a>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4a25      	ldr	r2, [pc, #148]	@ (8003244 <TIM_Base_SetConfig+0x10c>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d007      	beq.n	80031c2 <TIM_Base_SetConfig+0x8a>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	4a24      	ldr	r2, [pc, #144]	@ (8003248 <TIM_Base_SetConfig+0x110>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d003      	beq.n	80031c2 <TIM_Base_SetConfig+0x8a>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4a23      	ldr	r2, [pc, #140]	@ (800324c <TIM_Base_SetConfig+0x114>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d108      	bne.n	80031d4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80031c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	68db      	ldr	r3, [r3, #12]
 80031ce:	68fa      	ldr	r2, [r7, #12]
 80031d0:	4313      	orrs	r3, r2
 80031d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	695b      	ldr	r3, [r3, #20]
 80031de:	4313      	orrs	r3, r2
 80031e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	68fa      	ldr	r2, [r7, #12]
 80031e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	689a      	ldr	r2, [r3, #8]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	4a0e      	ldr	r2, [pc, #56]	@ (8003234 <TIM_Base_SetConfig+0xfc>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d103      	bne.n	8003208 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	691a      	ldr	r2, [r3, #16]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2201      	movs	r2, #1
 800320c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	691b      	ldr	r3, [r3, #16]
 8003212:	f003 0301 	and.w	r3, r3, #1
 8003216:	2b01      	cmp	r3, #1
 8003218:	d105      	bne.n	8003226 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	691b      	ldr	r3, [r3, #16]
 800321e:	f023 0201 	bic.w	r2, r3, #1
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	611a      	str	r2, [r3, #16]
  }
}
 8003226:	bf00      	nop
 8003228:	3714      	adds	r7, #20
 800322a:	46bd      	mov	sp, r7
 800322c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003230:	4770      	bx	lr
 8003232:	bf00      	nop
 8003234:	40010000 	.word	0x40010000
 8003238:	40000400 	.word	0x40000400
 800323c:	40000800 	.word	0x40000800
 8003240:	40000c00 	.word	0x40000c00
 8003244:	40014000 	.word	0x40014000
 8003248:	40014400 	.word	0x40014400
 800324c:	40014800 	.word	0x40014800

08003250 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003250:	b480      	push	{r7}
 8003252:	b087      	sub	sp, #28
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
 8003258:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6a1b      	ldr	r3, [r3, #32]
 800325e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6a1b      	ldr	r3, [r3, #32]
 8003264:	f023 0201 	bic.w	r2, r3, #1
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	699b      	ldr	r3, [r3, #24]
 8003276:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800327e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	f023 0303 	bic.w	r3, r3, #3
 8003286:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	68fa      	ldr	r2, [r7, #12]
 800328e:	4313      	orrs	r3, r2
 8003290:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	f023 0302 	bic.w	r3, r3, #2
 8003298:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	697a      	ldr	r2, [r7, #20]
 80032a0:	4313      	orrs	r3, r2
 80032a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	4a1c      	ldr	r2, [pc, #112]	@ (8003318 <TIM_OC1_SetConfig+0xc8>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d10c      	bne.n	80032c6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	f023 0308 	bic.w	r3, r3, #8
 80032b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	68db      	ldr	r3, [r3, #12]
 80032b8:	697a      	ldr	r2, [r7, #20]
 80032ba:	4313      	orrs	r3, r2
 80032bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	f023 0304 	bic.w	r3, r3, #4
 80032c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	4a13      	ldr	r2, [pc, #76]	@ (8003318 <TIM_OC1_SetConfig+0xc8>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d111      	bne.n	80032f2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80032d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80032dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	695b      	ldr	r3, [r3, #20]
 80032e2:	693a      	ldr	r2, [r7, #16]
 80032e4:	4313      	orrs	r3, r2
 80032e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	699b      	ldr	r3, [r3, #24]
 80032ec:	693a      	ldr	r2, [r7, #16]
 80032ee:	4313      	orrs	r3, r2
 80032f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	693a      	ldr	r2, [r7, #16]
 80032f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	68fa      	ldr	r2, [r7, #12]
 80032fc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	685a      	ldr	r2, [r3, #4]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	697a      	ldr	r2, [r7, #20]
 800330a:	621a      	str	r2, [r3, #32]
}
 800330c:	bf00      	nop
 800330e:	371c      	adds	r7, #28
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr
 8003318:	40010000 	.word	0x40010000

0800331c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800331c:	b480      	push	{r7}
 800331e:	b087      	sub	sp, #28
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
 8003324:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6a1b      	ldr	r3, [r3, #32]
 800332a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6a1b      	ldr	r3, [r3, #32]
 8003330:	f023 0210 	bic.w	r2, r3, #16
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	699b      	ldr	r3, [r3, #24]
 8003342:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800334a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003352:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	021b      	lsls	r3, r3, #8
 800335a:	68fa      	ldr	r2, [r7, #12]
 800335c:	4313      	orrs	r3, r2
 800335e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	f023 0320 	bic.w	r3, r3, #32
 8003366:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	011b      	lsls	r3, r3, #4
 800336e:	697a      	ldr	r2, [r7, #20]
 8003370:	4313      	orrs	r3, r2
 8003372:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	4a1e      	ldr	r2, [pc, #120]	@ (80033f0 <TIM_OC2_SetConfig+0xd4>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d10d      	bne.n	8003398 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003382:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	68db      	ldr	r3, [r3, #12]
 8003388:	011b      	lsls	r3, r3, #4
 800338a:	697a      	ldr	r2, [r7, #20]
 800338c:	4313      	orrs	r3, r2
 800338e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003396:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	4a15      	ldr	r2, [pc, #84]	@ (80033f0 <TIM_OC2_SetConfig+0xd4>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d113      	bne.n	80033c8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80033a6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80033ae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	695b      	ldr	r3, [r3, #20]
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	693a      	ldr	r2, [r7, #16]
 80033b8:	4313      	orrs	r3, r2
 80033ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	699b      	ldr	r3, [r3, #24]
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	693a      	ldr	r2, [r7, #16]
 80033c4:	4313      	orrs	r3, r2
 80033c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	693a      	ldr	r2, [r7, #16]
 80033cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	68fa      	ldr	r2, [r7, #12]
 80033d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	685a      	ldr	r2, [r3, #4]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	697a      	ldr	r2, [r7, #20]
 80033e0:	621a      	str	r2, [r3, #32]
}
 80033e2:	bf00      	nop
 80033e4:	371c      	adds	r7, #28
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr
 80033ee:	bf00      	nop
 80033f0:	40010000 	.word	0x40010000

080033f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b087      	sub	sp, #28
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
 80033fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6a1b      	ldr	r3, [r3, #32]
 8003402:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6a1b      	ldr	r3, [r3, #32]
 8003408:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	69db      	ldr	r3, [r3, #28]
 800341a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003422:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	f023 0303 	bic.w	r3, r3, #3
 800342a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	68fa      	ldr	r2, [r7, #12]
 8003432:	4313      	orrs	r3, r2
 8003434:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800343c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	021b      	lsls	r3, r3, #8
 8003444:	697a      	ldr	r2, [r7, #20]
 8003446:	4313      	orrs	r3, r2
 8003448:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	4a1d      	ldr	r2, [pc, #116]	@ (80034c4 <TIM_OC3_SetConfig+0xd0>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d10d      	bne.n	800346e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003458:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	68db      	ldr	r3, [r3, #12]
 800345e:	021b      	lsls	r3, r3, #8
 8003460:	697a      	ldr	r2, [r7, #20]
 8003462:	4313      	orrs	r3, r2
 8003464:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800346c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	4a14      	ldr	r2, [pc, #80]	@ (80034c4 <TIM_OC3_SetConfig+0xd0>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d113      	bne.n	800349e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800347c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003484:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	695b      	ldr	r3, [r3, #20]
 800348a:	011b      	lsls	r3, r3, #4
 800348c:	693a      	ldr	r2, [r7, #16]
 800348e:	4313      	orrs	r3, r2
 8003490:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	699b      	ldr	r3, [r3, #24]
 8003496:	011b      	lsls	r3, r3, #4
 8003498:	693a      	ldr	r2, [r7, #16]
 800349a:	4313      	orrs	r3, r2
 800349c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	693a      	ldr	r2, [r7, #16]
 80034a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	68fa      	ldr	r2, [r7, #12]
 80034a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	685a      	ldr	r2, [r3, #4]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	697a      	ldr	r2, [r7, #20]
 80034b6:	621a      	str	r2, [r3, #32]
}
 80034b8:	bf00      	nop
 80034ba:	371c      	adds	r7, #28
 80034bc:	46bd      	mov	sp, r7
 80034be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c2:	4770      	bx	lr
 80034c4:	40010000 	.word	0x40010000

080034c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b087      	sub	sp, #28
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
 80034d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6a1b      	ldr	r3, [r3, #32]
 80034d6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6a1b      	ldr	r3, [r3, #32]
 80034dc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	69db      	ldr	r3, [r3, #28]
 80034ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80034f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80034fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	021b      	lsls	r3, r3, #8
 8003506:	68fa      	ldr	r2, [r7, #12]
 8003508:	4313      	orrs	r3, r2
 800350a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003512:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	031b      	lsls	r3, r3, #12
 800351a:	693a      	ldr	r2, [r7, #16]
 800351c:	4313      	orrs	r3, r2
 800351e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	4a10      	ldr	r2, [pc, #64]	@ (8003564 <TIM_OC4_SetConfig+0x9c>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d109      	bne.n	800353c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800352e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	695b      	ldr	r3, [r3, #20]
 8003534:	019b      	lsls	r3, r3, #6
 8003536:	697a      	ldr	r2, [r7, #20]
 8003538:	4313      	orrs	r3, r2
 800353a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	697a      	ldr	r2, [r7, #20]
 8003540:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	68fa      	ldr	r2, [r7, #12]
 8003546:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	685a      	ldr	r2, [r3, #4]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	693a      	ldr	r2, [r7, #16]
 8003554:	621a      	str	r2, [r3, #32]
}
 8003556:	bf00      	nop
 8003558:	371c      	adds	r7, #28
 800355a:	46bd      	mov	sp, r7
 800355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003560:	4770      	bx	lr
 8003562:	bf00      	nop
 8003564:	40010000 	.word	0x40010000

08003568 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003568:	b480      	push	{r7}
 800356a:	b087      	sub	sp, #28
 800356c:	af00      	add	r7, sp, #0
 800356e:	60f8      	str	r0, [r7, #12]
 8003570:	60b9      	str	r1, [r7, #8]
 8003572:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	f003 031f 	and.w	r3, r3, #31
 800357a:	2201      	movs	r2, #1
 800357c:	fa02 f303 	lsl.w	r3, r2, r3
 8003580:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	6a1a      	ldr	r2, [r3, #32]
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	43db      	mvns	r3, r3
 800358a:	401a      	ands	r2, r3
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	6a1a      	ldr	r2, [r3, #32]
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	f003 031f 	and.w	r3, r3, #31
 800359a:	6879      	ldr	r1, [r7, #4]
 800359c:	fa01 f303 	lsl.w	r3, r1, r3
 80035a0:	431a      	orrs	r2, r3
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	621a      	str	r2, [r3, #32]
}
 80035a6:	bf00      	nop
 80035a8:	371c      	adds	r7, #28
 80035aa:	46bd      	mov	sp, r7
 80035ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b0:	4770      	bx	lr
	...

080035b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b085      	sub	sp, #20
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
 80035bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d101      	bne.n	80035cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80035c8:	2302      	movs	r3, #2
 80035ca:	e050      	b.n	800366e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2201      	movs	r2, #1
 80035d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2202      	movs	r2, #2
 80035d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	68fa      	ldr	r2, [r7, #12]
 80035fa:	4313      	orrs	r3, r2
 80035fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	68fa      	ldr	r2, [r7, #12]
 8003604:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a1c      	ldr	r2, [pc, #112]	@ (800367c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d018      	beq.n	8003642 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003618:	d013      	beq.n	8003642 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a18      	ldr	r2, [pc, #96]	@ (8003680 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d00e      	beq.n	8003642 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a16      	ldr	r2, [pc, #88]	@ (8003684 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d009      	beq.n	8003642 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a15      	ldr	r2, [pc, #84]	@ (8003688 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d004      	beq.n	8003642 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a13      	ldr	r2, [pc, #76]	@ (800368c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d10c      	bne.n	800365c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003648:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	68ba      	ldr	r2, [r7, #8]
 8003650:	4313      	orrs	r3, r2
 8003652:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	68ba      	ldr	r2, [r7, #8]
 800365a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2201      	movs	r2, #1
 8003660:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2200      	movs	r2, #0
 8003668:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800366c:	2300      	movs	r3, #0
}
 800366e:	4618      	mov	r0, r3
 8003670:	3714      	adds	r7, #20
 8003672:	46bd      	mov	sp, r7
 8003674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003678:	4770      	bx	lr
 800367a:	bf00      	nop
 800367c:	40010000 	.word	0x40010000
 8003680:	40000400 	.word	0x40000400
 8003684:	40000800 	.word	0x40000800
 8003688:	40000c00 	.word	0x40000c00
 800368c:	40014000 	.word	0x40014000

08003690 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b082      	sub	sp, #8
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d101      	bne.n	80036a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	e042      	b.n	8003728 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d106      	bne.n	80036bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2200      	movs	r2, #0
 80036b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f7fd fc6c 	bl	8000f94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2224      	movs	r2, #36	@ 0x24
 80036c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	68da      	ldr	r2, [r3, #12]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80036d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80036d4:	6878      	ldr	r0, [r7, #4]
 80036d6:	f000 fe75 	bl	80043c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	691a      	ldr	r2, [r3, #16]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80036e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	695a      	ldr	r2, [r3, #20]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80036f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	68da      	ldr	r2, [r3, #12]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003708:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2200      	movs	r2, #0
 800370e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2220      	movs	r2, #32
 8003714:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2220      	movs	r2, #32
 800371c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2200      	movs	r2, #0
 8003724:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003726:	2300      	movs	r3, #0
}
 8003728:	4618      	mov	r0, r3
 800372a:	3708      	adds	r7, #8
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}

08003730 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b084      	sub	sp, #16
 8003734:	af00      	add	r7, sp, #0
 8003736:	60f8      	str	r0, [r7, #12]
 8003738:	60b9      	str	r1, [r7, #8]
 800373a:	4613      	mov	r3, r2
 800373c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003744:	b2db      	uxtb	r3, r3
 8003746:	2b20      	cmp	r3, #32
 8003748:	d112      	bne.n	8003770 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d002      	beq.n	8003756 <HAL_UART_Receive_DMA+0x26>
 8003750:	88fb      	ldrh	r3, [r7, #6]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d101      	bne.n	800375a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e00b      	b.n	8003772 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2200      	movs	r2, #0
 800375e:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003760:	88fb      	ldrh	r3, [r7, #6]
 8003762:	461a      	mov	r2, r3
 8003764:	68b9      	ldr	r1, [r7, #8]
 8003766:	68f8      	ldr	r0, [r7, #12]
 8003768:	f000 fbcc 	bl	8003f04 <UART_Start_Receive_DMA>
 800376c:	4603      	mov	r3, r0
 800376e:	e000      	b.n	8003772 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003770:	2302      	movs	r3, #2
  }
}
 8003772:	4618      	mov	r0, r3
 8003774:	3710      	adds	r7, #16
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}
	...

0800377c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b0ba      	sub	sp, #232	@ 0xe8
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	695b      	ldr	r3, [r3, #20]
 800379e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80037a2:	2300      	movs	r3, #0
 80037a4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80037a8:	2300      	movs	r3, #0
 80037aa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80037ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037b2:	f003 030f 	and.w	r3, r3, #15
 80037b6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80037ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d10f      	bne.n	80037e2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80037c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037c6:	f003 0320 	and.w	r3, r3, #32
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d009      	beq.n	80037e2 <HAL_UART_IRQHandler+0x66>
 80037ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80037d2:	f003 0320 	and.w	r3, r3, #32
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d003      	beq.n	80037e2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f000 fd33 	bl	8004246 <UART_Receive_IT>
      return;
 80037e0:	e25b      	b.n	8003c9a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80037e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	f000 80de 	beq.w	80039a8 <HAL_UART_IRQHandler+0x22c>
 80037ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80037f0:	f003 0301 	and.w	r3, r3, #1
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d106      	bne.n	8003806 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80037f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80037fc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003800:	2b00      	cmp	r3, #0
 8003802:	f000 80d1 	beq.w	80039a8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003806:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800380a:	f003 0301 	and.w	r3, r3, #1
 800380e:	2b00      	cmp	r3, #0
 8003810:	d00b      	beq.n	800382a <HAL_UART_IRQHandler+0xae>
 8003812:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003816:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800381a:	2b00      	cmp	r3, #0
 800381c:	d005      	beq.n	800382a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003822:	f043 0201 	orr.w	r2, r3, #1
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800382a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800382e:	f003 0304 	and.w	r3, r3, #4
 8003832:	2b00      	cmp	r3, #0
 8003834:	d00b      	beq.n	800384e <HAL_UART_IRQHandler+0xd2>
 8003836:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800383a:	f003 0301 	and.w	r3, r3, #1
 800383e:	2b00      	cmp	r3, #0
 8003840:	d005      	beq.n	800384e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003846:	f043 0202 	orr.w	r2, r3, #2
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800384e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003852:	f003 0302 	and.w	r3, r3, #2
 8003856:	2b00      	cmp	r3, #0
 8003858:	d00b      	beq.n	8003872 <HAL_UART_IRQHandler+0xf6>
 800385a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800385e:	f003 0301 	and.w	r3, r3, #1
 8003862:	2b00      	cmp	r3, #0
 8003864:	d005      	beq.n	8003872 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800386a:	f043 0204 	orr.w	r2, r3, #4
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003872:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003876:	f003 0308 	and.w	r3, r3, #8
 800387a:	2b00      	cmp	r3, #0
 800387c:	d011      	beq.n	80038a2 <HAL_UART_IRQHandler+0x126>
 800387e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003882:	f003 0320 	and.w	r3, r3, #32
 8003886:	2b00      	cmp	r3, #0
 8003888:	d105      	bne.n	8003896 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800388a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800388e:	f003 0301 	and.w	r3, r3, #1
 8003892:	2b00      	cmp	r3, #0
 8003894:	d005      	beq.n	80038a2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800389a:	f043 0208 	orr.w	r2, r3, #8
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	f000 81f2 	beq.w	8003c90 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80038ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038b0:	f003 0320 	and.w	r3, r3, #32
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d008      	beq.n	80038ca <HAL_UART_IRQHandler+0x14e>
 80038b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80038bc:	f003 0320 	and.w	r3, r3, #32
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d002      	beq.n	80038ca <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	f000 fcbe 	bl	8004246 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	695b      	ldr	r3, [r3, #20]
 80038d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038d4:	2b40      	cmp	r3, #64	@ 0x40
 80038d6:	bf0c      	ite	eq
 80038d8:	2301      	moveq	r3, #1
 80038da:	2300      	movne	r3, #0
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038e6:	f003 0308 	and.w	r3, r3, #8
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d103      	bne.n	80038f6 <HAL_UART_IRQHandler+0x17a>
 80038ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d04f      	beq.n	8003996 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f000 fbc6 	bl	8004088 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	695b      	ldr	r3, [r3, #20]
 8003902:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003906:	2b40      	cmp	r3, #64	@ 0x40
 8003908:	d141      	bne.n	800398e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	3314      	adds	r3, #20
 8003910:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003914:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003918:	e853 3f00 	ldrex	r3, [r3]
 800391c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003920:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003924:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003928:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	3314      	adds	r3, #20
 8003932:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003936:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800393a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800393e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003942:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003946:	e841 2300 	strex	r3, r2, [r1]
 800394a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800394e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003952:	2b00      	cmp	r3, #0
 8003954:	d1d9      	bne.n	800390a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800395a:	2b00      	cmp	r3, #0
 800395c:	d013      	beq.n	8003986 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003962:	4a7e      	ldr	r2, [pc, #504]	@ (8003b5c <HAL_UART_IRQHandler+0x3e0>)
 8003964:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800396a:	4618      	mov	r0, r3
 800396c:	f7fe f960 	bl	8001c30 <HAL_DMA_Abort_IT>
 8003970:	4603      	mov	r3, r0
 8003972:	2b00      	cmp	r3, #0
 8003974:	d016      	beq.n	80039a4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800397a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800397c:	687a      	ldr	r2, [r7, #4]
 800397e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003980:	4610      	mov	r0, r2
 8003982:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003984:	e00e      	b.n	80039a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f000 f9a8 	bl	8003cdc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800398c:	e00a      	b.n	80039a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f000 f9a4 	bl	8003cdc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003994:	e006      	b.n	80039a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f000 f9a0 	bl	8003cdc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2200      	movs	r2, #0
 80039a0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80039a2:	e175      	b.n	8003c90 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039a4:	bf00      	nop
    return;
 80039a6:	e173      	b.n	8003c90 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	f040 814f 	bne.w	8003c50 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80039b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039b6:	f003 0310 	and.w	r3, r3, #16
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	f000 8148 	beq.w	8003c50 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80039c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80039c4:	f003 0310 	and.w	r3, r3, #16
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	f000 8141 	beq.w	8003c50 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80039ce:	2300      	movs	r3, #0
 80039d0:	60bb      	str	r3, [r7, #8]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	60bb      	str	r3, [r7, #8]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	60bb      	str	r3, [r7, #8]
 80039e2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	695b      	ldr	r3, [r3, #20]
 80039ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039ee:	2b40      	cmp	r3, #64	@ 0x40
 80039f0:	f040 80b6 	bne.w	8003b60 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003a00:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	f000 8145 	beq.w	8003c94 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003a0e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003a12:	429a      	cmp	r2, r3
 8003a14:	f080 813e 	bcs.w	8003c94 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003a1e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a24:	69db      	ldr	r3, [r3, #28]
 8003a26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a2a:	f000 8088 	beq.w	8003b3e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	330c      	adds	r3, #12
 8003a34:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a38:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003a3c:	e853 3f00 	ldrex	r3, [r3]
 8003a40:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003a44:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003a48:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003a4c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	330c      	adds	r3, #12
 8003a56:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003a5a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003a5e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a62:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003a66:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003a6a:	e841 2300 	strex	r3, r2, [r1]
 8003a6e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003a72:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d1d9      	bne.n	8003a2e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	3314      	adds	r3, #20
 8003a80:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a82:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003a84:	e853 3f00 	ldrex	r3, [r3]
 8003a88:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003a8a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003a8c:	f023 0301 	bic.w	r3, r3, #1
 8003a90:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	3314      	adds	r3, #20
 8003a9a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003a9e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003aa2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aa4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003aa6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003aaa:	e841 2300 	strex	r3, r2, [r1]
 8003aae:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003ab0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d1e1      	bne.n	8003a7a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	3314      	adds	r3, #20
 8003abc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003abe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003ac0:	e853 3f00 	ldrex	r3, [r3]
 8003ac4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003ac6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003ac8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003acc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	3314      	adds	r3, #20
 8003ad6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003ada:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003adc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ade:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003ae0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003ae2:	e841 2300 	strex	r3, r2, [r1]
 8003ae6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003ae8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d1e3      	bne.n	8003ab6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2220      	movs	r2, #32
 8003af2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2200      	movs	r2, #0
 8003afa:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	330c      	adds	r3, #12
 8003b02:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b04:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b06:	e853 3f00 	ldrex	r3, [r3]
 8003b0a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003b0c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b0e:	f023 0310 	bic.w	r3, r3, #16
 8003b12:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	330c      	adds	r3, #12
 8003b1c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003b20:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003b22:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b24:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003b26:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003b28:	e841 2300 	strex	r3, r2, [r1]
 8003b2c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003b2e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d1e3      	bne.n	8003afc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f7fe f809 	bl	8001b50 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2202      	movs	r2, #2
 8003b42:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003b4c:	b29b      	uxth	r3, r3
 8003b4e:	1ad3      	subs	r3, r2, r3
 8003b50:	b29b      	uxth	r3, r3
 8003b52:	4619      	mov	r1, r3
 8003b54:	6878      	ldr	r0, [r7, #4]
 8003b56:	f000 f8cb 	bl	8003cf0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003b5a:	e09b      	b.n	8003c94 <HAL_UART_IRQHandler+0x518>
 8003b5c:	0800414f 	.word	0x0800414f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003b68:	b29b      	uxth	r3, r3
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003b74:	b29b      	uxth	r3, r3
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	f000 808e 	beq.w	8003c98 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003b7c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	f000 8089 	beq.w	8003c98 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	330c      	adds	r3, #12
 8003b8c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b90:	e853 3f00 	ldrex	r3, [r3]
 8003b94:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003b96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b98:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003b9c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	330c      	adds	r3, #12
 8003ba6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003baa:	647a      	str	r2, [r7, #68]	@ 0x44
 8003bac:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bae:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003bb0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003bb2:	e841 2300 	strex	r3, r2, [r1]
 8003bb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003bb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d1e3      	bne.n	8003b86 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	3314      	adds	r3, #20
 8003bc4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bc8:	e853 3f00 	ldrex	r3, [r3]
 8003bcc:	623b      	str	r3, [r7, #32]
   return(result);
 8003bce:	6a3b      	ldr	r3, [r7, #32]
 8003bd0:	f023 0301 	bic.w	r3, r3, #1
 8003bd4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	3314      	adds	r3, #20
 8003bde:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003be2:	633a      	str	r2, [r7, #48]	@ 0x30
 8003be4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003be6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003be8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003bea:	e841 2300 	strex	r3, r2, [r1]
 8003bee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003bf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d1e3      	bne.n	8003bbe <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2220      	movs	r2, #32
 8003bfa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2200      	movs	r2, #0
 8003c02:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	330c      	adds	r3, #12
 8003c0a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	e853 3f00 	ldrex	r3, [r3]
 8003c12:	60fb      	str	r3, [r7, #12]
   return(result);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	f023 0310 	bic.w	r3, r3, #16
 8003c1a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	330c      	adds	r3, #12
 8003c24:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003c28:	61fa      	str	r2, [r7, #28]
 8003c2a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c2c:	69b9      	ldr	r1, [r7, #24]
 8003c2e:	69fa      	ldr	r2, [r7, #28]
 8003c30:	e841 2300 	strex	r3, r2, [r1]
 8003c34:	617b      	str	r3, [r7, #20]
   return(result);
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d1e3      	bne.n	8003c04 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2202      	movs	r2, #2
 8003c40:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003c42:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003c46:	4619      	mov	r1, r3
 8003c48:	6878      	ldr	r0, [r7, #4]
 8003c4a:	f000 f851 	bl	8003cf0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003c4e:	e023      	b.n	8003c98 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003c50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d009      	beq.n	8003c70 <HAL_UART_IRQHandler+0x4f4>
 8003c5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d003      	beq.n	8003c70 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	f000 fa84 	bl	8004176 <UART_Transmit_IT>
    return;
 8003c6e:	e014      	b.n	8003c9a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003c70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d00e      	beq.n	8003c9a <HAL_UART_IRQHandler+0x51e>
 8003c7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d008      	beq.n	8003c9a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003c88:	6878      	ldr	r0, [r7, #4]
 8003c8a:	f000 fac4 	bl	8004216 <UART_EndTransmit_IT>
    return;
 8003c8e:	e004      	b.n	8003c9a <HAL_UART_IRQHandler+0x51e>
    return;
 8003c90:	bf00      	nop
 8003c92:	e002      	b.n	8003c9a <HAL_UART_IRQHandler+0x51e>
      return;
 8003c94:	bf00      	nop
 8003c96:	e000      	b.n	8003c9a <HAL_UART_IRQHandler+0x51e>
      return;
 8003c98:	bf00      	nop
  }
}
 8003c9a:	37e8      	adds	r7, #232	@ 0xe8
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}

08003ca0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b083      	sub	sp, #12
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003ca8:	bf00      	nop
 8003caa:	370c      	adds	r7, #12
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr

08003cb4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b083      	sub	sp, #12
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003cbc:	bf00      	nop
 8003cbe:	370c      	adds	r7, #12
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr

08003cc8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b083      	sub	sp, #12
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003cd0:	bf00      	nop
 8003cd2:	370c      	adds	r7, #12
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cda:	4770      	bx	lr

08003cdc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b083      	sub	sp, #12
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003ce4:	bf00      	nop
 8003ce6:	370c      	adds	r7, #12
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr

08003cf0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b083      	sub	sp, #12
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
 8003cf8:	460b      	mov	r3, r1
 8003cfa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003cfc:	bf00      	nop
 8003cfe:	370c      	adds	r7, #12
 8003d00:	46bd      	mov	sp, r7
 8003d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d06:	4770      	bx	lr

08003d08 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b09c      	sub	sp, #112	@ 0x70
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d14:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d172      	bne.n	8003e0a <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8003d24:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003d26:	2200      	movs	r2, #0
 8003d28:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003d2a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	330c      	adds	r3, #12
 8003d30:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d32:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003d34:	e853 3f00 	ldrex	r3, [r3]
 8003d38:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003d3a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003d3c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003d40:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003d42:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	330c      	adds	r3, #12
 8003d48:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8003d4a:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003d4c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d4e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003d50:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003d52:	e841 2300 	strex	r3, r2, [r1]
 8003d56:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003d58:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d1e5      	bne.n	8003d2a <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d5e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	3314      	adds	r3, #20
 8003d64:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d68:	e853 3f00 	ldrex	r3, [r3]
 8003d6c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003d6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d70:	f023 0301 	bic.w	r3, r3, #1
 8003d74:	667b      	str	r3, [r7, #100]	@ 0x64
 8003d76:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	3314      	adds	r3, #20
 8003d7c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003d7e:	647a      	str	r2, [r7, #68]	@ 0x44
 8003d80:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d82:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003d84:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003d86:	e841 2300 	strex	r3, r2, [r1]
 8003d8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003d8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d1e5      	bne.n	8003d5e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d92:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	3314      	adds	r3, #20
 8003d98:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d9c:	e853 3f00 	ldrex	r3, [r3]
 8003da0:	623b      	str	r3, [r7, #32]
   return(result);
 8003da2:	6a3b      	ldr	r3, [r7, #32]
 8003da4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003da8:	663b      	str	r3, [r7, #96]	@ 0x60
 8003daa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	3314      	adds	r3, #20
 8003db0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003db2:	633a      	str	r2, [r7, #48]	@ 0x30
 8003db4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003db6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003db8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003dba:	e841 2300 	strex	r3, r2, [r1]
 8003dbe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003dc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d1e5      	bne.n	8003d92 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003dc6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003dc8:	2220      	movs	r2, #32
 8003dca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003dce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003dd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dd2:	2b01      	cmp	r3, #1
 8003dd4:	d119      	bne.n	8003e0a <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dd6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	330c      	adds	r3, #12
 8003ddc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	e853 3f00 	ldrex	r3, [r3]
 8003de4:	60fb      	str	r3, [r7, #12]
   return(result);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	f023 0310 	bic.w	r3, r3, #16
 8003dec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003dee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	330c      	adds	r3, #12
 8003df4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003df6:	61fa      	str	r2, [r7, #28]
 8003df8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dfa:	69b9      	ldr	r1, [r7, #24]
 8003dfc:	69fa      	ldr	r2, [r7, #28]
 8003dfe:	e841 2300 	strex	r3, r2, [r1]
 8003e02:	617b      	str	r3, [r7, #20]
   return(result);
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d1e5      	bne.n	8003dd6 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e0a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e10:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003e12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d106      	bne.n	8003e26 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003e18:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003e1a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003e1c:	4619      	mov	r1, r3
 8003e1e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003e20:	f7ff ff66 	bl	8003cf0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003e24:	e002      	b.n	8003e2c <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8003e26:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003e28:	f7ff ff44 	bl	8003cb4 <HAL_UART_RxCpltCallback>
}
 8003e2c:	bf00      	nop
 8003e2e:	3770      	adds	r7, #112	@ 0x70
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}

08003e34 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b084      	sub	sp, #16
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e40:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2201      	movs	r2, #1
 8003e46:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d108      	bne.n	8003e62 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003e54:	085b      	lsrs	r3, r3, #1
 8003e56:	b29b      	uxth	r3, r3
 8003e58:	4619      	mov	r1, r3
 8003e5a:	68f8      	ldr	r0, [r7, #12]
 8003e5c:	f7ff ff48 	bl	8003cf0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003e60:	e002      	b.n	8003e68 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8003e62:	68f8      	ldr	r0, [r7, #12]
 8003e64:	f7ff ff30 	bl	8003cc8 <HAL_UART_RxHalfCpltCallback>
}
 8003e68:	bf00      	nop
 8003e6a:	3710      	adds	r7, #16
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}

08003e70 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b084      	sub	sp, #16
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e80:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	695b      	ldr	r3, [r3, #20]
 8003e88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e8c:	2b80      	cmp	r3, #128	@ 0x80
 8003e8e:	bf0c      	ite	eq
 8003e90:	2301      	moveq	r3, #1
 8003e92:	2300      	movne	r3, #0
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e9e:	b2db      	uxtb	r3, r3
 8003ea0:	2b21      	cmp	r3, #33	@ 0x21
 8003ea2:	d108      	bne.n	8003eb6 <UART_DMAError+0x46>
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d005      	beq.n	8003eb6 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	2200      	movs	r2, #0
 8003eae:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8003eb0:	68b8      	ldr	r0, [r7, #8]
 8003eb2:	f000 f8c1 	bl	8004038 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	695b      	ldr	r3, [r3, #20]
 8003ebc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ec0:	2b40      	cmp	r3, #64	@ 0x40
 8003ec2:	bf0c      	ite	eq
 8003ec4:	2301      	moveq	r3, #1
 8003ec6:	2300      	movne	r3, #0
 8003ec8:	b2db      	uxtb	r3, r3
 8003eca:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003ed2:	b2db      	uxtb	r3, r3
 8003ed4:	2b22      	cmp	r3, #34	@ 0x22
 8003ed6:	d108      	bne.n	8003eea <UART_DMAError+0x7a>
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d005      	beq.n	8003eea <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8003ee4:	68b8      	ldr	r0, [r7, #8]
 8003ee6:	f000 f8cf 	bl	8004088 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eee:	f043 0210 	orr.w	r2, r3, #16
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003ef6:	68b8      	ldr	r0, [r7, #8]
 8003ef8:	f7ff fef0 	bl	8003cdc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003efc:	bf00      	nop
 8003efe:	3710      	adds	r7, #16
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}

08003f04 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b098      	sub	sp, #96	@ 0x60
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	60f8      	str	r0, [r7, #12]
 8003f0c:	60b9      	str	r1, [r7, #8]
 8003f0e:	4613      	mov	r3, r2
 8003f10:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8003f12:	68ba      	ldr	r2, [r7, #8]
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	88fa      	ldrh	r2, [r7, #6]
 8003f1c:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2200      	movs	r2, #0
 8003f22:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2222      	movs	r2, #34	@ 0x22
 8003f28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f30:	4a3e      	ldr	r2, [pc, #248]	@ (800402c <UART_Start_Receive_DMA+0x128>)
 8003f32:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f38:	4a3d      	ldr	r2, [pc, #244]	@ (8004030 <UART_Start_Receive_DMA+0x12c>)
 8003f3a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f40:	4a3c      	ldr	r2, [pc, #240]	@ (8004034 <UART_Start_Receive_DMA+0x130>)
 8003f42:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f48:	2200      	movs	r2, #0
 8003f4a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8003f4c:	f107 0308 	add.w	r3, r7, #8
 8003f50:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	3304      	adds	r3, #4
 8003f5c:	4619      	mov	r1, r3
 8003f5e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	88fb      	ldrh	r3, [r7, #6]
 8003f64:	f7fd fd9c 	bl	8001aa0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003f68:	2300      	movs	r3, #0
 8003f6a:	613b      	str	r3, [r7, #16]
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	613b      	str	r3, [r7, #16]
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	613b      	str	r3, [r7, #16]
 8003f7c:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	691b      	ldr	r3, [r3, #16]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d019      	beq.n	8003fba <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	330c      	adds	r3, #12
 8003f8c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f90:	e853 3f00 	ldrex	r3, [r3]
 8003f94:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003f96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f9c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	330c      	adds	r3, #12
 8003fa4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003fa6:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003fa8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003faa:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8003fac:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003fae:	e841 2300 	strex	r3, r2, [r1]
 8003fb2:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8003fb4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d1e5      	bne.n	8003f86 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	3314      	adds	r3, #20
 8003fc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fc4:	e853 3f00 	ldrex	r3, [r3]
 8003fc8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003fca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fcc:	f043 0301 	orr.w	r3, r3, #1
 8003fd0:	657b      	str	r3, [r7, #84]	@ 0x54
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	3314      	adds	r3, #20
 8003fd8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003fda:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003fdc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fde:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003fe0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003fe2:	e841 2300 	strex	r3, r2, [r1]
 8003fe6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003fe8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d1e5      	bne.n	8003fba <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	3314      	adds	r3, #20
 8003ff4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ff6:	69bb      	ldr	r3, [r7, #24]
 8003ff8:	e853 3f00 	ldrex	r3, [r3]
 8003ffc:	617b      	str	r3, [r7, #20]
   return(result);
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004004:	653b      	str	r3, [r7, #80]	@ 0x50
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	3314      	adds	r3, #20
 800400c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800400e:	627a      	str	r2, [r7, #36]	@ 0x24
 8004010:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004012:	6a39      	ldr	r1, [r7, #32]
 8004014:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004016:	e841 2300 	strex	r3, r2, [r1]
 800401a:	61fb      	str	r3, [r7, #28]
   return(result);
 800401c:	69fb      	ldr	r3, [r7, #28]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d1e5      	bne.n	8003fee <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8004022:	2300      	movs	r3, #0
}
 8004024:	4618      	mov	r0, r3
 8004026:	3760      	adds	r7, #96	@ 0x60
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}
 800402c:	08003d09 	.word	0x08003d09
 8004030:	08003e35 	.word	0x08003e35
 8004034:	08003e71 	.word	0x08003e71

08004038 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004038:	b480      	push	{r7}
 800403a:	b089      	sub	sp, #36	@ 0x24
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	330c      	adds	r3, #12
 8004046:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	e853 3f00 	ldrex	r3, [r3]
 800404e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004056:	61fb      	str	r3, [r7, #28]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	330c      	adds	r3, #12
 800405e:	69fa      	ldr	r2, [r7, #28]
 8004060:	61ba      	str	r2, [r7, #24]
 8004062:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004064:	6979      	ldr	r1, [r7, #20]
 8004066:	69ba      	ldr	r2, [r7, #24]
 8004068:	e841 2300 	strex	r3, r2, [r1]
 800406c:	613b      	str	r3, [r7, #16]
   return(result);
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d1e5      	bne.n	8004040 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2220      	movs	r2, #32
 8004078:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800407c:	bf00      	nop
 800407e:	3724      	adds	r7, #36	@ 0x24
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr

08004088 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004088:	b480      	push	{r7}
 800408a:	b095      	sub	sp, #84	@ 0x54
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	330c      	adds	r3, #12
 8004096:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004098:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800409a:	e853 3f00 	ldrex	r3, [r3]
 800409e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80040a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040a2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80040a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	330c      	adds	r3, #12
 80040ae:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80040b0:	643a      	str	r2, [r7, #64]	@ 0x40
 80040b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040b4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80040b6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80040b8:	e841 2300 	strex	r3, r2, [r1]
 80040bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80040be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d1e5      	bne.n	8004090 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	3314      	adds	r3, #20
 80040ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040cc:	6a3b      	ldr	r3, [r7, #32]
 80040ce:	e853 3f00 	ldrex	r3, [r3]
 80040d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80040d4:	69fb      	ldr	r3, [r7, #28]
 80040d6:	f023 0301 	bic.w	r3, r3, #1
 80040da:	64bb      	str	r3, [r7, #72]	@ 0x48
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	3314      	adds	r3, #20
 80040e2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80040e4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80040e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040e8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80040ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80040ec:	e841 2300 	strex	r3, r2, [r1]
 80040f0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80040f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d1e5      	bne.n	80040c4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	d119      	bne.n	8004134 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	330c      	adds	r3, #12
 8004106:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	e853 3f00 	ldrex	r3, [r3]
 800410e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	f023 0310 	bic.w	r3, r3, #16
 8004116:	647b      	str	r3, [r7, #68]	@ 0x44
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	330c      	adds	r3, #12
 800411e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004120:	61ba      	str	r2, [r7, #24]
 8004122:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004124:	6979      	ldr	r1, [r7, #20]
 8004126:	69ba      	ldr	r2, [r7, #24]
 8004128:	e841 2300 	strex	r3, r2, [r1]
 800412c:	613b      	str	r3, [r7, #16]
   return(result);
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d1e5      	bne.n	8004100 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2220      	movs	r2, #32
 8004138:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2200      	movs	r2, #0
 8004140:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004142:	bf00      	nop
 8004144:	3754      	adds	r7, #84	@ 0x54
 8004146:	46bd      	mov	sp, r7
 8004148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414c:	4770      	bx	lr

0800414e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800414e:	b580      	push	{r7, lr}
 8004150:	b084      	sub	sp, #16
 8004152:	af00      	add	r7, sp, #0
 8004154:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800415a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2200      	movs	r2, #0
 8004160:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2200      	movs	r2, #0
 8004166:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004168:	68f8      	ldr	r0, [r7, #12]
 800416a:	f7ff fdb7 	bl	8003cdc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800416e:	bf00      	nop
 8004170:	3710      	adds	r7, #16
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}

08004176 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004176:	b480      	push	{r7}
 8004178:	b085      	sub	sp, #20
 800417a:	af00      	add	r7, sp, #0
 800417c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004184:	b2db      	uxtb	r3, r3
 8004186:	2b21      	cmp	r3, #33	@ 0x21
 8004188:	d13e      	bne.n	8004208 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004192:	d114      	bne.n	80041be <UART_Transmit_IT+0x48>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	691b      	ldr	r3, [r3, #16]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d110      	bne.n	80041be <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6a1b      	ldr	r3, [r3, #32]
 80041a0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	881b      	ldrh	r3, [r3, #0]
 80041a6:	461a      	mov	r2, r3
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80041b0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6a1b      	ldr	r3, [r3, #32]
 80041b6:	1c9a      	adds	r2, r3, #2
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	621a      	str	r2, [r3, #32]
 80041bc:	e008      	b.n	80041d0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6a1b      	ldr	r3, [r3, #32]
 80041c2:	1c59      	adds	r1, r3, #1
 80041c4:	687a      	ldr	r2, [r7, #4]
 80041c6:	6211      	str	r1, [r2, #32]
 80041c8:	781a      	ldrb	r2, [r3, #0]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80041d4:	b29b      	uxth	r3, r3
 80041d6:	3b01      	subs	r3, #1
 80041d8:	b29b      	uxth	r3, r3
 80041da:	687a      	ldr	r2, [r7, #4]
 80041dc:	4619      	mov	r1, r3
 80041de:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d10f      	bne.n	8004204 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	68da      	ldr	r2, [r3, #12]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80041f2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	68da      	ldr	r2, [r3, #12]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004202:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004204:	2300      	movs	r3, #0
 8004206:	e000      	b.n	800420a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004208:	2302      	movs	r3, #2
  }
}
 800420a:	4618      	mov	r0, r3
 800420c:	3714      	adds	r7, #20
 800420e:	46bd      	mov	sp, r7
 8004210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004214:	4770      	bx	lr

08004216 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004216:	b580      	push	{r7, lr}
 8004218:	b082      	sub	sp, #8
 800421a:	af00      	add	r7, sp, #0
 800421c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	68da      	ldr	r2, [r3, #12]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800422c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2220      	movs	r2, #32
 8004232:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	f7ff fd32 	bl	8003ca0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800423c:	2300      	movs	r3, #0
}
 800423e:	4618      	mov	r0, r3
 8004240:	3708      	adds	r7, #8
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}

08004246 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004246:	b580      	push	{r7, lr}
 8004248:	b08c      	sub	sp, #48	@ 0x30
 800424a:	af00      	add	r7, sp, #0
 800424c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004254:	b2db      	uxtb	r3, r3
 8004256:	2b22      	cmp	r3, #34	@ 0x22
 8004258:	f040 80ae 	bne.w	80043b8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004264:	d117      	bne.n	8004296 <UART_Receive_IT+0x50>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	691b      	ldr	r3, [r3, #16]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d113      	bne.n	8004296 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800426e:	2300      	movs	r3, #0
 8004270:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004276:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	b29b      	uxth	r3, r3
 8004280:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004284:	b29a      	uxth	r2, r3
 8004286:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004288:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800428e:	1c9a      	adds	r2, r3, #2
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	629a      	str	r2, [r3, #40]	@ 0x28
 8004294:	e026      	b.n	80042e4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800429a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800429c:	2300      	movs	r3, #0
 800429e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042a8:	d007      	beq.n	80042ba <UART_Receive_IT+0x74>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d10a      	bne.n	80042c8 <UART_Receive_IT+0x82>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	691b      	ldr	r3, [r3, #16]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d106      	bne.n	80042c8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	b2da      	uxtb	r2, r3
 80042c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042c4:	701a      	strb	r2, [r3, #0]
 80042c6:	e008      	b.n	80042da <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	b2db      	uxtb	r3, r3
 80042d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80042d4:	b2da      	uxtb	r2, r3
 80042d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042d8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042de:	1c5a      	adds	r2, r3, #1
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80042e8:	b29b      	uxth	r3, r3
 80042ea:	3b01      	subs	r3, #1
 80042ec:	b29b      	uxth	r3, r3
 80042ee:	687a      	ldr	r2, [r7, #4]
 80042f0:	4619      	mov	r1, r3
 80042f2:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d15d      	bne.n	80043b4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	68da      	ldr	r2, [r3, #12]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f022 0220 	bic.w	r2, r2, #32
 8004306:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	68da      	ldr	r2, [r3, #12]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004316:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	695a      	ldr	r2, [r3, #20]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f022 0201 	bic.w	r2, r2, #1
 8004326:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2220      	movs	r2, #32
 800432c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2200      	movs	r2, #0
 8004334:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800433a:	2b01      	cmp	r3, #1
 800433c:	d135      	bne.n	80043aa <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2200      	movs	r2, #0
 8004342:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	330c      	adds	r3, #12
 800434a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	e853 3f00 	ldrex	r3, [r3]
 8004352:	613b      	str	r3, [r7, #16]
   return(result);
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	f023 0310 	bic.w	r3, r3, #16
 800435a:	627b      	str	r3, [r7, #36]	@ 0x24
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	330c      	adds	r3, #12
 8004362:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004364:	623a      	str	r2, [r7, #32]
 8004366:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004368:	69f9      	ldr	r1, [r7, #28]
 800436a:	6a3a      	ldr	r2, [r7, #32]
 800436c:	e841 2300 	strex	r3, r2, [r1]
 8004370:	61bb      	str	r3, [r7, #24]
   return(result);
 8004372:	69bb      	ldr	r3, [r7, #24]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d1e5      	bne.n	8004344 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 0310 	and.w	r3, r3, #16
 8004382:	2b10      	cmp	r3, #16
 8004384:	d10a      	bne.n	800439c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004386:	2300      	movs	r3, #0
 8004388:	60fb      	str	r3, [r7, #12]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	60fb      	str	r3, [r7, #12]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	60fb      	str	r3, [r7, #12]
 800439a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80043a0:	4619      	mov	r1, r3
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f7ff fca4 	bl	8003cf0 <HAL_UARTEx_RxEventCallback>
 80043a8:	e002      	b.n	80043b0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f7ff fc82 	bl	8003cb4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80043b0:	2300      	movs	r3, #0
 80043b2:	e002      	b.n	80043ba <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80043b4:	2300      	movs	r3, #0
 80043b6:	e000      	b.n	80043ba <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80043b8:	2302      	movs	r3, #2
  }
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	3730      	adds	r7, #48	@ 0x30
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}
	...

080043c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043c8:	b0c0      	sub	sp, #256	@ 0x100
 80043ca:	af00      	add	r7, sp, #0
 80043cc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	691b      	ldr	r3, [r3, #16]
 80043d8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80043dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043e0:	68d9      	ldr	r1, [r3, #12]
 80043e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043e6:	681a      	ldr	r2, [r3, #0]
 80043e8:	ea40 0301 	orr.w	r3, r0, r1
 80043ec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80043ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043f2:	689a      	ldr	r2, [r3, #8]
 80043f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043f8:	691b      	ldr	r3, [r3, #16]
 80043fa:	431a      	orrs	r2, r3
 80043fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004400:	695b      	ldr	r3, [r3, #20]
 8004402:	431a      	orrs	r2, r3
 8004404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004408:	69db      	ldr	r3, [r3, #28]
 800440a:	4313      	orrs	r3, r2
 800440c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004410:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800441c:	f021 010c 	bic.w	r1, r1, #12
 8004420:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004424:	681a      	ldr	r2, [r3, #0]
 8004426:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800442a:	430b      	orrs	r3, r1
 800442c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800442e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	695b      	ldr	r3, [r3, #20]
 8004436:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800443a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800443e:	6999      	ldr	r1, [r3, #24]
 8004440:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004444:	681a      	ldr	r2, [r3, #0]
 8004446:	ea40 0301 	orr.w	r3, r0, r1
 800444a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800444c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	4b8f      	ldr	r3, [pc, #572]	@ (8004690 <UART_SetConfig+0x2cc>)
 8004454:	429a      	cmp	r2, r3
 8004456:	d005      	beq.n	8004464 <UART_SetConfig+0xa0>
 8004458:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	4b8d      	ldr	r3, [pc, #564]	@ (8004694 <UART_SetConfig+0x2d0>)
 8004460:	429a      	cmp	r2, r3
 8004462:	d104      	bne.n	800446e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004464:	f7fe fc92 	bl	8002d8c <HAL_RCC_GetPCLK2Freq>
 8004468:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800446c:	e003      	b.n	8004476 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800446e:	f7fe fc79 	bl	8002d64 <HAL_RCC_GetPCLK1Freq>
 8004472:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004476:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800447a:	69db      	ldr	r3, [r3, #28]
 800447c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004480:	f040 810c 	bne.w	800469c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004484:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004488:	2200      	movs	r2, #0
 800448a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800448e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004492:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004496:	4622      	mov	r2, r4
 8004498:	462b      	mov	r3, r5
 800449a:	1891      	adds	r1, r2, r2
 800449c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800449e:	415b      	adcs	r3, r3
 80044a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80044a2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80044a6:	4621      	mov	r1, r4
 80044a8:	eb12 0801 	adds.w	r8, r2, r1
 80044ac:	4629      	mov	r1, r5
 80044ae:	eb43 0901 	adc.w	r9, r3, r1
 80044b2:	f04f 0200 	mov.w	r2, #0
 80044b6:	f04f 0300 	mov.w	r3, #0
 80044ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80044be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80044c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80044c6:	4690      	mov	r8, r2
 80044c8:	4699      	mov	r9, r3
 80044ca:	4623      	mov	r3, r4
 80044cc:	eb18 0303 	adds.w	r3, r8, r3
 80044d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80044d4:	462b      	mov	r3, r5
 80044d6:	eb49 0303 	adc.w	r3, r9, r3
 80044da:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80044de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	2200      	movs	r2, #0
 80044e6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80044ea:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80044ee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80044f2:	460b      	mov	r3, r1
 80044f4:	18db      	adds	r3, r3, r3
 80044f6:	653b      	str	r3, [r7, #80]	@ 0x50
 80044f8:	4613      	mov	r3, r2
 80044fa:	eb42 0303 	adc.w	r3, r2, r3
 80044fe:	657b      	str	r3, [r7, #84]	@ 0x54
 8004500:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004504:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004508:	f7fb fe66 	bl	80001d8 <__aeabi_uldivmod>
 800450c:	4602      	mov	r2, r0
 800450e:	460b      	mov	r3, r1
 8004510:	4b61      	ldr	r3, [pc, #388]	@ (8004698 <UART_SetConfig+0x2d4>)
 8004512:	fba3 2302 	umull	r2, r3, r3, r2
 8004516:	095b      	lsrs	r3, r3, #5
 8004518:	011c      	lsls	r4, r3, #4
 800451a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800451e:	2200      	movs	r2, #0
 8004520:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004524:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004528:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800452c:	4642      	mov	r2, r8
 800452e:	464b      	mov	r3, r9
 8004530:	1891      	adds	r1, r2, r2
 8004532:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004534:	415b      	adcs	r3, r3
 8004536:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004538:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800453c:	4641      	mov	r1, r8
 800453e:	eb12 0a01 	adds.w	sl, r2, r1
 8004542:	4649      	mov	r1, r9
 8004544:	eb43 0b01 	adc.w	fp, r3, r1
 8004548:	f04f 0200 	mov.w	r2, #0
 800454c:	f04f 0300 	mov.w	r3, #0
 8004550:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004554:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004558:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800455c:	4692      	mov	sl, r2
 800455e:	469b      	mov	fp, r3
 8004560:	4643      	mov	r3, r8
 8004562:	eb1a 0303 	adds.w	r3, sl, r3
 8004566:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800456a:	464b      	mov	r3, r9
 800456c:	eb4b 0303 	adc.w	r3, fp, r3
 8004570:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004574:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	2200      	movs	r2, #0
 800457c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004580:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004584:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004588:	460b      	mov	r3, r1
 800458a:	18db      	adds	r3, r3, r3
 800458c:	643b      	str	r3, [r7, #64]	@ 0x40
 800458e:	4613      	mov	r3, r2
 8004590:	eb42 0303 	adc.w	r3, r2, r3
 8004594:	647b      	str	r3, [r7, #68]	@ 0x44
 8004596:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800459a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800459e:	f7fb fe1b 	bl	80001d8 <__aeabi_uldivmod>
 80045a2:	4602      	mov	r2, r0
 80045a4:	460b      	mov	r3, r1
 80045a6:	4611      	mov	r1, r2
 80045a8:	4b3b      	ldr	r3, [pc, #236]	@ (8004698 <UART_SetConfig+0x2d4>)
 80045aa:	fba3 2301 	umull	r2, r3, r3, r1
 80045ae:	095b      	lsrs	r3, r3, #5
 80045b0:	2264      	movs	r2, #100	@ 0x64
 80045b2:	fb02 f303 	mul.w	r3, r2, r3
 80045b6:	1acb      	subs	r3, r1, r3
 80045b8:	00db      	lsls	r3, r3, #3
 80045ba:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80045be:	4b36      	ldr	r3, [pc, #216]	@ (8004698 <UART_SetConfig+0x2d4>)
 80045c0:	fba3 2302 	umull	r2, r3, r3, r2
 80045c4:	095b      	lsrs	r3, r3, #5
 80045c6:	005b      	lsls	r3, r3, #1
 80045c8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80045cc:	441c      	add	r4, r3
 80045ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80045d2:	2200      	movs	r2, #0
 80045d4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80045d8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80045dc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80045e0:	4642      	mov	r2, r8
 80045e2:	464b      	mov	r3, r9
 80045e4:	1891      	adds	r1, r2, r2
 80045e6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80045e8:	415b      	adcs	r3, r3
 80045ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80045ec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80045f0:	4641      	mov	r1, r8
 80045f2:	1851      	adds	r1, r2, r1
 80045f4:	6339      	str	r1, [r7, #48]	@ 0x30
 80045f6:	4649      	mov	r1, r9
 80045f8:	414b      	adcs	r3, r1
 80045fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80045fc:	f04f 0200 	mov.w	r2, #0
 8004600:	f04f 0300 	mov.w	r3, #0
 8004604:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004608:	4659      	mov	r1, fp
 800460a:	00cb      	lsls	r3, r1, #3
 800460c:	4651      	mov	r1, sl
 800460e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004612:	4651      	mov	r1, sl
 8004614:	00ca      	lsls	r2, r1, #3
 8004616:	4610      	mov	r0, r2
 8004618:	4619      	mov	r1, r3
 800461a:	4603      	mov	r3, r0
 800461c:	4642      	mov	r2, r8
 800461e:	189b      	adds	r3, r3, r2
 8004620:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004624:	464b      	mov	r3, r9
 8004626:	460a      	mov	r2, r1
 8004628:	eb42 0303 	adc.w	r3, r2, r3
 800462c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004630:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	2200      	movs	r2, #0
 8004638:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800463c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004640:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004644:	460b      	mov	r3, r1
 8004646:	18db      	adds	r3, r3, r3
 8004648:	62bb      	str	r3, [r7, #40]	@ 0x28
 800464a:	4613      	mov	r3, r2
 800464c:	eb42 0303 	adc.w	r3, r2, r3
 8004650:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004652:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004656:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800465a:	f7fb fdbd 	bl	80001d8 <__aeabi_uldivmod>
 800465e:	4602      	mov	r2, r0
 8004660:	460b      	mov	r3, r1
 8004662:	4b0d      	ldr	r3, [pc, #52]	@ (8004698 <UART_SetConfig+0x2d4>)
 8004664:	fba3 1302 	umull	r1, r3, r3, r2
 8004668:	095b      	lsrs	r3, r3, #5
 800466a:	2164      	movs	r1, #100	@ 0x64
 800466c:	fb01 f303 	mul.w	r3, r1, r3
 8004670:	1ad3      	subs	r3, r2, r3
 8004672:	00db      	lsls	r3, r3, #3
 8004674:	3332      	adds	r3, #50	@ 0x32
 8004676:	4a08      	ldr	r2, [pc, #32]	@ (8004698 <UART_SetConfig+0x2d4>)
 8004678:	fba2 2303 	umull	r2, r3, r2, r3
 800467c:	095b      	lsrs	r3, r3, #5
 800467e:	f003 0207 	and.w	r2, r3, #7
 8004682:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4422      	add	r2, r4
 800468a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800468c:	e106      	b.n	800489c <UART_SetConfig+0x4d8>
 800468e:	bf00      	nop
 8004690:	40011000 	.word	0x40011000
 8004694:	40011400 	.word	0x40011400
 8004698:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800469c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80046a0:	2200      	movs	r2, #0
 80046a2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80046a6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80046aa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80046ae:	4642      	mov	r2, r8
 80046b0:	464b      	mov	r3, r9
 80046b2:	1891      	adds	r1, r2, r2
 80046b4:	6239      	str	r1, [r7, #32]
 80046b6:	415b      	adcs	r3, r3
 80046b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80046ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80046be:	4641      	mov	r1, r8
 80046c0:	1854      	adds	r4, r2, r1
 80046c2:	4649      	mov	r1, r9
 80046c4:	eb43 0501 	adc.w	r5, r3, r1
 80046c8:	f04f 0200 	mov.w	r2, #0
 80046cc:	f04f 0300 	mov.w	r3, #0
 80046d0:	00eb      	lsls	r3, r5, #3
 80046d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80046d6:	00e2      	lsls	r2, r4, #3
 80046d8:	4614      	mov	r4, r2
 80046da:	461d      	mov	r5, r3
 80046dc:	4643      	mov	r3, r8
 80046de:	18e3      	adds	r3, r4, r3
 80046e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80046e4:	464b      	mov	r3, r9
 80046e6:	eb45 0303 	adc.w	r3, r5, r3
 80046ea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80046ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	2200      	movs	r2, #0
 80046f6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80046fa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80046fe:	f04f 0200 	mov.w	r2, #0
 8004702:	f04f 0300 	mov.w	r3, #0
 8004706:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800470a:	4629      	mov	r1, r5
 800470c:	008b      	lsls	r3, r1, #2
 800470e:	4621      	mov	r1, r4
 8004710:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004714:	4621      	mov	r1, r4
 8004716:	008a      	lsls	r2, r1, #2
 8004718:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800471c:	f7fb fd5c 	bl	80001d8 <__aeabi_uldivmod>
 8004720:	4602      	mov	r2, r0
 8004722:	460b      	mov	r3, r1
 8004724:	4b60      	ldr	r3, [pc, #384]	@ (80048a8 <UART_SetConfig+0x4e4>)
 8004726:	fba3 2302 	umull	r2, r3, r3, r2
 800472a:	095b      	lsrs	r3, r3, #5
 800472c:	011c      	lsls	r4, r3, #4
 800472e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004732:	2200      	movs	r2, #0
 8004734:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004738:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800473c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004740:	4642      	mov	r2, r8
 8004742:	464b      	mov	r3, r9
 8004744:	1891      	adds	r1, r2, r2
 8004746:	61b9      	str	r1, [r7, #24]
 8004748:	415b      	adcs	r3, r3
 800474a:	61fb      	str	r3, [r7, #28]
 800474c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004750:	4641      	mov	r1, r8
 8004752:	1851      	adds	r1, r2, r1
 8004754:	6139      	str	r1, [r7, #16]
 8004756:	4649      	mov	r1, r9
 8004758:	414b      	adcs	r3, r1
 800475a:	617b      	str	r3, [r7, #20]
 800475c:	f04f 0200 	mov.w	r2, #0
 8004760:	f04f 0300 	mov.w	r3, #0
 8004764:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004768:	4659      	mov	r1, fp
 800476a:	00cb      	lsls	r3, r1, #3
 800476c:	4651      	mov	r1, sl
 800476e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004772:	4651      	mov	r1, sl
 8004774:	00ca      	lsls	r2, r1, #3
 8004776:	4610      	mov	r0, r2
 8004778:	4619      	mov	r1, r3
 800477a:	4603      	mov	r3, r0
 800477c:	4642      	mov	r2, r8
 800477e:	189b      	adds	r3, r3, r2
 8004780:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004784:	464b      	mov	r3, r9
 8004786:	460a      	mov	r2, r1
 8004788:	eb42 0303 	adc.w	r3, r2, r3
 800478c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004790:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	2200      	movs	r2, #0
 8004798:	67bb      	str	r3, [r7, #120]	@ 0x78
 800479a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800479c:	f04f 0200 	mov.w	r2, #0
 80047a0:	f04f 0300 	mov.w	r3, #0
 80047a4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80047a8:	4649      	mov	r1, r9
 80047aa:	008b      	lsls	r3, r1, #2
 80047ac:	4641      	mov	r1, r8
 80047ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80047b2:	4641      	mov	r1, r8
 80047b4:	008a      	lsls	r2, r1, #2
 80047b6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80047ba:	f7fb fd0d 	bl	80001d8 <__aeabi_uldivmod>
 80047be:	4602      	mov	r2, r0
 80047c0:	460b      	mov	r3, r1
 80047c2:	4611      	mov	r1, r2
 80047c4:	4b38      	ldr	r3, [pc, #224]	@ (80048a8 <UART_SetConfig+0x4e4>)
 80047c6:	fba3 2301 	umull	r2, r3, r3, r1
 80047ca:	095b      	lsrs	r3, r3, #5
 80047cc:	2264      	movs	r2, #100	@ 0x64
 80047ce:	fb02 f303 	mul.w	r3, r2, r3
 80047d2:	1acb      	subs	r3, r1, r3
 80047d4:	011b      	lsls	r3, r3, #4
 80047d6:	3332      	adds	r3, #50	@ 0x32
 80047d8:	4a33      	ldr	r2, [pc, #204]	@ (80048a8 <UART_SetConfig+0x4e4>)
 80047da:	fba2 2303 	umull	r2, r3, r2, r3
 80047de:	095b      	lsrs	r3, r3, #5
 80047e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80047e4:	441c      	add	r4, r3
 80047e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80047ea:	2200      	movs	r2, #0
 80047ec:	673b      	str	r3, [r7, #112]	@ 0x70
 80047ee:	677a      	str	r2, [r7, #116]	@ 0x74
 80047f0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80047f4:	4642      	mov	r2, r8
 80047f6:	464b      	mov	r3, r9
 80047f8:	1891      	adds	r1, r2, r2
 80047fa:	60b9      	str	r1, [r7, #8]
 80047fc:	415b      	adcs	r3, r3
 80047fe:	60fb      	str	r3, [r7, #12]
 8004800:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004804:	4641      	mov	r1, r8
 8004806:	1851      	adds	r1, r2, r1
 8004808:	6039      	str	r1, [r7, #0]
 800480a:	4649      	mov	r1, r9
 800480c:	414b      	adcs	r3, r1
 800480e:	607b      	str	r3, [r7, #4]
 8004810:	f04f 0200 	mov.w	r2, #0
 8004814:	f04f 0300 	mov.w	r3, #0
 8004818:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800481c:	4659      	mov	r1, fp
 800481e:	00cb      	lsls	r3, r1, #3
 8004820:	4651      	mov	r1, sl
 8004822:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004826:	4651      	mov	r1, sl
 8004828:	00ca      	lsls	r2, r1, #3
 800482a:	4610      	mov	r0, r2
 800482c:	4619      	mov	r1, r3
 800482e:	4603      	mov	r3, r0
 8004830:	4642      	mov	r2, r8
 8004832:	189b      	adds	r3, r3, r2
 8004834:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004836:	464b      	mov	r3, r9
 8004838:	460a      	mov	r2, r1
 800483a:	eb42 0303 	adc.w	r3, r2, r3
 800483e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004840:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	2200      	movs	r2, #0
 8004848:	663b      	str	r3, [r7, #96]	@ 0x60
 800484a:	667a      	str	r2, [r7, #100]	@ 0x64
 800484c:	f04f 0200 	mov.w	r2, #0
 8004850:	f04f 0300 	mov.w	r3, #0
 8004854:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004858:	4649      	mov	r1, r9
 800485a:	008b      	lsls	r3, r1, #2
 800485c:	4641      	mov	r1, r8
 800485e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004862:	4641      	mov	r1, r8
 8004864:	008a      	lsls	r2, r1, #2
 8004866:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800486a:	f7fb fcb5 	bl	80001d8 <__aeabi_uldivmod>
 800486e:	4602      	mov	r2, r0
 8004870:	460b      	mov	r3, r1
 8004872:	4b0d      	ldr	r3, [pc, #52]	@ (80048a8 <UART_SetConfig+0x4e4>)
 8004874:	fba3 1302 	umull	r1, r3, r3, r2
 8004878:	095b      	lsrs	r3, r3, #5
 800487a:	2164      	movs	r1, #100	@ 0x64
 800487c:	fb01 f303 	mul.w	r3, r1, r3
 8004880:	1ad3      	subs	r3, r2, r3
 8004882:	011b      	lsls	r3, r3, #4
 8004884:	3332      	adds	r3, #50	@ 0x32
 8004886:	4a08      	ldr	r2, [pc, #32]	@ (80048a8 <UART_SetConfig+0x4e4>)
 8004888:	fba2 2303 	umull	r2, r3, r2, r3
 800488c:	095b      	lsrs	r3, r3, #5
 800488e:	f003 020f 	and.w	r2, r3, #15
 8004892:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4422      	add	r2, r4
 800489a:	609a      	str	r2, [r3, #8]
}
 800489c:	bf00      	nop
 800489e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80048a2:	46bd      	mov	sp, r7
 80048a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048a8:	51eb851f 	.word	0x51eb851f

080048ac <memset>:
 80048ac:	4402      	add	r2, r0
 80048ae:	4603      	mov	r3, r0
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d100      	bne.n	80048b6 <memset+0xa>
 80048b4:	4770      	bx	lr
 80048b6:	f803 1b01 	strb.w	r1, [r3], #1
 80048ba:	e7f9      	b.n	80048b0 <memset+0x4>

080048bc <__libc_init_array>:
 80048bc:	b570      	push	{r4, r5, r6, lr}
 80048be:	4d0d      	ldr	r5, [pc, #52]	@ (80048f4 <__libc_init_array+0x38>)
 80048c0:	4c0d      	ldr	r4, [pc, #52]	@ (80048f8 <__libc_init_array+0x3c>)
 80048c2:	1b64      	subs	r4, r4, r5
 80048c4:	10a4      	asrs	r4, r4, #2
 80048c6:	2600      	movs	r6, #0
 80048c8:	42a6      	cmp	r6, r4
 80048ca:	d109      	bne.n	80048e0 <__libc_init_array+0x24>
 80048cc:	4d0b      	ldr	r5, [pc, #44]	@ (80048fc <__libc_init_array+0x40>)
 80048ce:	4c0c      	ldr	r4, [pc, #48]	@ (8004900 <__libc_init_array+0x44>)
 80048d0:	f000 f818 	bl	8004904 <_init>
 80048d4:	1b64      	subs	r4, r4, r5
 80048d6:	10a4      	asrs	r4, r4, #2
 80048d8:	2600      	movs	r6, #0
 80048da:	42a6      	cmp	r6, r4
 80048dc:	d105      	bne.n	80048ea <__libc_init_array+0x2e>
 80048de:	bd70      	pop	{r4, r5, r6, pc}
 80048e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80048e4:	4798      	blx	r3
 80048e6:	3601      	adds	r6, #1
 80048e8:	e7ee      	b.n	80048c8 <__libc_init_array+0xc>
 80048ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80048ee:	4798      	blx	r3
 80048f0:	3601      	adds	r6, #1
 80048f2:	e7f2      	b.n	80048da <__libc_init_array+0x1e>
 80048f4:	08004944 	.word	0x08004944
 80048f8:	08004944 	.word	0x08004944
 80048fc:	08004944 	.word	0x08004944
 8004900:	08004948 	.word	0x08004948

08004904 <_init>:
 8004904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004906:	bf00      	nop
 8004908:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800490a:	bc08      	pop	{r3}
 800490c:	469e      	mov	lr, r3
 800490e:	4770      	bx	lr

08004910 <_fini>:
 8004910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004912:	bf00      	nop
 8004914:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004916:	bc08      	pop	{r3}
 8004918:	469e      	mov	lr, r3
 800491a:	4770      	bx	lr
