
RTOS_STM32_US_Drive.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ab0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08007c50  08007c50  00008c50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d0c  08007d0c  00009060  2**0
                  CONTENTS
  4 .ARM          00000008  08007d0c  08007d0c  00008d0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007d14  08007d14  00009060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d14  08007d14  00008d14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007d18  08007d18  00008d18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08007d1c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004d34  20000060  08007d7c  00009060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004d94  08007d7c  00009d94  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b1c2  00000000  00000000  00009090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e4a  00000000  00000000  00024252  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015b0  00000000  00000000  000280a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010c1  00000000  00000000  00029650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000194eb  00000000  00000000  0002a711  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018918  00000000  00000000  00043bfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099037  00000000  00000000  0005c514  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f554b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c78  00000000  00000000  000f5590  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000fb208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007c38 	.word	0x08007c38

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	08007c38 	.word	0x08007c38

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001f4:	f000 b96a 	b.w	80004cc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	460c      	mov	r4, r1
 8000218:	2b00      	cmp	r3, #0
 800021a:	d14e      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021c:	4694      	mov	ip, r2
 800021e:	458c      	cmp	ip, r1
 8000220:	4686      	mov	lr, r0
 8000222:	fab2 f282 	clz	r2, r2
 8000226:	d962      	bls.n	80002ee <__udivmoddi4+0xde>
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0320 	rsb	r3, r2, #32
 800022e:	4091      	lsls	r1, r2
 8000230:	fa20 f303 	lsr.w	r3, r0, r3
 8000234:	fa0c fc02 	lsl.w	ip, ip, r2
 8000238:	4319      	orrs	r1, r3
 800023a:	fa00 fe02 	lsl.w	lr, r0, r2
 800023e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000242:	fa1f f68c 	uxth.w	r6, ip
 8000246:	fbb1 f4f7 	udiv	r4, r1, r7
 800024a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800024e:	fb07 1114 	mls	r1, r7, r4, r1
 8000252:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000256:	fb04 f106 	mul.w	r1, r4, r6
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000266:	f080 8112 	bcs.w	800048e <__udivmoddi4+0x27e>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 810f 	bls.w	800048e <__udivmoddi4+0x27e>
 8000270:	3c02      	subs	r4, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a59      	subs	r1, r3, r1
 8000276:	fa1f f38e 	uxth.w	r3, lr
 800027a:	fbb1 f0f7 	udiv	r0, r1, r7
 800027e:	fb07 1110 	mls	r1, r7, r0, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb00 f606 	mul.w	r6, r0, r6
 800028a:	429e      	cmp	r6, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x94>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000296:	f080 80fc 	bcs.w	8000492 <__udivmoddi4+0x282>
 800029a:	429e      	cmp	r6, r3
 800029c:	f240 80f9 	bls.w	8000492 <__udivmoddi4+0x282>
 80002a0:	4463      	add	r3, ip
 80002a2:	3802      	subs	r0, #2
 80002a4:	1b9b      	subs	r3, r3, r6
 80002a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002aa:	2100      	movs	r1, #0
 80002ac:	b11d      	cbz	r5, 80002b6 <__udivmoddi4+0xa6>
 80002ae:	40d3      	lsrs	r3, r2
 80002b0:	2200      	movs	r2, #0
 80002b2:	e9c5 3200 	strd	r3, r2, [r5]
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d905      	bls.n	80002ca <__udivmoddi4+0xba>
 80002be:	b10d      	cbz	r5, 80002c4 <__udivmoddi4+0xb4>
 80002c0:	e9c5 0100 	strd	r0, r1, [r5]
 80002c4:	2100      	movs	r1, #0
 80002c6:	4608      	mov	r0, r1
 80002c8:	e7f5      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ca:	fab3 f183 	clz	r1, r3
 80002ce:	2900      	cmp	r1, #0
 80002d0:	d146      	bne.n	8000360 <__udivmoddi4+0x150>
 80002d2:	42a3      	cmp	r3, r4
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xcc>
 80002d6:	4290      	cmp	r0, r2
 80002d8:	f0c0 80f0 	bcc.w	80004bc <__udivmoddi4+0x2ac>
 80002dc:	1a86      	subs	r6, r0, r2
 80002de:	eb64 0303 	sbc.w	r3, r4, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	2d00      	cmp	r5, #0
 80002e6:	d0e6      	beq.n	80002b6 <__udivmoddi4+0xa6>
 80002e8:	e9c5 6300 	strd	r6, r3, [r5]
 80002ec:	e7e3      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x204>
 80002f4:	eba1 040c 	sub.w	r4, r1, ip
 80002f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002fc:	fa1f f78c 	uxth.w	r7, ip
 8000300:	2101      	movs	r1, #1
 8000302:	fbb4 f6f8 	udiv	r6, r4, r8
 8000306:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030a:	fb08 4416 	mls	r4, r8, r6, r4
 800030e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000312:	fb07 f006 	mul.w	r0, r7, r6
 8000316:	4298      	cmp	r0, r3
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x11c>
 800031a:	eb1c 0303 	adds.w	r3, ip, r3
 800031e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x11a>
 8000324:	4298      	cmp	r0, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 800032a:	4626      	mov	r6, r4
 800032c:	1a1c      	subs	r4, r3, r0
 800032e:	fa1f f38e 	uxth.w	r3, lr
 8000332:	fbb4 f0f8 	udiv	r0, r4, r8
 8000336:	fb08 4410 	mls	r4, r8, r0, r4
 800033a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033e:	fb00 f707 	mul.w	r7, r0, r7
 8000342:	429f      	cmp	r7, r3
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x148>
 8000346:	eb1c 0303 	adds.w	r3, ip, r3
 800034a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x146>
 8000350:	429f      	cmp	r7, r3
 8000352:	f200 80b0 	bhi.w	80004b6 <__udivmoddi4+0x2a6>
 8000356:	4620      	mov	r0, r4
 8000358:	1bdb      	subs	r3, r3, r7
 800035a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800035e:	e7a5      	b.n	80002ac <__udivmoddi4+0x9c>
 8000360:	f1c1 0620 	rsb	r6, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 f706 	lsr.w	r7, r2, r6
 800036a:	431f      	orrs	r7, r3
 800036c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000370:	fa04 f301 	lsl.w	r3, r4, r1
 8000374:	ea43 030c 	orr.w	r3, r3, ip
 8000378:	40f4      	lsrs	r4, r6
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	0c38      	lsrs	r0, r7, #16
 8000380:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000384:	fbb4 fef0 	udiv	lr, r4, r0
 8000388:	fa1f fc87 	uxth.w	ip, r7
 800038c:	fb00 441e 	mls	r4, r0, lr, r4
 8000390:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000394:	fb0e f90c 	mul.w	r9, lr, ip
 8000398:	45a1      	cmp	r9, r4
 800039a:	fa02 f201 	lsl.w	r2, r2, r1
 800039e:	d90a      	bls.n	80003b6 <__udivmoddi4+0x1a6>
 80003a0:	193c      	adds	r4, r7, r4
 80003a2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003a6:	f080 8084 	bcs.w	80004b2 <__udivmoddi4+0x2a2>
 80003aa:	45a1      	cmp	r9, r4
 80003ac:	f240 8081 	bls.w	80004b2 <__udivmoddi4+0x2a2>
 80003b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003b4:	443c      	add	r4, r7
 80003b6:	eba4 0409 	sub.w	r4, r4, r9
 80003ba:	fa1f f983 	uxth.w	r9, r3
 80003be:	fbb4 f3f0 	udiv	r3, r4, r0
 80003c2:	fb00 4413 	mls	r4, r0, r3, r4
 80003c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d907      	bls.n	80003e2 <__udivmoddi4+0x1d2>
 80003d2:	193c      	adds	r4, r7, r4
 80003d4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003d8:	d267      	bcs.n	80004aa <__udivmoddi4+0x29a>
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d965      	bls.n	80004aa <__udivmoddi4+0x29a>
 80003de:	3b02      	subs	r3, #2
 80003e0:	443c      	add	r4, r7
 80003e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003e6:	fba0 9302 	umull	r9, r3, r0, r2
 80003ea:	eba4 040c 	sub.w	r4, r4, ip
 80003ee:	429c      	cmp	r4, r3
 80003f0:	46ce      	mov	lr, r9
 80003f2:	469c      	mov	ip, r3
 80003f4:	d351      	bcc.n	800049a <__udivmoddi4+0x28a>
 80003f6:	d04e      	beq.n	8000496 <__udivmoddi4+0x286>
 80003f8:	b155      	cbz	r5, 8000410 <__udivmoddi4+0x200>
 80003fa:	ebb8 030e 	subs.w	r3, r8, lr
 80003fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000402:	fa04 f606 	lsl.w	r6, r4, r6
 8000406:	40cb      	lsrs	r3, r1
 8000408:	431e      	orrs	r6, r3
 800040a:	40cc      	lsrs	r4, r1
 800040c:	e9c5 6400 	strd	r6, r4, [r5]
 8000410:	2100      	movs	r1, #0
 8000412:	e750      	b.n	80002b6 <__udivmoddi4+0xa6>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f103 	lsr.w	r1, r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa24 f303 	lsr.w	r3, r4, r3
 8000424:	4094      	lsls	r4, r2
 8000426:	430c      	orrs	r4, r1
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000430:	fa1f f78c 	uxth.w	r7, ip
 8000434:	fbb3 f0f8 	udiv	r0, r3, r8
 8000438:	fb08 3110 	mls	r1, r8, r0, r3
 800043c:	0c23      	lsrs	r3, r4, #16
 800043e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000442:	fb00 f107 	mul.w	r1, r0, r7
 8000446:	4299      	cmp	r1, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x24c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000452:	d22c      	bcs.n	80004ae <__udivmoddi4+0x29e>
 8000454:	4299      	cmp	r1, r3
 8000456:	d92a      	bls.n	80004ae <__udivmoddi4+0x29e>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b2a4      	uxth	r4, r4
 8000460:	fbb3 f1f8 	udiv	r1, r3, r8
 8000464:	fb08 3311 	mls	r3, r8, r1, r3
 8000468:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800046c:	fb01 f307 	mul.w	r3, r1, r7
 8000470:	42a3      	cmp	r3, r4
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x276>
 8000474:	eb1c 0404 	adds.w	r4, ip, r4
 8000478:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800047c:	d213      	bcs.n	80004a6 <__udivmoddi4+0x296>
 800047e:	42a3      	cmp	r3, r4
 8000480:	d911      	bls.n	80004a6 <__udivmoddi4+0x296>
 8000482:	3902      	subs	r1, #2
 8000484:	4464      	add	r4, ip
 8000486:	1ae4      	subs	r4, r4, r3
 8000488:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800048c:	e739      	b.n	8000302 <__udivmoddi4+0xf2>
 800048e:	4604      	mov	r4, r0
 8000490:	e6f0      	b.n	8000274 <__udivmoddi4+0x64>
 8000492:	4608      	mov	r0, r1
 8000494:	e706      	b.n	80002a4 <__udivmoddi4+0x94>
 8000496:	45c8      	cmp	r8, r9
 8000498:	d2ae      	bcs.n	80003f8 <__udivmoddi4+0x1e8>
 800049a:	ebb9 0e02 	subs.w	lr, r9, r2
 800049e:	eb63 0c07 	sbc.w	ip, r3, r7
 80004a2:	3801      	subs	r0, #1
 80004a4:	e7a8      	b.n	80003f8 <__udivmoddi4+0x1e8>
 80004a6:	4631      	mov	r1, r6
 80004a8:	e7ed      	b.n	8000486 <__udivmoddi4+0x276>
 80004aa:	4603      	mov	r3, r0
 80004ac:	e799      	b.n	80003e2 <__udivmoddi4+0x1d2>
 80004ae:	4630      	mov	r0, r6
 80004b0:	e7d4      	b.n	800045c <__udivmoddi4+0x24c>
 80004b2:	46d6      	mov	lr, sl
 80004b4:	e77f      	b.n	80003b6 <__udivmoddi4+0x1a6>
 80004b6:	4463      	add	r3, ip
 80004b8:	3802      	subs	r0, #2
 80004ba:	e74d      	b.n	8000358 <__udivmoddi4+0x148>
 80004bc:	4606      	mov	r6, r0
 80004be:	4623      	mov	r3, r4
 80004c0:	4608      	mov	r0, r1
 80004c2:	e70f      	b.n	80002e4 <__udivmoddi4+0xd4>
 80004c4:	3e02      	subs	r6, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	e730      	b.n	800032c <__udivmoddi4+0x11c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <delay_us>:
#include "delay.h"


void delay_us(uint16_t us)
{
 80004d0:	b480      	push	{r7}
 80004d2:	b083      	sub	sp, #12
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	4603      	mov	r3, r0
 80004d8:	80fb      	strh	r3, [r7, #6]
  __HAL_TIM_SET_COUNTER(&htim10, 0);
 80004da:	4b09      	ldr	r3, [pc, #36]	@ (8000500 <delay_us+0x30>)
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	2200      	movs	r2, #0
 80004e0:	625a      	str	r2, [r3, #36]	@ 0x24
  while((__HAL_TIM_GET_COUNTER(&htim10)) < us);
 80004e2:	bf00      	nop
 80004e4:	4b06      	ldr	r3, [pc, #24]	@ (8000500 <delay_us+0x30>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80004ea:	88fb      	ldrh	r3, [r7, #6]
 80004ec:	429a      	cmp	r2, r3
 80004ee:	d3f9      	bcc.n	80004e4 <delay_us+0x14>
}
 80004f0:	bf00      	nop
 80004f2:	bf00      	nop
 80004f4:	370c      	adds	r7, #12
 80004f6:	46bd      	mov	sp, r7
 80004f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop
 8000500:	20000190 	.word	0x20000190

08000504 <HCSR04_C>:

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN FunctionPrototypes */

void HCSR04_C(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7, 0);
 8000508:	2200      	movs	r2, #0
 800050a:	2180      	movs	r1, #128	@ 0x80
 800050c:	480e      	ldr	r0, [pc, #56]	@ (8000548 <HCSR04_C+0x44>)
 800050e:	f001 fcf3 	bl	8001ef8 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8000512:	2001      	movs	r0, #1
 8000514:	f001 f9d4 	bl	80018c0 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7, 1);
 8000518:	2201      	movs	r2, #1
 800051a:	2180      	movs	r1, #128	@ 0x80
 800051c:	480a      	ldr	r0, [pc, #40]	@ (8000548 <HCSR04_C+0x44>)
 800051e:	f001 fceb 	bl	8001ef8 <HAL_GPIO_WritePin>
  delay_us(10);
 8000522:	200a      	movs	r0, #10
 8000524:	f7ff ffd4 	bl	80004d0 <delay_us>
  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7, 0);
 8000528:	2200      	movs	r2, #0
 800052a:	2180      	movs	r1, #128	@ 0x80
 800052c:	4806      	ldr	r0, [pc, #24]	@ (8000548 <HCSR04_C+0x44>)
 800052e:	f001 fce3 	bl	8001ef8 <HAL_GPIO_WritePin>
  __HAL_TIM_ENABLE_IT(&htim4, TIM_IT_CC1); // __HAL_TIM_DISABLE_IT(&htim3, TIM_IT_CC1); 와 같이 없어도 되지만.
 8000532:	4b06      	ldr	r3, [pc, #24]	@ (800054c <HCSR04_C+0x48>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	68da      	ldr	r2, [r3, #12]
 8000538:	4b04      	ldr	r3, [pc, #16]	@ (800054c <HCSR04_C+0x48>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	f042 0202 	orr.w	r2, r2, #2
 8000540:	60da      	str	r2, [r3, #12]
}
 8000542:	bf00      	nop
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	40020000 	.word	0x40020000
 800054c:	20000148 	.word	0x20000148

08000550 <HCSR04_L>:
void HCSR04_L(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_2, 0);
 8000554:	2200      	movs	r2, #0
 8000556:	2104      	movs	r1, #4
 8000558:	480e      	ldr	r0, [pc, #56]	@ (8000594 <HCSR04_L+0x44>)
 800055a:	f001 fccd 	bl	8001ef8 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 800055e:	2001      	movs	r0, #1
 8000560:	f001 f9ae 	bl	80018c0 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_2, 1);
 8000564:	2201      	movs	r2, #1
 8000566:	2104      	movs	r1, #4
 8000568:	480a      	ldr	r0, [pc, #40]	@ (8000594 <HCSR04_L+0x44>)
 800056a:	f001 fcc5 	bl	8001ef8 <HAL_GPIO_WritePin>
  delay_us(10);
 800056e:	200a      	movs	r0, #10
 8000570:	f7ff ffae 	bl	80004d0 <delay_us>
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_2, 0);
 8000574:	2200      	movs	r2, #0
 8000576:	2104      	movs	r1, #4
 8000578:	4806      	ldr	r0, [pc, #24]	@ (8000594 <HCSR04_L+0x44>)
 800057a:	f001 fcbd 	bl	8001ef8 <HAL_GPIO_WritePin>
  __HAL_TIM_ENABLE_IT(&htim4, TIM_IT_CC2); // __HAL_TIM_DISABLE_IT(&htim3, TIM_IT_CC1); 와 같이 없어도 되지만.
 800057e:	4b06      	ldr	r3, [pc, #24]	@ (8000598 <HCSR04_L+0x48>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	68da      	ldr	r2, [r3, #12]
 8000584:	4b04      	ldr	r3, [pc, #16]	@ (8000598 <HCSR04_L+0x48>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	f042 0204 	orr.w	r2, r2, #4
 800058c:	60da      	str	r2, [r3, #12]
}
 800058e:	bf00      	nop
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	40020800 	.word	0x40020800
 8000598:	20000148 	.word	0x20000148

0800059c <HCSR04_R>:
void HCSR04_R(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_3, 0);
 80005a0:	2200      	movs	r2, #0
 80005a2:	2108      	movs	r1, #8
 80005a4:	480e      	ldr	r0, [pc, #56]	@ (80005e0 <HCSR04_R+0x44>)
 80005a6:	f001 fca7 	bl	8001ef8 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 80005aa:	2001      	movs	r0, #1
 80005ac:	f001 f988 	bl	80018c0 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_3, 1);
 80005b0:	2201      	movs	r2, #1
 80005b2:	2108      	movs	r1, #8
 80005b4:	480a      	ldr	r0, [pc, #40]	@ (80005e0 <HCSR04_R+0x44>)
 80005b6:	f001 fc9f 	bl	8001ef8 <HAL_GPIO_WritePin>
  delay_us(10);
 80005ba:	200a      	movs	r0, #10
 80005bc:	f7ff ff88 	bl	80004d0 <delay_us>
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_3, 0);
 80005c0:	2200      	movs	r2, #0
 80005c2:	2108      	movs	r1, #8
 80005c4:	4806      	ldr	r0, [pc, #24]	@ (80005e0 <HCSR04_R+0x44>)
 80005c6:	f001 fc97 	bl	8001ef8 <HAL_GPIO_WritePin>
  __HAL_TIM_ENABLE_IT(&htim4, TIM_IT_CC3); // __HAL_TIM_DISABLE_IT(&htim3, TIM_IT_CC1); 와 같이 없어도 되지만.
 80005ca:	4b06      	ldr	r3, [pc, #24]	@ (80005e4 <HCSR04_R+0x48>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	68da      	ldr	r2, [r3, #12]
 80005d0:	4b04      	ldr	r3, [pc, #16]	@ (80005e4 <HCSR04_R+0x48>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	f042 0208 	orr.w	r2, r2, #8
 80005d8:	60da      	str	r2, [r3, #12]
}
 80005da:	bf00      	nop
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	40020800 	.word	0x40020800
 80005e4:	20000148 	.word	0x20000148

080005e8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005ec:	4a0c      	ldr	r2, [pc, #48]	@ (8000620 <MX_FREERTOS_Init+0x38>)
 80005ee:	2100      	movs	r1, #0
 80005f0:	480c      	ldr	r0, [pc, #48]	@ (8000624 <MX_FREERTOS_Init+0x3c>)
 80005f2:	f004 fcd7 	bl	8004fa4 <osThreadNew>
 80005f6:	4603      	mov	r3, r0
 80005f8:	4a0b      	ldr	r2, [pc, #44]	@ (8000628 <MX_FREERTOS_Init+0x40>)
 80005fa:	6013      	str	r3, [r2, #0]

  /* creation of UltraSonic */
  UltraSonicHandle = osThreadNew(UltraSonic_Task, NULL, &UltraSonic_attributes);
 80005fc:	4a0b      	ldr	r2, [pc, #44]	@ (800062c <MX_FREERTOS_Init+0x44>)
 80005fe:	2100      	movs	r1, #0
 8000600:	480b      	ldr	r0, [pc, #44]	@ (8000630 <MX_FREERTOS_Init+0x48>)
 8000602:	f004 fccf 	bl	8004fa4 <osThreadNew>
 8000606:	4603      	mov	r3, r0
 8000608:	4a0a      	ldr	r2, [pc, #40]	@ (8000634 <MX_FREERTOS_Init+0x4c>)
 800060a:	6013      	str	r3, [r2, #0]

  /* creation of Motor */
  MotorHandle = osThreadNew(Car_move, NULL, &Motor_attributes);
 800060c:	4a0a      	ldr	r2, [pc, #40]	@ (8000638 <MX_FREERTOS_Init+0x50>)
 800060e:	2100      	movs	r1, #0
 8000610:	480a      	ldr	r0, [pc, #40]	@ (800063c <MX_FREERTOS_Init+0x54>)
 8000612:	f004 fcc7 	bl	8004fa4 <osThreadNew>
 8000616:	4603      	mov	r3, r0
 8000618:	4a09      	ldr	r2, [pc, #36]	@ (8000640 <MX_FREERTOS_Init+0x58>)
 800061a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800061c:	bf00      	nop
 800061e:	bd80      	pop	{r7, pc}
 8000620:	08007c88 	.word	0x08007c88
 8000624:	08000645 	.word	0x08000645
 8000628:	20000084 	.word	0x20000084
 800062c:	08007cac 	.word	0x08007cac
 8000630:	08000655 	.word	0x08000655
 8000634:	20000088 	.word	0x20000088
 8000638:	08007cd0 	.word	0x08007cd0
 800063c:	080006b9 	.word	0x080006b9
 8000640:	2000008c 	.word	0x2000008c

08000644 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800064c:	2001      	movs	r0, #1
 800064e:	f004 fd3b 	bl	80050c8 <osDelay>
 8000652:	e7fb      	b.n	800064c <StartDefaultTask+0x8>

08000654 <UltraSonic_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_UltraSonic_Task */
void UltraSonic_Task(void *argument)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UltraSonic_Task */
  /* Infinite loop */
  for(;;)
  {
    HCSR04_C();
 800065c:	f7ff ff52 	bl	8000504 <HCSR04_C>
    buffer[0] = distance_1;
 8000660:	4b10      	ldr	r3, [pc, #64]	@ (80006a4 <UltraSonic_Task+0x50>)
 8000662:	781a      	ldrb	r2, [r3, #0]
 8000664:	4b10      	ldr	r3, [pc, #64]	@ (80006a8 <UltraSonic_Task+0x54>)
 8000666:	701a      	strb	r2, [r3, #0]
    HAL_Delay(10);
 8000668:	200a      	movs	r0, #10
 800066a:	f001 f929 	bl	80018c0 <HAL_Delay>
    HCSR04_L();
 800066e:	f7ff ff6f 	bl	8000550 <HCSR04_L>
    buffer[1] = distance_2;
 8000672:	4b0e      	ldr	r3, [pc, #56]	@ (80006ac <UltraSonic_Task+0x58>)
 8000674:	781a      	ldrb	r2, [r3, #0]
 8000676:	4b0c      	ldr	r3, [pc, #48]	@ (80006a8 <UltraSonic_Task+0x54>)
 8000678:	705a      	strb	r2, [r3, #1]
    HAL_Delay(10);
 800067a:	200a      	movs	r0, #10
 800067c:	f001 f920 	bl	80018c0 <HAL_Delay>
    HCSR04_R();
 8000680:	f7ff ff8c 	bl	800059c <HCSR04_R>
    buffer[2] = distance_3;
 8000684:	4b0a      	ldr	r3, [pc, #40]	@ (80006b0 <UltraSonic_Task+0x5c>)
 8000686:	781a      	ldrb	r2, [r3, #0]
 8000688:	4b07      	ldr	r3, [pc, #28]	@ (80006a8 <UltraSonic_Task+0x54>)
 800068a:	709a      	strb	r2, [r3, #2]
    HAL_Delay(10);
 800068c:	200a      	movs	r0, #10
 800068e:	f001 f917 	bl	80018c0 <HAL_Delay>
    __HAL_TIM_SET_COUNTER(&htim4 , 0);
 8000692:	4b08      	ldr	r3, [pc, #32]	@ (80006b4 <UltraSonic_Task+0x60>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	2200      	movs	r2, #0
 8000698:	625a      	str	r2, [r3, #36]	@ 0x24
    osDelay(1);
 800069a:	2001      	movs	r0, #1
 800069c:	f004 fd14 	bl	80050c8 <osDelay>
    HCSR04_C();
 80006a0:	bf00      	nop
 80006a2:	e7db      	b.n	800065c <UltraSonic_Task+0x8>
 80006a4:	200000a5 	.word	0x200000a5
 80006a8:	2000007c 	.word	0x2000007c
 80006ac:	200000a6 	.word	0x200000a6
 80006b0:	200000a7 	.word	0x200000a7
 80006b4:	20000148 	.word	0x20000148

080006b8 <Car_move>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Car_move */
void Car_move(void *argument)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Car_move */
  /* Infinite loop */
  for(;;)
  {
    if(Flag == 0)
 80006c0:	4b7d      	ldr	r3, [pc, #500]	@ (80008b8 <Car_move+0x200>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	f040 808b 	bne.w	80007e0 <Car_move+0x128>
    {
      if(rxData[0] == 75/*'i'*/ || rxData[0] == 51/*'f'*/ || rxData[0] == 19/*'b'*/ || rxData[0] == 99/*'l'*/ || rxData[0] == 147/*'r'*/ || rxData[0] == 155/*'s'*/ || rxData[0] == 123/*'o'*/)
 80006ca:	4b7c      	ldr	r3, [pc, #496]	@ (80008bc <Car_move+0x204>)
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	2b4b      	cmp	r3, #75	@ 0x4b
 80006d0:	d017      	beq.n	8000702 <Car_move+0x4a>
 80006d2:	4b7a      	ldr	r3, [pc, #488]	@ (80008bc <Car_move+0x204>)
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	2b33      	cmp	r3, #51	@ 0x33
 80006d8:	d013      	beq.n	8000702 <Car_move+0x4a>
 80006da:	4b78      	ldr	r3, [pc, #480]	@ (80008bc <Car_move+0x204>)
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	2b13      	cmp	r3, #19
 80006e0:	d00f      	beq.n	8000702 <Car_move+0x4a>
 80006e2:	4b76      	ldr	r3, [pc, #472]	@ (80008bc <Car_move+0x204>)
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	2b63      	cmp	r3, #99	@ 0x63
 80006e8:	d00b      	beq.n	8000702 <Car_move+0x4a>
 80006ea:	4b74      	ldr	r3, [pc, #464]	@ (80008bc <Car_move+0x204>)
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	2b93      	cmp	r3, #147	@ 0x93
 80006f0:	d007      	beq.n	8000702 <Car_move+0x4a>
 80006f2:	4b72      	ldr	r3, [pc, #456]	@ (80008bc <Car_move+0x204>)
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	2b9b      	cmp	r3, #155	@ 0x9b
 80006f8:	d003      	beq.n	8000702 <Car_move+0x4a>
 80006fa:	4b70      	ldr	r3, [pc, #448]	@ (80008bc <Car_move+0x204>)
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	2b7b      	cmp	r3, #123	@ 0x7b
 8000700:	d16e      	bne.n	80007e0 <Car_move+0x128>
          {
            dutyValue_Move = rxData[0];
 8000702:	4b6e      	ldr	r3, [pc, #440]	@ (80008bc <Car_move+0x204>)
 8000704:	781a      	ldrb	r2, [r3, #0]
 8000706:	4b6e      	ldr	r3, [pc, #440]	@ (80008c0 <Car_move+0x208>)
 8000708:	701a      	strb	r2, [r3, #0]
            switch(dutyValue_Move)
 800070a:	4b6d      	ldr	r3, [pc, #436]	@ (80008c0 <Car_move+0x208>)
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	2b9b      	cmp	r3, #155	@ 0x9b
 8000710:	d03a      	beq.n	8000788 <Car_move+0xd0>
 8000712:	2b9b      	cmp	r3, #155	@ 0x9b
 8000714:	dc63      	bgt.n	80007de <Car_move+0x126>
 8000716:	2b93      	cmp	r3, #147	@ 0x93
 8000718:	d02f      	beq.n	800077a <Car_move+0xc2>
 800071a:	2b93      	cmp	r3, #147	@ 0x93
 800071c:	dc5f      	bgt.n	80007de <Car_move+0x126>
 800071e:	2b7b      	cmp	r3, #123	@ 0x7b
 8000720:	d059      	beq.n	80007d6 <Car_move+0x11e>
 8000722:	2b7b      	cmp	r3, #123	@ 0x7b
 8000724:	dc5b      	bgt.n	80007de <Car_move+0x126>
 8000726:	2b63      	cmp	r3, #99	@ 0x63
 8000728:	d01f      	beq.n	800076a <Car_move+0xb2>
 800072a:	2b63      	cmp	r3, #99	@ 0x63
 800072c:	dc57      	bgt.n	80007de <Car_move+0x126>
 800072e:	2b4b      	cmp	r3, #75	@ 0x4b
 8000730:	d006      	beq.n	8000740 <Car_move+0x88>
 8000732:	2b4b      	cmp	r3, #75	@ 0x4b
 8000734:	dc53      	bgt.n	80007de <Car_move+0x126>
 8000736:	2b13      	cmp	r3, #19
 8000738:	d00f      	beq.n	800075a <Car_move+0xa2>
 800073a:	2b33      	cmp	r3, #51	@ 0x33
 800073c:	d006      	beq.n	800074c <Car_move+0x94>
                break;
              case 123:
                Flag = 1;
                break;
              default:
                break;
 800073e:	e04e      	b.n	80007de <Car_move+0x126>
                Speed(0);
 8000740:	2000      	movs	r0, #0
 8000742:	f000 fc77 	bl	8001034 <Speed>
                idle();
 8000746:	f000 fbad 	bl	8000ea4 <idle>
                break;
 800074a:	e049      	b.n	80007e0 <Car_move+0x128>
                Speed(700);
 800074c:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 8000750:	f000 fc70 	bl	8001034 <Speed>
                forward();
 8000754:	f000 fbce 	bl	8000ef4 <forward>
                break;
 8000758:	e042      	b.n	80007e0 <Car_move+0x128>
                Speed(pwm_duty);
 800075a:	4b5a      	ldr	r3, [pc, #360]	@ (80008c4 <Car_move+0x20c>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	4618      	mov	r0, r3
 8000760:	f000 fc68 	bl	8001034 <Speed>
                backward();
 8000764:	f000 fbee 	bl	8000f44 <backward>
                break;
 8000768:	e03a      	b.n	80007e0 <Car_move+0x128>
                Speed(pwm_duty);
 800076a:	4b56      	ldr	r3, [pc, #344]	@ (80008c4 <Car_move+0x20c>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	4618      	mov	r0, r3
 8000770:	f000 fc60 	bl	8001034 <Speed>
                left();
 8000774:	f000 fc36 	bl	8000fe4 <left>
                break;
 8000778:	e032      	b.n	80007e0 <Car_move+0x128>
                Speed(pwm_duty);
 800077a:	4b52      	ldr	r3, [pc, #328]	@ (80008c4 <Car_move+0x20c>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	4618      	mov	r0, r3
 8000780:	f000 fc58 	bl	8001034 <Speed>
                right();
 8000784:	f000 fc06 	bl	8000f94 <right>
                Flag = 0;
 8000788:	4b4b      	ldr	r3, [pc, #300]	@ (80008b8 <Car_move+0x200>)
 800078a:	2200      	movs	r2, #0
 800078c:	601a      	str	r2, [r3, #0]
                count++;
 800078e:	4b4e      	ldr	r3, [pc, #312]	@ (80008c8 <Car_move+0x210>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	3301      	adds	r3, #1
 8000794:	4a4c      	ldr	r2, [pc, #304]	@ (80008c8 <Car_move+0x210>)
 8000796:	6013      	str	r3, [r2, #0]
                if(count == 1)
 8000798:	4b4b      	ldr	r3, [pc, #300]	@ (80008c8 <Car_move+0x210>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	2b01      	cmp	r3, #1
 800079e:	d104      	bne.n	80007aa <Car_move+0xf2>
                  pwm_duty = 350;
 80007a0:	4b48      	ldr	r3, [pc, #288]	@ (80008c4 <Car_move+0x20c>)
 80007a2:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 80007a6:	601a      	str	r2, [r3, #0]
                break;
 80007a8:	e01a      	b.n	80007e0 <Car_move+0x128>
                else if(count == 2)
 80007aa:	4b47      	ldr	r3, [pc, #284]	@ (80008c8 <Car_move+0x210>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	2b02      	cmp	r3, #2
 80007b0:	d104      	bne.n	80007bc <Car_move+0x104>
                  pwm_duty = 500;
 80007b2:	4b44      	ldr	r3, [pc, #272]	@ (80008c4 <Car_move+0x20c>)
 80007b4:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80007b8:	601a      	str	r2, [r3, #0]
                break;
 80007ba:	e011      	b.n	80007e0 <Car_move+0x128>
                else if(count == 3)
 80007bc:	4b42      	ldr	r3, [pc, #264]	@ (80008c8 <Car_move+0x210>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	2b03      	cmp	r3, #3
 80007c2:	d104      	bne.n	80007ce <Car_move+0x116>
                  pwm_duty = 950;
 80007c4:	4b3f      	ldr	r3, [pc, #252]	@ (80008c4 <Car_move+0x20c>)
 80007c6:	f240 32b6 	movw	r2, #950	@ 0x3b6
 80007ca:	601a      	str	r2, [r3, #0]
                break;
 80007cc:	e008      	b.n	80007e0 <Car_move+0x128>
                else count = 0;
 80007ce:	4b3e      	ldr	r3, [pc, #248]	@ (80008c8 <Car_move+0x210>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	601a      	str	r2, [r3, #0]
                break;
 80007d4:	e004      	b.n	80007e0 <Car_move+0x128>
                Flag = 1;
 80007d6:	4b38      	ldr	r3, [pc, #224]	@ (80008b8 <Car_move+0x200>)
 80007d8:	2201      	movs	r2, #1
 80007da:	601a      	str	r2, [r3, #0]
                break;
 80007dc:	e000      	b.n	80007e0 <Car_move+0x128>
                break;
 80007de:	bf00      	nop
            }
          }
       }

    if(Flag == 1)
 80007e0:	4b35      	ldr	r3, [pc, #212]	@ (80008b8 <Car_move+0x200>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	2b01      	cmp	r3, #1
 80007e6:	d162      	bne.n	80008ae <Car_move+0x1f6>
    {
      if(rxData[0] == 123/*'o'*/ || rxData[0] == 155)
 80007e8:	4b34      	ldr	r3, [pc, #208]	@ (80008bc <Car_move+0x204>)
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	2b7b      	cmp	r3, #123	@ 0x7b
 80007ee:	d003      	beq.n	80007f8 <Car_move+0x140>
 80007f0:	4b32      	ldr	r3, [pc, #200]	@ (80008bc <Car_move+0x204>)
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	2b9b      	cmp	r3, #155	@ 0x9b
 80007f6:	d10c      	bne.n	8000812 <Car_move+0x15a>
      {
        dutyValue_Move = rxData[0];
 80007f8:	4b30      	ldr	r3, [pc, #192]	@ (80008bc <Car_move+0x204>)
 80007fa:	781a      	ldrb	r2, [r3, #0]
 80007fc:	4b30      	ldr	r3, [pc, #192]	@ (80008c0 <Car_move+0x208>)
 80007fe:	701a      	strb	r2, [r3, #0]
        switch(dutyValue_Move)
 8000800:	4b2f      	ldr	r3, [pc, #188]	@ (80008c0 <Car_move+0x208>)
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	2b9b      	cmp	r3, #155	@ 0x9b
 8000806:	d103      	bne.n	8000810 <Car_move+0x158>
        {
          case 155:
            Flag = 0;
 8000808:	4b2b      	ldr	r3, [pc, #172]	@ (80008b8 <Car_move+0x200>)
 800080a:	2200      	movs	r2, #0
 800080c:	601a      	str	r2, [r3, #0]
            break;
 800080e:	e000      	b.n	8000812 <Car_move+0x15a>
          default:
            break;
 8000810:	bf00      	nop
        }
      }

      if(distance_1 > 50)
 8000812:	4b2e      	ldr	r3, [pc, #184]	@ (80008cc <Car_move+0x214>)
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	2b32      	cmp	r3, #50	@ 0x32
 8000818:	d906      	bls.n	8000828 <Car_move+0x170>
      {
        Speed(800);
 800081a:	f44f 7048 	mov.w	r0, #800	@ 0x320
 800081e:	f000 fc09 	bl	8001034 <Speed>
        forward();
 8000822:	f000 fb67 	bl	8000ef4 <forward>
 8000826:	e012      	b.n	800084e <Car_move+0x196>

      }
      else if(distance_1 < 15)
 8000828:	4b28      	ldr	r3, [pc, #160]	@ (80008cc <Car_move+0x214>)
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	2b0e      	cmp	r3, #14
 800082e:	d80e      	bhi.n	800084e <Car_move+0x196>
      {
        Speed(500);
 8000830:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000834:	f000 fbfe 	bl	8001034 <Speed>
        if(distance_2 > distance_3)
 8000838:	4b25      	ldr	r3, [pc, #148]	@ (80008d0 <Car_move+0x218>)
 800083a:	781a      	ldrb	r2, [r3, #0]
 800083c:	4b25      	ldr	r3, [pc, #148]	@ (80008d4 <Car_move+0x21c>)
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	429a      	cmp	r2, r3
 8000842:	d902      	bls.n	800084a <Car_move+0x192>
        {
          left();
 8000844:	f000 fbce 	bl	8000fe4 <left>
 8000848:	e001      	b.n	800084e <Car_move+0x196>
        }
        else
        {
          right();
 800084a:	f000 fba3 	bl	8000f94 <right>
        }
      }

      if(distance_2 < 11)
 800084e:	4b20      	ldr	r3, [pc, #128]	@ (80008d0 <Car_move+0x218>)
 8000850:	781b      	ldrb	r3, [r3, #0]
 8000852:	2b0a      	cmp	r3, #10
 8000854:	d813      	bhi.n	800087e <Car_move+0x1c6>
      {
        Speed(600);
 8000856:	f44f 7016 	mov.w	r0, #600	@ 0x258
 800085a:	f000 fbeb 	bl	8001034 <Speed>
        right();
 800085e:	f000 fb99 	bl	8000f94 <right>
        if(distance_2 < 5 && distance_1 < 5)
 8000862:	4b1b      	ldr	r3, [pc, #108]	@ (80008d0 <Car_move+0x218>)
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	2b04      	cmp	r3, #4
 8000868:	d809      	bhi.n	800087e <Car_move+0x1c6>
 800086a:	4b18      	ldr	r3, [pc, #96]	@ (80008cc <Car_move+0x214>)
 800086c:	781b      	ldrb	r3, [r3, #0]
 800086e:	2b04      	cmp	r3, #4
 8000870:	d805      	bhi.n	800087e <Car_move+0x1c6>
        {
          Speed(300);
 8000872:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000876:	f000 fbdd 	bl	8001034 <Speed>
          backward();
 800087a:	f000 fb63 	bl	8000f44 <backward>
        }
      }
      if(distance_3 < 11)
 800087e:	4b15      	ldr	r3, [pc, #84]	@ (80008d4 <Car_move+0x21c>)
 8000880:	781b      	ldrb	r3, [r3, #0]
 8000882:	2b0a      	cmp	r3, #10
 8000884:	d813      	bhi.n	80008ae <Car_move+0x1f6>
      {
        Speed(600);
 8000886:	f44f 7016 	mov.w	r0, #600	@ 0x258
 800088a:	f000 fbd3 	bl	8001034 <Speed>
        left();
 800088e:	f000 fba9 	bl	8000fe4 <left>
        if(distance_3 < 5 && distance_1 < 5)
 8000892:	4b10      	ldr	r3, [pc, #64]	@ (80008d4 <Car_move+0x21c>)
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	2b04      	cmp	r3, #4
 8000898:	d809      	bhi.n	80008ae <Car_move+0x1f6>
 800089a:	4b0c      	ldr	r3, [pc, #48]	@ (80008cc <Car_move+0x214>)
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	2b04      	cmp	r3, #4
 80008a0:	d805      	bhi.n	80008ae <Car_move+0x1f6>
        {
          Speed(300);
 80008a2:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80008a6:	f000 fbc5 	bl	8001034 <Speed>
          backward();
 80008aa:	f000 fb4b 	bl	8000f44 <backward>
        }
      }
    }
    osDelay(1);
 80008ae:	2001      	movs	r0, #1
 80008b0:	f004 fc0a 	bl	80050c8 <osDelay>
    if(Flag == 0)
 80008b4:	e704      	b.n	80006c0 <Car_move+0x8>
 80008b6:	bf00      	nop
 80008b8:	20000080 	.word	0x20000080
 80008bc:	200000a8 	.word	0x200000a8
 80008c0:	200000b4 	.word	0x200000b4
 80008c4:	200000ac 	.word	0x200000ac
 80008c8:	200000b0 	.word	0x200000b0
 80008cc:	200000a5 	.word	0x200000a5
 80008d0:	200000a6 	.word	0x200000a6
 80008d4:	200000a7 	.word	0x200000a7

080008d8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b08a      	sub	sp, #40	@ 0x28
 80008dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008de:	f107 0314 	add.w	r3, r7, #20
 80008e2:	2200      	movs	r2, #0
 80008e4:	601a      	str	r2, [r3, #0]
 80008e6:	605a      	str	r2, [r3, #4]
 80008e8:	609a      	str	r2, [r3, #8]
 80008ea:	60da      	str	r2, [r3, #12]
 80008ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008ee:	2300      	movs	r3, #0
 80008f0:	613b      	str	r3, [r7, #16]
 80008f2:	4b3a      	ldr	r3, [pc, #232]	@ (80009dc <MX_GPIO_Init+0x104>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f6:	4a39      	ldr	r2, [pc, #228]	@ (80009dc <MX_GPIO_Init+0x104>)
 80008f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008fe:	4b37      	ldr	r3, [pc, #220]	@ (80009dc <MX_GPIO_Init+0x104>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000902:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000906:	613b      	str	r3, [r7, #16]
 8000908:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800090a:	2300      	movs	r3, #0
 800090c:	60fb      	str	r3, [r7, #12]
 800090e:	4b33      	ldr	r3, [pc, #204]	@ (80009dc <MX_GPIO_Init+0x104>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000912:	4a32      	ldr	r2, [pc, #200]	@ (80009dc <MX_GPIO_Init+0x104>)
 8000914:	f043 0304 	orr.w	r3, r3, #4
 8000918:	6313      	str	r3, [r2, #48]	@ 0x30
 800091a:	4b30      	ldr	r3, [pc, #192]	@ (80009dc <MX_GPIO_Init+0x104>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091e:	f003 0304 	and.w	r3, r3, #4
 8000922:	60fb      	str	r3, [r7, #12]
 8000924:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000926:	2300      	movs	r3, #0
 8000928:	60bb      	str	r3, [r7, #8]
 800092a:	4b2c      	ldr	r3, [pc, #176]	@ (80009dc <MX_GPIO_Init+0x104>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092e:	4a2b      	ldr	r2, [pc, #172]	@ (80009dc <MX_GPIO_Init+0x104>)
 8000930:	f043 0301 	orr.w	r3, r3, #1
 8000934:	6313      	str	r3, [r2, #48]	@ 0x30
 8000936:	4b29      	ldr	r3, [pc, #164]	@ (80009dc <MX_GPIO_Init+0x104>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093a:	f003 0301 	and.w	r3, r3, #1
 800093e:	60bb      	str	r3, [r7, #8]
 8000940:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000942:	2300      	movs	r3, #0
 8000944:	607b      	str	r3, [r7, #4]
 8000946:	4b25      	ldr	r3, [pc, #148]	@ (80009dc <MX_GPIO_Init+0x104>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094a:	4a24      	ldr	r2, [pc, #144]	@ (80009dc <MX_GPIO_Init+0x104>)
 800094c:	f043 0302 	orr.w	r3, r3, #2
 8000950:	6313      	str	r3, [r2, #48]	@ 0x30
 8000952:	4b22      	ldr	r3, [pc, #136]	@ (80009dc <MX_GPIO_Init+0x104>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000956:	f003 0302 	and.w	r3, r3, #2
 800095a:	607b      	str	r3, [r7, #4]
 800095c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Left_Usonic_GPIO_output_Pin|Right_Usonic_GPIO_output_Pin, GPIO_PIN_RESET);
 800095e:	2200      	movs	r2, #0
 8000960:	210c      	movs	r1, #12
 8000962:	481f      	ldr	r0, [pc, #124]	@ (80009e0 <MX_GPIO_Init+0x108>)
 8000964:	f001 fac8 	bl	8001ef8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Center_Usonic_GPIO_output_GPIO_Port, Center_Usonic_GPIO_output_Pin, GPIO_PIN_RESET);
 8000968:	2200      	movs	r2, #0
 800096a:	2180      	movs	r1, #128	@ 0x80
 800096c:	481d      	ldr	r0, [pc, #116]	@ (80009e4 <MX_GPIO_Init+0x10c>)
 800096e:	f001 fac3 	bl	8001ef8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_13|GPIO_PIN_14
 8000972:	2200      	movs	r2, #0
 8000974:	f24e 0106 	movw	r1, #57350	@ 0xe006
 8000978:	481b      	ldr	r0, [pc, #108]	@ (80009e8 <MX_GPIO_Init+0x110>)
 800097a:	f001 fabd 	bl	8001ef8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Left_Usonic_GPIO_output_Pin|Right_Usonic_GPIO_output_Pin;
 800097e:	230c      	movs	r3, #12
 8000980:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000982:	2301      	movs	r3, #1
 8000984:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000986:	2300      	movs	r3, #0
 8000988:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098a:	2300      	movs	r3, #0
 800098c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800098e:	f107 0314 	add.w	r3, r7, #20
 8000992:	4619      	mov	r1, r3
 8000994:	4812      	ldr	r0, [pc, #72]	@ (80009e0 <MX_GPIO_Init+0x108>)
 8000996:	f001 f92b 	bl	8001bf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Center_Usonic_GPIO_output_Pin;
 800099a:	2380      	movs	r3, #128	@ 0x80
 800099c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800099e:	2301      	movs	r3, #1
 80009a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a2:	2300      	movs	r3, #0
 80009a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a6:	2300      	movs	r3, #0
 80009a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Center_Usonic_GPIO_output_GPIO_Port, &GPIO_InitStruct);
 80009aa:	f107 0314 	add.w	r3, r7, #20
 80009ae:	4619      	mov	r1, r3
 80009b0:	480c      	ldr	r0, [pc, #48]	@ (80009e4 <MX_GPIO_Init+0x10c>)
 80009b2:	f001 f91d 	bl	8001bf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB13 PB14
                           PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_13|GPIO_PIN_14
 80009b6:	f24e 0306 	movw	r3, #57350	@ 0xe006
 80009ba:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009bc:	2301      	movs	r3, #1
 80009be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	2300      	movs	r3, #0
 80009c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c4:	2300      	movs	r3, #0
 80009c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009c8:	f107 0314 	add.w	r3, r7, #20
 80009cc:	4619      	mov	r1, r3
 80009ce:	4806      	ldr	r0, [pc, #24]	@ (80009e8 <MX_GPIO_Init+0x110>)
 80009d0:	f001 f90e 	bl	8001bf0 <HAL_GPIO_Init>

}
 80009d4:	bf00      	nop
 80009d6:	3728      	adds	r7, #40	@ 0x28
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	40023800 	.word	0x40023800
 80009e0:	40020800 	.word	0x40020800
 80009e4:	40020000 	.word	0x40020000
 80009e8:	40020400 	.word	0x40020400

080009ec <HAL_TIM_IC_CaptureCallback>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
void MX_FREERTOS_Init(void);
/* USER CODE BEGIN PFP */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	7f1b      	ldrb	r3, [r3, #28]
 80009f8:	2b01      	cmp	r3, #1
 80009fa:	d16d      	bne.n	8000ad8 <HAL_TIM_IC_CaptureCallback+0xec>
  {
    if(captureFlag_1 == 0)
 80009fc:	4b8f      	ldr	r3, [pc, #572]	@ (8000c3c <HAL_TIM_IC_CaptureCallback+0x250>)
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d11b      	bne.n	8000a3c <HAL_TIM_IC_CaptureCallback+0x50>
    {
      IC_value1_1 = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_1); //상승엣지일때 IC_value1에 그 값을 할당.
 8000a04:	2100      	movs	r1, #0
 8000a06:	488e      	ldr	r0, [pc, #568]	@ (8000c40 <HAL_TIM_IC_CaptureCallback+0x254>)
 8000a08:	f002 fdf0 	bl	80035ec <HAL_TIM_ReadCapturedValue>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	b29a      	uxth	r2, r3
 8000a10:	4b8c      	ldr	r3, [pc, #560]	@ (8000c44 <HAL_TIM_IC_CaptureCallback+0x258>)
 8000a12:	801a      	strh	r2, [r3, #0]
      captureFlag_1 = 1;
 8000a14:	4b89      	ldr	r3, [pc, #548]	@ (8000c3c <HAL_TIM_IC_CaptureCallback+0x250>)
 8000a16:	2201      	movs	r2, #1
 8000a18:	701a      	strb	r2, [r3, #0]
      //상승엣지 읽은 후 하강엣지인식하기 위한 세팅
      __HAL_TIM_SET_CAPTUREPOLARITY(&htim4, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000a1a:	4b89      	ldr	r3, [pc, #548]	@ (8000c40 <HAL_TIM_IC_CaptureCallback+0x254>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	6a1a      	ldr	r2, [r3, #32]
 8000a20:	4b87      	ldr	r3, [pc, #540]	@ (8000c40 <HAL_TIM_IC_CaptureCallback+0x254>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	f022 020a 	bic.w	r2, r2, #10
 8000a28:	621a      	str	r2, [r3, #32]
 8000a2a:	4b85      	ldr	r3, [pc, #532]	@ (8000c40 <HAL_TIM_IC_CaptureCallback+0x254>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	6a1a      	ldr	r2, [r3, #32]
 8000a30:	4b83      	ldr	r3, [pc, #524]	@ (8000c40 <HAL_TIM_IC_CaptureCallback+0x254>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	f042 0202 	orr.w	r2, r2, #2
 8000a38:	621a      	str	r2, [r3, #32]
 8000a3a:	e04d      	b.n	8000ad8 <HAL_TIM_IC_CaptureCallback+0xec>
    }
    else if(captureFlag_1 == 1)
 8000a3c:	4b7f      	ldr	r3, [pc, #508]	@ (8000c3c <HAL_TIM_IC_CaptureCallback+0x250>)
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	2b01      	cmp	r3, #1
 8000a42:	d149      	bne.n	8000ad8 <HAL_TIM_IC_CaptureCallback+0xec>
    {
      IC_value2_1 = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_1);
 8000a44:	2100      	movs	r1, #0
 8000a46:	487e      	ldr	r0, [pc, #504]	@ (8000c40 <HAL_TIM_IC_CaptureCallback+0x254>)
 8000a48:	f002 fdd0 	bl	80035ec <HAL_TIM_ReadCapturedValue>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	b29a      	uxth	r2, r3
 8000a50:	4b7d      	ldr	r3, [pc, #500]	@ (8000c48 <HAL_TIM_IC_CaptureCallback+0x25c>)
 8000a52:	801a      	strh	r2, [r3, #0]
      //__HAL_TIM_SET_COUNTER(&htim4 , 0);
      if(IC_value2_1 > IC_value1_1)
 8000a54:	4b7c      	ldr	r3, [pc, #496]	@ (8000c48 <HAL_TIM_IC_CaptureCallback+0x25c>)
 8000a56:	881a      	ldrh	r2, [r3, #0]
 8000a58:	4b7a      	ldr	r3, [pc, #488]	@ (8000c44 <HAL_TIM_IC_CaptureCallback+0x258>)
 8000a5a:	881b      	ldrh	r3, [r3, #0]
 8000a5c:	429a      	cmp	r2, r3
 8000a5e:	d908      	bls.n	8000a72 <HAL_TIM_IC_CaptureCallback+0x86>
      {
        echoTime_1 = IC_value2_1 - IC_value1_1;
 8000a60:	4b79      	ldr	r3, [pc, #484]	@ (8000c48 <HAL_TIM_IC_CaptureCallback+0x25c>)
 8000a62:	881a      	ldrh	r2, [r3, #0]
 8000a64:	4b77      	ldr	r3, [pc, #476]	@ (8000c44 <HAL_TIM_IC_CaptureCallback+0x258>)
 8000a66:	881b      	ldrh	r3, [r3, #0]
 8000a68:	1ad3      	subs	r3, r2, r3
 8000a6a:	b29a      	uxth	r2, r3
 8000a6c:	4b77      	ldr	r3, [pc, #476]	@ (8000c4c <HAL_TIM_IC_CaptureCallback+0x260>)
 8000a6e:	801a      	strh	r2, [r3, #0]
 8000a70:	e00f      	b.n	8000a92 <HAL_TIM_IC_CaptureCallback+0xa6>
      }
      else if(IC_value1_1 > IC_value2_1) // 이 경우는 타이머가 16비트 이기 때문에 65535까지 카운트가 가능하다. 만약 IC_value1과 IC_value2 사이에  타이머 카운터의 오버플로우가 발생할 경우 계산.
 8000a72:	4b74      	ldr	r3, [pc, #464]	@ (8000c44 <HAL_TIM_IC_CaptureCallback+0x258>)
 8000a74:	881a      	ldrh	r2, [r3, #0]
 8000a76:	4b74      	ldr	r3, [pc, #464]	@ (8000c48 <HAL_TIM_IC_CaptureCallback+0x25c>)
 8000a78:	881b      	ldrh	r3, [r3, #0]
 8000a7a:	429a      	cmp	r2, r3
 8000a7c:	d909      	bls.n	8000a92 <HAL_TIM_IC_CaptureCallback+0xa6>
      {
        echoTime_1 = (0xffff - IC_value1_1) + IC_value2_1;
 8000a7e:	4b72      	ldr	r3, [pc, #456]	@ (8000c48 <HAL_TIM_IC_CaptureCallback+0x25c>)
 8000a80:	881a      	ldrh	r2, [r3, #0]
 8000a82:	4b70      	ldr	r3, [pc, #448]	@ (8000c44 <HAL_TIM_IC_CaptureCallback+0x258>)
 8000a84:	881b      	ldrh	r3, [r3, #0]
 8000a86:	1ad3      	subs	r3, r2, r3
 8000a88:	b29b      	uxth	r3, r3
 8000a8a:	3b01      	subs	r3, #1
 8000a8c:	b29a      	uxth	r2, r3
 8000a8e:	4b6f      	ldr	r3, [pc, #444]	@ (8000c4c <HAL_TIM_IC_CaptureCallback+0x260>)
 8000a90:	801a      	strh	r2, [r3, #0]
      }
      distance_1 = echoTime_1 / 58;
 8000a92:	4b6e      	ldr	r3, [pc, #440]	@ (8000c4c <HAL_TIM_IC_CaptureCallback+0x260>)
 8000a94:	881b      	ldrh	r3, [r3, #0]
 8000a96:	4a6e      	ldr	r2, [pc, #440]	@ (8000c50 <HAL_TIM_IC_CaptureCallback+0x264>)
 8000a98:	fba2 2303 	umull	r2, r3, r2, r3
 8000a9c:	095b      	lsrs	r3, r3, #5
 8000a9e:	b29b      	uxth	r3, r3
 8000aa0:	b2da      	uxtb	r2, r3
 8000aa2:	4b6c      	ldr	r3, [pc, #432]	@ (8000c54 <HAL_TIM_IC_CaptureCallback+0x268>)
 8000aa4:	701a      	strb	r2, [r3, #0]
      captureFlag_1 = 0;
 8000aa6:	4b65      	ldr	r3, [pc, #404]	@ (8000c3c <HAL_TIM_IC_CaptureCallback+0x250>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	701a      	strb	r2, [r3, #0]
      __HAL_TIM_SET_CAPTUREPOLARITY(&htim4, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8000aac:	4b64      	ldr	r3, [pc, #400]	@ (8000c40 <HAL_TIM_IC_CaptureCallback+0x254>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	6a1a      	ldr	r2, [r3, #32]
 8000ab2:	4b63      	ldr	r3, [pc, #396]	@ (8000c40 <HAL_TIM_IC_CaptureCallback+0x254>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	f022 020a 	bic.w	r2, r2, #10
 8000aba:	621a      	str	r2, [r3, #32]
 8000abc:	4b60      	ldr	r3, [pc, #384]	@ (8000c40 <HAL_TIM_IC_CaptureCallback+0x254>)
 8000abe:	681a      	ldr	r2, [r3, #0]
 8000ac0:	4b5f      	ldr	r3, [pc, #380]	@ (8000c40 <HAL_TIM_IC_CaptureCallback+0x254>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	6a12      	ldr	r2, [r2, #32]
 8000ac6:	621a      	str	r2, [r3, #32]
      __HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC1);
 8000ac8:	4b5d      	ldr	r3, [pc, #372]	@ (8000c40 <HAL_TIM_IC_CaptureCallback+0x254>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	68da      	ldr	r2, [r3, #12]
 8000ace:	4b5c      	ldr	r3, [pc, #368]	@ (8000c40 <HAL_TIM_IC_CaptureCallback+0x254>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	f022 0202 	bic.w	r2, r2, #2
 8000ad6:	60da      	str	r2, [r3, #12]
    }
  }

  if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	7f1b      	ldrb	r3, [r3, #28]
 8000adc:	2b02      	cmp	r3, #2
 8000ade:	d16d      	bne.n	8000bbc <HAL_TIM_IC_CaptureCallback+0x1d0>
    {
      if(captureFlag_2 == 0)
 8000ae0:	4b5d      	ldr	r3, [pc, #372]	@ (8000c58 <HAL_TIM_IC_CaptureCallback+0x26c>)
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d11b      	bne.n	8000b20 <HAL_TIM_IC_CaptureCallback+0x134>
      {
        IC_value1_2 = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_2); //상승엣지일때 IC_value1에 그 값을 할당.
 8000ae8:	2104      	movs	r1, #4
 8000aea:	4855      	ldr	r0, [pc, #340]	@ (8000c40 <HAL_TIM_IC_CaptureCallback+0x254>)
 8000aec:	f002 fd7e 	bl	80035ec <HAL_TIM_ReadCapturedValue>
 8000af0:	4603      	mov	r3, r0
 8000af2:	b29a      	uxth	r2, r3
 8000af4:	4b59      	ldr	r3, [pc, #356]	@ (8000c5c <HAL_TIM_IC_CaptureCallback+0x270>)
 8000af6:	801a      	strh	r2, [r3, #0]
        captureFlag_2 = 1;
 8000af8:	4b57      	ldr	r3, [pc, #348]	@ (8000c58 <HAL_TIM_IC_CaptureCallback+0x26c>)
 8000afa:	2201      	movs	r2, #1
 8000afc:	701a      	strb	r2, [r3, #0]
        //상승엣지 읽은 후 하강엣지인식하기 위한 세팅
        __HAL_TIM_SET_CAPTUREPOLARITY(&htim4, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000afe:	4b50      	ldr	r3, [pc, #320]	@ (8000c40 <HAL_TIM_IC_CaptureCallback+0x254>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	6a1a      	ldr	r2, [r3, #32]
 8000b04:	4b4e      	ldr	r3, [pc, #312]	@ (8000c40 <HAL_TIM_IC_CaptureCallback+0x254>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8000b0c:	621a      	str	r2, [r3, #32]
 8000b0e:	4b4c      	ldr	r3, [pc, #304]	@ (8000c40 <HAL_TIM_IC_CaptureCallback+0x254>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	6a1a      	ldr	r2, [r3, #32]
 8000b14:	4b4a      	ldr	r3, [pc, #296]	@ (8000c40 <HAL_TIM_IC_CaptureCallback+0x254>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	f042 0220 	orr.w	r2, r2, #32
 8000b1c:	621a      	str	r2, [r3, #32]
 8000b1e:	e04d      	b.n	8000bbc <HAL_TIM_IC_CaptureCallback+0x1d0>
      }
      else if(captureFlag_2 == 1)
 8000b20:	4b4d      	ldr	r3, [pc, #308]	@ (8000c58 <HAL_TIM_IC_CaptureCallback+0x26c>)
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	2b01      	cmp	r3, #1
 8000b26:	d149      	bne.n	8000bbc <HAL_TIM_IC_CaptureCallback+0x1d0>
      {
        IC_value2_2 = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_2);
 8000b28:	2104      	movs	r1, #4
 8000b2a:	4845      	ldr	r0, [pc, #276]	@ (8000c40 <HAL_TIM_IC_CaptureCallback+0x254>)
 8000b2c:	f002 fd5e 	bl	80035ec <HAL_TIM_ReadCapturedValue>
 8000b30:	4603      	mov	r3, r0
 8000b32:	b29a      	uxth	r2, r3
 8000b34:	4b4a      	ldr	r3, [pc, #296]	@ (8000c60 <HAL_TIM_IC_CaptureCallback+0x274>)
 8000b36:	801a      	strh	r2, [r3, #0]
        //__HAL_TIM_SET_COUNTER(&htim4 , 0);
        if(IC_value2_2 > IC_value1_2)
 8000b38:	4b49      	ldr	r3, [pc, #292]	@ (8000c60 <HAL_TIM_IC_CaptureCallback+0x274>)
 8000b3a:	881a      	ldrh	r2, [r3, #0]
 8000b3c:	4b47      	ldr	r3, [pc, #284]	@ (8000c5c <HAL_TIM_IC_CaptureCallback+0x270>)
 8000b3e:	881b      	ldrh	r3, [r3, #0]
 8000b40:	429a      	cmp	r2, r3
 8000b42:	d908      	bls.n	8000b56 <HAL_TIM_IC_CaptureCallback+0x16a>
        {
          echoTime_2 = IC_value2_2 - IC_value1_2;
 8000b44:	4b46      	ldr	r3, [pc, #280]	@ (8000c60 <HAL_TIM_IC_CaptureCallback+0x274>)
 8000b46:	881a      	ldrh	r2, [r3, #0]
 8000b48:	4b44      	ldr	r3, [pc, #272]	@ (8000c5c <HAL_TIM_IC_CaptureCallback+0x270>)
 8000b4a:	881b      	ldrh	r3, [r3, #0]
 8000b4c:	1ad3      	subs	r3, r2, r3
 8000b4e:	b29a      	uxth	r2, r3
 8000b50:	4b44      	ldr	r3, [pc, #272]	@ (8000c64 <HAL_TIM_IC_CaptureCallback+0x278>)
 8000b52:	801a      	strh	r2, [r3, #0]
 8000b54:	e00f      	b.n	8000b76 <HAL_TIM_IC_CaptureCallback+0x18a>
        }
        else if(IC_value1_2 > IC_value2_2) // 이 경우는 타이머가 16비트 이기 때문에 65535까지 카운트가 가능하다. 만약 IC_value1과 IC_value2 사이에  타이머 카운터의 오버플로우가 발생할 경우 계산.
 8000b56:	4b41      	ldr	r3, [pc, #260]	@ (8000c5c <HAL_TIM_IC_CaptureCallback+0x270>)
 8000b58:	881a      	ldrh	r2, [r3, #0]
 8000b5a:	4b41      	ldr	r3, [pc, #260]	@ (8000c60 <HAL_TIM_IC_CaptureCallback+0x274>)
 8000b5c:	881b      	ldrh	r3, [r3, #0]
 8000b5e:	429a      	cmp	r2, r3
 8000b60:	d909      	bls.n	8000b76 <HAL_TIM_IC_CaptureCallback+0x18a>
        {
          echoTime_2 = (0xffff - IC_value1_2) + IC_value2_2;
 8000b62:	4b3f      	ldr	r3, [pc, #252]	@ (8000c60 <HAL_TIM_IC_CaptureCallback+0x274>)
 8000b64:	881a      	ldrh	r2, [r3, #0]
 8000b66:	4b3d      	ldr	r3, [pc, #244]	@ (8000c5c <HAL_TIM_IC_CaptureCallback+0x270>)
 8000b68:	881b      	ldrh	r3, [r3, #0]
 8000b6a:	1ad3      	subs	r3, r2, r3
 8000b6c:	b29b      	uxth	r3, r3
 8000b6e:	3b01      	subs	r3, #1
 8000b70:	b29a      	uxth	r2, r3
 8000b72:	4b3c      	ldr	r3, [pc, #240]	@ (8000c64 <HAL_TIM_IC_CaptureCallback+0x278>)
 8000b74:	801a      	strh	r2, [r3, #0]
        }
        distance_2 = echoTime_2 / 58;
 8000b76:	4b3b      	ldr	r3, [pc, #236]	@ (8000c64 <HAL_TIM_IC_CaptureCallback+0x278>)
 8000b78:	881b      	ldrh	r3, [r3, #0]
 8000b7a:	4a35      	ldr	r2, [pc, #212]	@ (8000c50 <HAL_TIM_IC_CaptureCallback+0x264>)
 8000b7c:	fba2 2303 	umull	r2, r3, r2, r3
 8000b80:	095b      	lsrs	r3, r3, #5
 8000b82:	b29b      	uxth	r3, r3
 8000b84:	b2da      	uxtb	r2, r3
 8000b86:	4b38      	ldr	r3, [pc, #224]	@ (8000c68 <HAL_TIM_IC_CaptureCallback+0x27c>)
 8000b88:	701a      	strb	r2, [r3, #0]
        captureFlag_2 = 0;
 8000b8a:	4b33      	ldr	r3, [pc, #204]	@ (8000c58 <HAL_TIM_IC_CaptureCallback+0x26c>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	701a      	strb	r2, [r3, #0]
        __HAL_TIM_SET_CAPTUREPOLARITY(&htim4, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING);
 8000b90:	4b2b      	ldr	r3, [pc, #172]	@ (8000c40 <HAL_TIM_IC_CaptureCallback+0x254>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	6a1a      	ldr	r2, [r3, #32]
 8000b96:	4b2a      	ldr	r3, [pc, #168]	@ (8000c40 <HAL_TIM_IC_CaptureCallback+0x254>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8000b9e:	621a      	str	r2, [r3, #32]
 8000ba0:	4b27      	ldr	r3, [pc, #156]	@ (8000c40 <HAL_TIM_IC_CaptureCallback+0x254>)
 8000ba2:	681a      	ldr	r2, [r3, #0]
 8000ba4:	4b26      	ldr	r3, [pc, #152]	@ (8000c40 <HAL_TIM_IC_CaptureCallback+0x254>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	6a12      	ldr	r2, [r2, #32]
 8000baa:	621a      	str	r2, [r3, #32]
        __HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC2);
 8000bac:	4b24      	ldr	r3, [pc, #144]	@ (8000c40 <HAL_TIM_IC_CaptureCallback+0x254>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	68da      	ldr	r2, [r3, #12]
 8000bb2:	4b23      	ldr	r3, [pc, #140]	@ (8000c40 <HAL_TIM_IC_CaptureCallback+0x254>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	f022 0204 	bic.w	r2, r2, #4
 8000bba:	60da      	str	r2, [r3, #12]
      }
    }

  if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	7f1b      	ldrb	r3, [r3, #28]
 8000bc0:	2b04      	cmp	r3, #4
 8000bc2:	f040 808e 	bne.w	8000ce2 <HAL_TIM_IC_CaptureCallback+0x2f6>
      {
        if(captureFlag_3 == 0)
 8000bc6:	4b29      	ldr	r3, [pc, #164]	@ (8000c6c <HAL_TIM_IC_CaptureCallback+0x280>)
 8000bc8:	781b      	ldrb	r3, [r3, #0]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d11b      	bne.n	8000c06 <HAL_TIM_IC_CaptureCallback+0x21a>
        {
          IC_value1_3 = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_3); //상승엣지일때 IC_value1에 그 값을 할당.
 8000bce:	2108      	movs	r1, #8
 8000bd0:	481b      	ldr	r0, [pc, #108]	@ (8000c40 <HAL_TIM_IC_CaptureCallback+0x254>)
 8000bd2:	f002 fd0b 	bl	80035ec <HAL_TIM_ReadCapturedValue>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	b29a      	uxth	r2, r3
 8000bda:	4b25      	ldr	r3, [pc, #148]	@ (8000c70 <HAL_TIM_IC_CaptureCallback+0x284>)
 8000bdc:	801a      	strh	r2, [r3, #0]
          captureFlag_3 = 1;
 8000bde:	4b23      	ldr	r3, [pc, #140]	@ (8000c6c <HAL_TIM_IC_CaptureCallback+0x280>)
 8000be0:	2201      	movs	r2, #1
 8000be2:	701a      	strb	r2, [r3, #0]
          //상승엣지 읽은 후 하강엣지인식하기 위한 세팅
          __HAL_TIM_SET_CAPTUREPOLARITY(&htim4, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000be4:	4b16      	ldr	r3, [pc, #88]	@ (8000c40 <HAL_TIM_IC_CaptureCallback+0x254>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	6a1a      	ldr	r2, [r3, #32]
 8000bea:	4b15      	ldr	r3, [pc, #84]	@ (8000c40 <HAL_TIM_IC_CaptureCallback+0x254>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	f422 6220 	bic.w	r2, r2, #2560	@ 0xa00
 8000bf2:	621a      	str	r2, [r3, #32]
 8000bf4:	4b12      	ldr	r3, [pc, #72]	@ (8000c40 <HAL_TIM_IC_CaptureCallback+0x254>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	6a1a      	ldr	r2, [r3, #32]
 8000bfa:	4b11      	ldr	r3, [pc, #68]	@ (8000c40 <HAL_TIM_IC_CaptureCallback+0x254>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000c02:	621a      	str	r2, [r3, #32]
          captureFlag_3 = 0;
          __HAL_TIM_SET_CAPTUREPOLARITY(&htim4, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_RISING);
          __HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC3);
        }
      }
}
 8000c04:	e06d      	b.n	8000ce2 <HAL_TIM_IC_CaptureCallback+0x2f6>
        else if(captureFlag_3 == 1)
 8000c06:	4b19      	ldr	r3, [pc, #100]	@ (8000c6c <HAL_TIM_IC_CaptureCallback+0x280>)
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	2b01      	cmp	r3, #1
 8000c0c:	d169      	bne.n	8000ce2 <HAL_TIM_IC_CaptureCallback+0x2f6>
          IC_value2_3 = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_3);
 8000c0e:	2108      	movs	r1, #8
 8000c10:	480b      	ldr	r0, [pc, #44]	@ (8000c40 <HAL_TIM_IC_CaptureCallback+0x254>)
 8000c12:	f002 fceb 	bl	80035ec <HAL_TIM_ReadCapturedValue>
 8000c16:	4603      	mov	r3, r0
 8000c18:	b29a      	uxth	r2, r3
 8000c1a:	4b16      	ldr	r3, [pc, #88]	@ (8000c74 <HAL_TIM_IC_CaptureCallback+0x288>)
 8000c1c:	801a      	strh	r2, [r3, #0]
          if(IC_value2_3 > IC_value1_3)
 8000c1e:	4b15      	ldr	r3, [pc, #84]	@ (8000c74 <HAL_TIM_IC_CaptureCallback+0x288>)
 8000c20:	881a      	ldrh	r2, [r3, #0]
 8000c22:	4b13      	ldr	r3, [pc, #76]	@ (8000c70 <HAL_TIM_IC_CaptureCallback+0x284>)
 8000c24:	881b      	ldrh	r3, [r3, #0]
 8000c26:	429a      	cmp	r2, r3
 8000c28:	d928      	bls.n	8000c7c <HAL_TIM_IC_CaptureCallback+0x290>
            echoTime_3 = IC_value2_3 - IC_value1_3;
 8000c2a:	4b12      	ldr	r3, [pc, #72]	@ (8000c74 <HAL_TIM_IC_CaptureCallback+0x288>)
 8000c2c:	881a      	ldrh	r2, [r3, #0]
 8000c2e:	4b10      	ldr	r3, [pc, #64]	@ (8000c70 <HAL_TIM_IC_CaptureCallback+0x284>)
 8000c30:	881b      	ldrh	r3, [r3, #0]
 8000c32:	1ad3      	subs	r3, r2, r3
 8000c34:	b29a      	uxth	r2, r3
 8000c36:	4b10      	ldr	r3, [pc, #64]	@ (8000c78 <HAL_TIM_IC_CaptureCallback+0x28c>)
 8000c38:	801a      	strh	r2, [r3, #0]
 8000c3a:	e02f      	b.n	8000c9c <HAL_TIM_IC_CaptureCallback+0x2b0>
 8000c3c:	200000a2 	.word	0x200000a2
 8000c40:	20000148 	.word	0x20000148
 8000c44:	20000090 	.word	0x20000090
 8000c48:	20000092 	.word	0x20000092
 8000c4c:	2000009c 	.word	0x2000009c
 8000c50:	8d3dcb09 	.word	0x8d3dcb09
 8000c54:	200000a5 	.word	0x200000a5
 8000c58:	200000a3 	.word	0x200000a3
 8000c5c:	20000094 	.word	0x20000094
 8000c60:	20000096 	.word	0x20000096
 8000c64:	2000009e 	.word	0x2000009e
 8000c68:	200000a6 	.word	0x200000a6
 8000c6c:	200000a4 	.word	0x200000a4
 8000c70:	20000098 	.word	0x20000098
 8000c74:	2000009a 	.word	0x2000009a
 8000c78:	200000a0 	.word	0x200000a0
          else if(IC_value1_3 > IC_value2_3) // 이 경우는 타이머가 16비트 이기 때문에 65535까지 카운트가 가능하다. 만약 IC_value1과 IC_value2 사이에  타이머 카운터의 오버플로우가 발생할 경우 계산.
 8000c7c:	4b1b      	ldr	r3, [pc, #108]	@ (8000cec <HAL_TIM_IC_CaptureCallback+0x300>)
 8000c7e:	881a      	ldrh	r2, [r3, #0]
 8000c80:	4b1b      	ldr	r3, [pc, #108]	@ (8000cf0 <HAL_TIM_IC_CaptureCallback+0x304>)
 8000c82:	881b      	ldrh	r3, [r3, #0]
 8000c84:	429a      	cmp	r2, r3
 8000c86:	d909      	bls.n	8000c9c <HAL_TIM_IC_CaptureCallback+0x2b0>
            echoTime_3 = (0xffff - IC_value1_3) + IC_value2_3;
 8000c88:	4b19      	ldr	r3, [pc, #100]	@ (8000cf0 <HAL_TIM_IC_CaptureCallback+0x304>)
 8000c8a:	881a      	ldrh	r2, [r3, #0]
 8000c8c:	4b17      	ldr	r3, [pc, #92]	@ (8000cec <HAL_TIM_IC_CaptureCallback+0x300>)
 8000c8e:	881b      	ldrh	r3, [r3, #0]
 8000c90:	1ad3      	subs	r3, r2, r3
 8000c92:	b29b      	uxth	r3, r3
 8000c94:	3b01      	subs	r3, #1
 8000c96:	b29a      	uxth	r2, r3
 8000c98:	4b16      	ldr	r3, [pc, #88]	@ (8000cf4 <HAL_TIM_IC_CaptureCallback+0x308>)
 8000c9a:	801a      	strh	r2, [r3, #0]
          distance_3 = echoTime_3 / 58;
 8000c9c:	4b15      	ldr	r3, [pc, #84]	@ (8000cf4 <HAL_TIM_IC_CaptureCallback+0x308>)
 8000c9e:	881b      	ldrh	r3, [r3, #0]
 8000ca0:	4a15      	ldr	r2, [pc, #84]	@ (8000cf8 <HAL_TIM_IC_CaptureCallback+0x30c>)
 8000ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ca6:	095b      	lsrs	r3, r3, #5
 8000ca8:	b29b      	uxth	r3, r3
 8000caa:	b2da      	uxtb	r2, r3
 8000cac:	4b13      	ldr	r3, [pc, #76]	@ (8000cfc <HAL_TIM_IC_CaptureCallback+0x310>)
 8000cae:	701a      	strb	r2, [r3, #0]
          captureFlag_3 = 0;
 8000cb0:	4b13      	ldr	r3, [pc, #76]	@ (8000d00 <HAL_TIM_IC_CaptureCallback+0x314>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	701a      	strb	r2, [r3, #0]
          __HAL_TIM_SET_CAPTUREPOLARITY(&htim4, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_RISING);
 8000cb6:	4b13      	ldr	r3, [pc, #76]	@ (8000d04 <HAL_TIM_IC_CaptureCallback+0x318>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	6a1a      	ldr	r2, [r3, #32]
 8000cbc:	4b11      	ldr	r3, [pc, #68]	@ (8000d04 <HAL_TIM_IC_CaptureCallback+0x318>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	f422 6220 	bic.w	r2, r2, #2560	@ 0xa00
 8000cc4:	621a      	str	r2, [r3, #32]
 8000cc6:	4b0f      	ldr	r3, [pc, #60]	@ (8000d04 <HAL_TIM_IC_CaptureCallback+0x318>)
 8000cc8:	681a      	ldr	r2, [r3, #0]
 8000cca:	4b0e      	ldr	r3, [pc, #56]	@ (8000d04 <HAL_TIM_IC_CaptureCallback+0x318>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	6a12      	ldr	r2, [r2, #32]
 8000cd0:	621a      	str	r2, [r3, #32]
          __HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC3);
 8000cd2:	4b0c      	ldr	r3, [pc, #48]	@ (8000d04 <HAL_TIM_IC_CaptureCallback+0x318>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	68da      	ldr	r2, [r3, #12]
 8000cd8:	4b0a      	ldr	r3, [pc, #40]	@ (8000d04 <HAL_TIM_IC_CaptureCallback+0x318>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	f022 0208 	bic.w	r2, r2, #8
 8000ce0:	60da      	str	r2, [r3, #12]
}
 8000ce2:	bf00      	nop
 8000ce4:	3708      	adds	r7, #8
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	20000098 	.word	0x20000098
 8000cf0:	2000009a 	.word	0x2000009a
 8000cf4:	200000a0 	.word	0x200000a0
 8000cf8:	8d3dcb09 	.word	0x8d3dcb09
 8000cfc:	200000a7 	.word	0x200000a7
 8000d00:	200000a4 	.word	0x200000a4
 8000d04:	20000148 	.word	0x20000148

08000d08 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  if(huart-> Instance == USART6)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a05      	ldr	r2, [pc, #20]	@ (8000d2c <HAL_UART_RxCpltCallback+0x24>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d104      	bne.n	8000d24 <HAL_UART_RxCpltCallback+0x1c>
  {
    HAL_UART_Receive_IT(&huart6, rxData, 1);
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	4904      	ldr	r1, [pc, #16]	@ (8000d30 <HAL_UART_RxCpltCallback+0x28>)
 8000d1e:	4805      	ldr	r0, [pc, #20]	@ (8000d34 <HAL_UART_RxCpltCallback+0x2c>)
 8000d20:	f003 f98e 	bl	8004040 <HAL_UART_Receive_IT>
  }
}
 8000d24:	bf00      	nop
 8000d26:	3708      	adds	r7, #8
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	40011400 	.word	0x40011400
 8000d30:	200000a8 	.word	0x200000a8
 8000d34:	20000220 	.word	0x20000220

08000d38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d3c:	f000 fd7e 	bl	800183c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d40:	f000 f830 	bl	8000da4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d44:	f7ff fdc8 	bl	80008d8 <MX_GPIO_Init>
  MX_TIM3_Init();
 8000d48:	f000 fa7a 	bl	8001240 <MX_TIM3_Init>
  MX_TIM10_Init();
 8000d4c:	f000 fb64 	bl	8001418 <MX_TIM10_Init>
  MX_USART2_UART_Init();
 8000d50:	f000 fc68 	bl	8001624 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8000d54:	f000 fc90 	bl	8001678 <MX_USART6_UART_Init>
  MX_TIM4_Init();
 8000d58:	f000 fad8 	bl	800130c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim10);//딜레이만들기위함
 8000d5c:	480d      	ldr	r0, [pc, #52]	@ (8000d94 <main+0x5c>)
 8000d5e:	f001 fdff 	bl	8002960 <HAL_TIM_Base_Start>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);//초음파센서의 상승엣지와 하강엣지 INPUT캡쳐를 하기위한 카운터 인터럽트
 8000d62:	2100      	movs	r1, #0
 8000d64:	480c      	ldr	r0, [pc, #48]	@ (8000d98 <main+0x60>)
 8000d66:	f002 f811 	bl	8002d8c <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_2);
 8000d6a:	2104      	movs	r1, #4
 8000d6c:	480a      	ldr	r0, [pc, #40]	@ (8000d98 <main+0x60>)
 8000d6e:	f002 f80d 	bl	8002d8c <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_3);
 8000d72:	2108      	movs	r1, #8
 8000d74:	4808      	ldr	r0, [pc, #32]	@ (8000d98 <main+0x60>)
 8000d76:	f002 f809 	bl	8002d8c <HAL_TIM_IC_Start_IT>
  HAL_UART_Receive_IT(&huart6, rxData, 1);
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	4907      	ldr	r1, [pc, #28]	@ (8000d9c <main+0x64>)
 8000d7e:	4808      	ldr	r0, [pc, #32]	@ (8000da0 <main+0x68>)
 8000d80:	f003 f95e 	bl	8004040 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000d84:	f004 f8c4 	bl	8004f10 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000d88:	f7ff fc2e 	bl	80005e8 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000d8c:	f004 f8e4 	bl	8004f58 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d90:	bf00      	nop
 8000d92:	e7fd      	b.n	8000d90 <main+0x58>
 8000d94:	20000190 	.word	0x20000190
 8000d98:	20000148 	.word	0x20000148
 8000d9c:	200000a8 	.word	0x200000a8
 8000da0:	20000220 	.word	0x20000220

08000da4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b094      	sub	sp, #80	@ 0x50
 8000da8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000daa:	f107 0320 	add.w	r3, r7, #32
 8000dae:	2230      	movs	r2, #48	@ 0x30
 8000db0:	2100      	movs	r1, #0
 8000db2:	4618      	mov	r0, r3
 8000db4:	f006 fe58 	bl	8007a68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000db8:	f107 030c 	add.w	r3, r7, #12
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	601a      	str	r2, [r3, #0]
 8000dc0:	605a      	str	r2, [r3, #4]
 8000dc2:	609a      	str	r2, [r3, #8]
 8000dc4:	60da      	str	r2, [r3, #12]
 8000dc6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dc8:	2300      	movs	r3, #0
 8000dca:	60bb      	str	r3, [r7, #8]
 8000dcc:	4b27      	ldr	r3, [pc, #156]	@ (8000e6c <SystemClock_Config+0xc8>)
 8000dce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dd0:	4a26      	ldr	r2, [pc, #152]	@ (8000e6c <SystemClock_Config+0xc8>)
 8000dd2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000dd6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dd8:	4b24      	ldr	r3, [pc, #144]	@ (8000e6c <SystemClock_Config+0xc8>)
 8000dda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ddc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000de0:	60bb      	str	r3, [r7, #8]
 8000de2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000de4:	2300      	movs	r3, #0
 8000de6:	607b      	str	r3, [r7, #4]
 8000de8:	4b21      	ldr	r3, [pc, #132]	@ (8000e70 <SystemClock_Config+0xcc>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a20      	ldr	r2, [pc, #128]	@ (8000e70 <SystemClock_Config+0xcc>)
 8000dee:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000df2:	6013      	str	r3, [r2, #0]
 8000df4:	4b1e      	ldr	r3, [pc, #120]	@ (8000e70 <SystemClock_Config+0xcc>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000dfc:	607b      	str	r3, [r7, #4]
 8000dfe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e00:	2301      	movs	r3, #1
 8000e02:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e04:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e08:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e0a:	2302      	movs	r3, #2
 8000e0c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e0e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000e12:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000e14:	2304      	movs	r3, #4
 8000e16:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000e18:	2364      	movs	r3, #100	@ 0x64
 8000e1a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e1c:	2302      	movs	r3, #2
 8000e1e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000e20:	2304      	movs	r3, #4
 8000e22:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e24:	f107 0320 	add.w	r3, r7, #32
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f001 f87f 	bl	8001f2c <HAL_RCC_OscConfig>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000e34:	f000 f830 	bl	8000e98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e38:	230f      	movs	r3, #15
 8000e3a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e3c:	2302      	movs	r3, #2
 8000e3e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e40:	2300      	movs	r3, #0
 8000e42:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e44:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e48:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000e4e:	f107 030c 	add.w	r3, r7, #12
 8000e52:	2103      	movs	r1, #3
 8000e54:	4618      	mov	r0, r3
 8000e56:	f001 fae1 	bl	800241c <HAL_RCC_ClockConfig>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000e60:	f000 f81a 	bl	8000e98 <Error_Handler>
  }
}
 8000e64:	bf00      	nop
 8000e66:	3750      	adds	r7, #80	@ 0x50
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	40023800 	.word	0x40023800
 8000e70:	40007000 	.word	0x40007000

08000e74 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11) {
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a04      	ldr	r2, [pc, #16]	@ (8000e94 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d101      	bne.n	8000e8a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e86:	f000 fcfb 	bl	8001880 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e8a:	bf00      	nop
 8000e8c:	3708      	adds	r7, #8
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	40014800 	.word	0x40014800

08000e98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e9c:	b672      	cpsid	i
}
 8000e9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ea0:	bf00      	nop
 8000ea2:	e7fd      	b.n	8000ea0 <Error_Handler+0x8>

08000ea4 <idle>:
#include "motor.h"


void idle()
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	2102      	movs	r1, #2
 8000eac:	480f      	ldr	r0, [pc, #60]	@ (8000eec <idle+0x48>)
 8000eae:	f001 f823 	bl	8001ef8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000eb8:	480c      	ldr	r0, [pc, #48]	@ (8000eec <idle+0x48>)
 8000eba:	f001 f81d 	bl	8001ef8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000ec4:	4809      	ldr	r0, [pc, #36]	@ (8000eec <idle+0x48>)
 8000ec6:	f001 f817 	bl	8001ef8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8000eca:	2201      	movs	r2, #1
 8000ecc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ed0:	4806      	ldr	r0, [pc, #24]	@ (8000eec <idle+0x48>)
 8000ed2:	f001 f811 	bl	8001ef8 <HAL_GPIO_WritePin>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	4805      	ldr	r0, [pc, #20]	@ (8000ef0 <idle+0x4c>)
 8000eda:	f001 fe4d 	bl	8002b78 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000ede:	2104      	movs	r1, #4
 8000ee0:	4803      	ldr	r0, [pc, #12]	@ (8000ef0 <idle+0x4c>)
 8000ee2:	f001 fe49 	bl	8002b78 <HAL_TIM_PWM_Start>
}
 8000ee6:	bf00      	nop
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	40020400 	.word	0x40020400
 8000ef0:	20000100 	.word	0x20000100

08000ef4 <forward>:
void forward()
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8000ef8:	2200      	movs	r2, #0
 8000efa:	2102      	movs	r1, #2
 8000efc:	480f      	ldr	r0, [pc, #60]	@ (8000f3c <forward+0x48>)
 8000efe:	f000 fffb 	bl	8001ef8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8000f02:	2201      	movs	r2, #1
 8000f04:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000f08:	480c      	ldr	r0, [pc, #48]	@ (8000f3c <forward+0x48>)
 8000f0a:	f000 fff5 	bl	8001ef8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8000f0e:	2201      	movs	r2, #1
 8000f10:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000f14:	4809      	ldr	r0, [pc, #36]	@ (8000f3c <forward+0x48>)
 8000f16:	f000 ffef 	bl	8001ef8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f20:	4806      	ldr	r0, [pc, #24]	@ (8000f3c <forward+0x48>)
 8000f22:	f000 ffe9 	bl	8001ef8 <HAL_GPIO_WritePin>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000f26:	2100      	movs	r1, #0
 8000f28:	4805      	ldr	r0, [pc, #20]	@ (8000f40 <forward+0x4c>)
 8000f2a:	f001 fe25 	bl	8002b78 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000f2e:	2104      	movs	r1, #4
 8000f30:	4803      	ldr	r0, [pc, #12]	@ (8000f40 <forward+0x4c>)
 8000f32:	f001 fe21 	bl	8002b78 <HAL_TIM_PWM_Start>
}
 8000f36:	bf00      	nop
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	40020400 	.word	0x40020400
 8000f40:	20000100 	.word	0x20000100

08000f44 <backward>:
void backward()
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8000f48:	2201      	movs	r2, #1
 8000f4a:	2102      	movs	r1, #2
 8000f4c:	480f      	ldr	r0, [pc, #60]	@ (8000f8c <backward+0x48>)
 8000f4e:	f000 ffd3 	bl	8001ef8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8000f52:	2200      	movs	r2, #0
 8000f54:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000f58:	480c      	ldr	r0, [pc, #48]	@ (8000f8c <backward+0x48>)
 8000f5a:	f000 ffcd 	bl	8001ef8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000f5e:	2200      	movs	r2, #0
 8000f60:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000f64:	4809      	ldr	r0, [pc, #36]	@ (8000f8c <backward+0x48>)
 8000f66:	f000 ffc7 	bl	8001ef8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f70:	4806      	ldr	r0, [pc, #24]	@ (8000f8c <backward+0x48>)
 8000f72:	f000 ffc1 	bl	8001ef8 <HAL_GPIO_WritePin>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000f76:	2100      	movs	r1, #0
 8000f78:	4805      	ldr	r0, [pc, #20]	@ (8000f90 <backward+0x4c>)
 8000f7a:	f001 fdfd 	bl	8002b78 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000f7e:	2104      	movs	r1, #4
 8000f80:	4803      	ldr	r0, [pc, #12]	@ (8000f90 <backward+0x4c>)
 8000f82:	f001 fdf9 	bl	8002b78 <HAL_TIM_PWM_Start>
}
 8000f86:	bf00      	nop
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	40020400 	.word	0x40020400
 8000f90:	20000100 	.word	0x20000100

08000f94 <right>:
void right()
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8000f98:	2201      	movs	r2, #1
 8000f9a:	2102      	movs	r1, #2
 8000f9c:	480f      	ldr	r0, [pc, #60]	@ (8000fdc <right+0x48>)
 8000f9e:	f000 ffab 	bl	8001ef8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000fa8:	480c      	ldr	r0, [pc, #48]	@ (8000fdc <right+0x48>)
 8000faa:	f000 ffa5 	bl	8001ef8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8000fae:	2201      	movs	r2, #1
 8000fb0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000fb4:	4809      	ldr	r0, [pc, #36]	@ (8000fdc <right+0x48>)
 8000fb6:	f000 ff9f 	bl	8001ef8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8000fba:	2200      	movs	r2, #0
 8000fbc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000fc0:	4806      	ldr	r0, [pc, #24]	@ (8000fdc <right+0x48>)
 8000fc2:	f000 ff99 	bl	8001ef8 <HAL_GPIO_WritePin>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000fc6:	2100      	movs	r1, #0
 8000fc8:	4805      	ldr	r0, [pc, #20]	@ (8000fe0 <right+0x4c>)
 8000fca:	f001 fdd5 	bl	8002b78 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000fce:	2104      	movs	r1, #4
 8000fd0:	4803      	ldr	r0, [pc, #12]	@ (8000fe0 <right+0x4c>)
 8000fd2:	f001 fdd1 	bl	8002b78 <HAL_TIM_PWM_Start>
}
 8000fd6:	bf00      	nop
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	40020400 	.word	0x40020400
 8000fe0:	20000100 	.word	0x20000100

08000fe4 <left>:
void left()
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8000fe8:	2200      	movs	r2, #0
 8000fea:	2102      	movs	r1, #2
 8000fec:	480f      	ldr	r0, [pc, #60]	@ (800102c <left+0x48>)
 8000fee:	f000 ff83 	bl	8001ef8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000ff8:	480c      	ldr	r0, [pc, #48]	@ (800102c <left+0x48>)
 8000ffa:	f000 ff7d 	bl	8001ef8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000ffe:	2200      	movs	r2, #0
 8001000:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001004:	4809      	ldr	r0, [pc, #36]	@ (800102c <left+0x48>)
 8001006:	f000 ff77 	bl	8001ef8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 800100a:	2201      	movs	r2, #1
 800100c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001010:	4806      	ldr	r0, [pc, #24]	@ (800102c <left+0x48>)
 8001012:	f000 ff71 	bl	8001ef8 <HAL_GPIO_WritePin>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001016:	2100      	movs	r1, #0
 8001018:	4805      	ldr	r0, [pc, #20]	@ (8001030 <left+0x4c>)
 800101a:	f001 fdad 	bl	8002b78 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800101e:	2104      	movs	r1, #4
 8001020:	4803      	ldr	r0, [pc, #12]	@ (8001030 <left+0x4c>)
 8001022:	f001 fda9 	bl	8002b78 <HAL_TIM_PWM_Start>
}
 8001026:	bf00      	nop
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	40020400 	.word	0x40020400
 8001030:	20000100 	.word	0x20000100

08001034 <Speed>:

void Speed(int pwm)
{
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  TIM3->CCR1 = pwm;
 800103c:	4a05      	ldr	r2, [pc, #20]	@ (8001054 <Speed+0x20>)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6353      	str	r3, [r2, #52]	@ 0x34
  TIM3->CCR2 = pwm;
 8001042:	4a04      	ldr	r2, [pc, #16]	@ (8001054 <Speed+0x20>)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001048:	bf00      	nop
 800104a:	370c      	adds	r7, #12
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr
 8001054:	40000400 	.word	0x40000400

08001058 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800105e:	2300      	movs	r3, #0
 8001060:	607b      	str	r3, [r7, #4]
 8001062:	4b12      	ldr	r3, [pc, #72]	@ (80010ac <HAL_MspInit+0x54>)
 8001064:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001066:	4a11      	ldr	r2, [pc, #68]	@ (80010ac <HAL_MspInit+0x54>)
 8001068:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800106c:	6453      	str	r3, [r2, #68]	@ 0x44
 800106e:	4b0f      	ldr	r3, [pc, #60]	@ (80010ac <HAL_MspInit+0x54>)
 8001070:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001072:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001076:	607b      	str	r3, [r7, #4]
 8001078:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800107a:	2300      	movs	r3, #0
 800107c:	603b      	str	r3, [r7, #0]
 800107e:	4b0b      	ldr	r3, [pc, #44]	@ (80010ac <HAL_MspInit+0x54>)
 8001080:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001082:	4a0a      	ldr	r2, [pc, #40]	@ (80010ac <HAL_MspInit+0x54>)
 8001084:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001088:	6413      	str	r3, [r2, #64]	@ 0x40
 800108a:	4b08      	ldr	r3, [pc, #32]	@ (80010ac <HAL_MspInit+0x54>)
 800108c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800108e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001092:	603b      	str	r3, [r7, #0]
 8001094:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001096:	2200      	movs	r2, #0
 8001098:	210f      	movs	r1, #15
 800109a:	f06f 0001 	mvn.w	r0, #1
 800109e:	f000 fceb 	bl	8001a78 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010a2:	bf00      	nop
 80010a4:	3708      	adds	r7, #8
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	40023800 	.word	0x40023800

080010b0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b08c      	sub	sp, #48	@ 0x30
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80010b8:	2300      	movs	r3, #0
 80010ba:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 80010bc:	2300      	movs	r3, #0
 80010be:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 80010c0:	2300      	movs	r3, #0
 80010c2:	60bb      	str	r3, [r7, #8]
 80010c4:	4b2e      	ldr	r3, [pc, #184]	@ (8001180 <HAL_InitTick+0xd0>)
 80010c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010c8:	4a2d      	ldr	r2, [pc, #180]	@ (8001180 <HAL_InitTick+0xd0>)
 80010ca:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80010ce:	6453      	str	r3, [r2, #68]	@ 0x44
 80010d0:	4b2b      	ldr	r3, [pc, #172]	@ (8001180 <HAL_InitTick+0xd0>)
 80010d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010d4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80010d8:	60bb      	str	r3, [r7, #8]
 80010da:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80010dc:	f107 020c 	add.w	r2, r7, #12
 80010e0:	f107 0310 	add.w	r3, r7, #16
 80010e4:	4611      	mov	r1, r2
 80010e6:	4618      	mov	r0, r3
 80010e8:	f001 fbb8 	bl	800285c <HAL_RCC_GetClockConfig>
  /* Compute TIM11 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80010ec:	f001 fba2 	bl	8002834 <HAL_RCC_GetPCLK2Freq>
 80010f0:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80010f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80010f4:	4a23      	ldr	r2, [pc, #140]	@ (8001184 <HAL_InitTick+0xd4>)
 80010f6:	fba2 2303 	umull	r2, r3, r2, r3
 80010fa:	0c9b      	lsrs	r3, r3, #18
 80010fc:	3b01      	subs	r3, #1
 80010fe:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 8001100:	4b21      	ldr	r3, [pc, #132]	@ (8001188 <HAL_InitTick+0xd8>)
 8001102:	4a22      	ldr	r2, [pc, #136]	@ (800118c <HAL_InitTick+0xdc>)
 8001104:	601a      	str	r2, [r3, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 8001106:	4b20      	ldr	r3, [pc, #128]	@ (8001188 <HAL_InitTick+0xd8>)
 8001108:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800110c:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 800110e:	4a1e      	ldr	r2, [pc, #120]	@ (8001188 <HAL_InitTick+0xd8>)
 8001110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001112:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 8001114:	4b1c      	ldr	r3, [pc, #112]	@ (8001188 <HAL_InitTick+0xd8>)
 8001116:	2200      	movs	r2, #0
 8001118:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800111a:	4b1b      	ldr	r3, [pc, #108]	@ (8001188 <HAL_InitTick+0xd8>)
 800111c:	2200      	movs	r2, #0
 800111e:	609a      	str	r2, [r3, #8]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001120:	4b19      	ldr	r3, [pc, #100]	@ (8001188 <HAL_InitTick+0xd8>)
 8001122:	2200      	movs	r2, #0
 8001124:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim11);
 8001126:	4818      	ldr	r0, [pc, #96]	@ (8001188 <HAL_InitTick+0xd8>)
 8001128:	f001 fbca 	bl	80028c0 <HAL_TIM_Base_Init>
 800112c:	4603      	mov	r3, r0
 800112e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001132:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001136:	2b00      	cmp	r3, #0
 8001138:	d11b      	bne.n	8001172 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim11);
 800113a:	4813      	ldr	r0, [pc, #76]	@ (8001188 <HAL_InitTick+0xd8>)
 800113c:	f001 fc6a 	bl	8002a14 <HAL_TIM_Base_Start_IT>
 8001140:	4603      	mov	r3, r0
 8001142:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001146:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800114a:	2b00      	cmp	r3, #0
 800114c:	d111      	bne.n	8001172 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM11 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800114e:	201a      	movs	r0, #26
 8001150:	f000 fcae 	bl	8001ab0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2b0f      	cmp	r3, #15
 8001158:	d808      	bhi.n	800116c <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority, 0U);
 800115a:	2200      	movs	r2, #0
 800115c:	6879      	ldr	r1, [r7, #4]
 800115e:	201a      	movs	r0, #26
 8001160:	f000 fc8a 	bl	8001a78 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001164:	4a0a      	ldr	r2, [pc, #40]	@ (8001190 <HAL_InitTick+0xe0>)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6013      	str	r3, [r2, #0]
 800116a:	e002      	b.n	8001172 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 800116c:	2301      	movs	r3, #1
 800116e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001172:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001176:	4618      	mov	r0, r3
 8001178:	3730      	adds	r7, #48	@ 0x30
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	40023800 	.word	0x40023800
 8001184:	431bde83 	.word	0x431bde83
 8001188:	200000b8 	.word	0x200000b8
 800118c:	40014800 	.word	0x40014800
 8001190:	20000004 	.word	0x20000004

08001194 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001198:	bf00      	nop
 800119a:	e7fd      	b.n	8001198 <NMI_Handler+0x4>

0800119c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011a0:	bf00      	nop
 80011a2:	e7fd      	b.n	80011a0 <HardFault_Handler+0x4>

080011a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011a8:	bf00      	nop
 80011aa:	e7fd      	b.n	80011a8 <MemManage_Handler+0x4>

080011ac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011b0:	bf00      	nop
 80011b2:	e7fd      	b.n	80011b0 <BusFault_Handler+0x4>

080011b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011b8:	bf00      	nop
 80011ba:	e7fd      	b.n	80011b8 <UsageFault_Handler+0x4>

080011bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011c0:	bf00      	nop
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
	...

080011cc <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 80011d0:	4802      	ldr	r0, [pc, #8]	@ (80011dc <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80011d2:	f001 fef5 	bl	8002fc0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80011d6:	bf00      	nop
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	200000b8 	.word	0x200000b8

080011e0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80011e4:	4802      	ldr	r0, [pc, #8]	@ (80011f0 <TIM4_IRQHandler+0x10>)
 80011e6:	f001 feeb 	bl	8002fc0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80011ea:	bf00      	nop
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	20000148 	.word	0x20000148

080011f4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80011f8:	4802      	ldr	r0, [pc, #8]	@ (8001204 <USART2_IRQHandler+0x10>)
 80011fa:	f002 ff47 	bl	800408c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80011fe:	bf00      	nop
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	200001d8 	.word	0x200001d8

08001208 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800120c:	4802      	ldr	r0, [pc, #8]	@ (8001218 <USART6_IRQHandler+0x10>)
 800120e:	f002 ff3d 	bl	800408c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001212:	bf00      	nop
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	20000220 	.word	0x20000220

0800121c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001220:	4b06      	ldr	r3, [pc, #24]	@ (800123c <SystemInit+0x20>)
 8001222:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001226:	4a05      	ldr	r2, [pc, #20]	@ (800123c <SystemInit+0x20>)
 8001228:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800122c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001230:	bf00      	nop
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	e000ed00 	.word	0xe000ed00

08001240 <MX_TIM3_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim10;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b08a      	sub	sp, #40	@ 0x28
 8001244:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001246:	f107 0320 	add.w	r3, r7, #32
 800124a:	2200      	movs	r2, #0
 800124c:	601a      	str	r2, [r3, #0]
 800124e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001250:	1d3b      	adds	r3, r7, #4
 8001252:	2200      	movs	r2, #0
 8001254:	601a      	str	r2, [r3, #0]
 8001256:	605a      	str	r2, [r3, #4]
 8001258:	609a      	str	r2, [r3, #8]
 800125a:	60da      	str	r2, [r3, #12]
 800125c:	611a      	str	r2, [r3, #16]
 800125e:	615a      	str	r2, [r3, #20]
 8001260:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001262:	4b28      	ldr	r3, [pc, #160]	@ (8001304 <MX_TIM3_Init+0xc4>)
 8001264:	4a28      	ldr	r2, [pc, #160]	@ (8001308 <MX_TIM3_Init+0xc8>)
 8001266:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1000-1;
 8001268:	4b26      	ldr	r3, [pc, #152]	@ (8001304 <MX_TIM3_Init+0xc4>)
 800126a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800126e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001270:	4b24      	ldr	r3, [pc, #144]	@ (8001304 <MX_TIM3_Init+0xc4>)
 8001272:	2200      	movs	r2, #0
 8001274:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8001276:	4b23      	ldr	r3, [pc, #140]	@ (8001304 <MX_TIM3_Init+0xc4>)
 8001278:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800127c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800127e:	4b21      	ldr	r3, [pc, #132]	@ (8001304 <MX_TIM3_Init+0xc4>)
 8001280:	2200      	movs	r2, #0
 8001282:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001284:	4b1f      	ldr	r3, [pc, #124]	@ (8001304 <MX_TIM3_Init+0xc4>)
 8001286:	2200      	movs	r2, #0
 8001288:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800128a:	481e      	ldr	r0, [pc, #120]	@ (8001304 <MX_TIM3_Init+0xc4>)
 800128c:	f001 fc24 	bl	8002ad8 <HAL_TIM_PWM_Init>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8001296:	f7ff fdff 	bl	8000e98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800129a:	2300      	movs	r3, #0
 800129c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800129e:	2300      	movs	r3, #0
 80012a0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012a2:	f107 0320 	add.w	r3, r7, #32
 80012a6:	4619      	mov	r1, r3
 80012a8:	4816      	ldr	r0, [pc, #88]	@ (8001304 <MX_TIM3_Init+0xc4>)
 80012aa:	f002 fdf7 	bl	8003e9c <HAL_TIMEx_MasterConfigSynchronization>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80012b4:	f7ff fdf0 	bl	8000e98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012b8:	2360      	movs	r3, #96	@ 0x60
 80012ba:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80012bc:	2300      	movs	r3, #0
 80012be:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012c0:	2300      	movs	r3, #0
 80012c2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012c4:	2300      	movs	r3, #0
 80012c6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012c8:	1d3b      	adds	r3, r7, #4
 80012ca:	2200      	movs	r2, #0
 80012cc:	4619      	mov	r1, r3
 80012ce:	480d      	ldr	r0, [pc, #52]	@ (8001304 <MX_TIM3_Init+0xc4>)
 80012d0:	f002 f802 	bl	80032d8 <HAL_TIM_PWM_ConfigChannel>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 80012da:	f7ff fddd 	bl	8000e98 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80012de:	1d3b      	adds	r3, r7, #4
 80012e0:	2204      	movs	r2, #4
 80012e2:	4619      	mov	r1, r3
 80012e4:	4807      	ldr	r0, [pc, #28]	@ (8001304 <MX_TIM3_Init+0xc4>)
 80012e6:	f001 fff7 	bl	80032d8 <HAL_TIM_PWM_ConfigChannel>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 80012f0:	f7ff fdd2 	bl	8000e98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80012f4:	4803      	ldr	r0, [pc, #12]	@ (8001304 <MX_TIM3_Init+0xc4>)
 80012f6:	f000 f93b 	bl	8001570 <HAL_TIM_MspPostInit>

}
 80012fa:	bf00      	nop
 80012fc:	3728      	adds	r7, #40	@ 0x28
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	20000100 	.word	0x20000100
 8001308:	40000400 	.word	0x40000400

0800130c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b08a      	sub	sp, #40	@ 0x28
 8001310:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001312:	f107 0318 	add.w	r3, r7, #24
 8001316:	2200      	movs	r2, #0
 8001318:	601a      	str	r2, [r3, #0]
 800131a:	605a      	str	r2, [r3, #4]
 800131c:	609a      	str	r2, [r3, #8]
 800131e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001320:	f107 0310 	add.w	r3, r7, #16
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800132a:	463b      	mov	r3, r7
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	605a      	str	r2, [r3, #4]
 8001332:	609a      	str	r2, [r3, #8]
 8001334:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001336:	4b36      	ldr	r3, [pc, #216]	@ (8001410 <MX_TIM4_Init+0x104>)
 8001338:	4a36      	ldr	r2, [pc, #216]	@ (8001414 <MX_TIM4_Init+0x108>)
 800133a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 100-1;
 800133c:	4b34      	ldr	r3, [pc, #208]	@ (8001410 <MX_TIM4_Init+0x104>)
 800133e:	2263      	movs	r2, #99	@ 0x63
 8001340:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001342:	4b33      	ldr	r3, [pc, #204]	@ (8001410 <MX_TIM4_Init+0x104>)
 8001344:	2200      	movs	r2, #0
 8001346:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001348:	4b31      	ldr	r3, [pc, #196]	@ (8001410 <MX_TIM4_Init+0x104>)
 800134a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800134e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001350:	4b2f      	ldr	r3, [pc, #188]	@ (8001410 <MX_TIM4_Init+0x104>)
 8001352:	2200      	movs	r2, #0
 8001354:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001356:	4b2e      	ldr	r3, [pc, #184]	@ (8001410 <MX_TIM4_Init+0x104>)
 8001358:	2200      	movs	r2, #0
 800135a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800135c:	482c      	ldr	r0, [pc, #176]	@ (8001410 <MX_TIM4_Init+0x104>)
 800135e:	f001 faaf 	bl	80028c0 <HAL_TIM_Base_Init>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <MX_TIM4_Init+0x60>
  {
    Error_Handler();
 8001368:	f7ff fd96 	bl	8000e98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800136c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001370:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001372:	f107 0318 	add.w	r3, r7, #24
 8001376:	4619      	mov	r1, r3
 8001378:	4825      	ldr	r0, [pc, #148]	@ (8001410 <MX_TIM4_Init+0x104>)
 800137a:	f002 f86f 	bl	800345c <HAL_TIM_ConfigClockSource>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001384:	f7ff fd88 	bl	8000e98 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8001388:	4821      	ldr	r0, [pc, #132]	@ (8001410 <MX_TIM4_Init+0x104>)
 800138a:	f001 fca5 	bl	8002cd8 <HAL_TIM_IC_Init>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001394:	f7ff fd80 	bl	8000e98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001398:	2300      	movs	r3, #0
 800139a:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800139c:	2300      	movs	r3, #0
 800139e:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80013a0:	f107 0310 	add.w	r3, r7, #16
 80013a4:	4619      	mov	r1, r3
 80013a6:	481a      	ldr	r0, [pc, #104]	@ (8001410 <MX_TIM4_Init+0x104>)
 80013a8:	f002 fd78 	bl	8003e9c <HAL_TIMEx_MasterConfigSynchronization>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <MX_TIM4_Init+0xaa>
  {
    Error_Handler();
 80013b2:	f7ff fd71 	bl	8000e98 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80013b6:	2300      	movs	r3, #0
 80013b8:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80013ba:	2301      	movs	r3, #1
 80013bc:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80013be:	2300      	movs	r3, #0
 80013c0:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80013c2:	2300      	movs	r3, #0
 80013c4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80013c6:	463b      	mov	r3, r7
 80013c8:	2200      	movs	r2, #0
 80013ca:	4619      	mov	r1, r3
 80013cc:	4810      	ldr	r0, [pc, #64]	@ (8001410 <MX_TIM4_Init+0x104>)
 80013ce:	f001 fee7 	bl	80031a0 <HAL_TIM_IC_ConfigChannel>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <MX_TIM4_Init+0xd0>
  {
    Error_Handler();
 80013d8:	f7ff fd5e 	bl	8000e98 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80013dc:	463b      	mov	r3, r7
 80013de:	2204      	movs	r2, #4
 80013e0:	4619      	mov	r1, r3
 80013e2:	480b      	ldr	r0, [pc, #44]	@ (8001410 <MX_TIM4_Init+0x104>)
 80013e4:	f001 fedc 	bl	80031a0 <HAL_TIM_IC_ConfigChannel>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <MX_TIM4_Init+0xe6>
  {
    Error_Handler();
 80013ee:	f7ff fd53 	bl	8000e98 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80013f2:	463b      	mov	r3, r7
 80013f4:	2208      	movs	r2, #8
 80013f6:	4619      	mov	r1, r3
 80013f8:	4805      	ldr	r0, [pc, #20]	@ (8001410 <MX_TIM4_Init+0x104>)
 80013fa:	f001 fed1 	bl	80031a0 <HAL_TIM_IC_ConfigChannel>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <MX_TIM4_Init+0xfc>
  {
    Error_Handler();
 8001404:	f7ff fd48 	bl	8000e98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001408:	bf00      	nop
 800140a:	3728      	adds	r7, #40	@ 0x28
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	20000148 	.word	0x20000148
 8001414:	40000800 	.word	0x40000800

08001418 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800141c:	4b0e      	ldr	r3, [pc, #56]	@ (8001458 <MX_TIM10_Init+0x40>)
 800141e:	4a0f      	ldr	r2, [pc, #60]	@ (800145c <MX_TIM10_Init+0x44>)
 8001420:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 100-1;
 8001422:	4b0d      	ldr	r3, [pc, #52]	@ (8001458 <MX_TIM10_Init+0x40>)
 8001424:	2263      	movs	r2, #99	@ 0x63
 8001426:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001428:	4b0b      	ldr	r3, [pc, #44]	@ (8001458 <MX_TIM10_Init+0x40>)
 800142a:	2200      	movs	r2, #0
 800142c:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 800142e:	4b0a      	ldr	r3, [pc, #40]	@ (8001458 <MX_TIM10_Init+0x40>)
 8001430:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001434:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001436:	4b08      	ldr	r3, [pc, #32]	@ (8001458 <MX_TIM10_Init+0x40>)
 8001438:	2200      	movs	r2, #0
 800143a:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800143c:	4b06      	ldr	r3, [pc, #24]	@ (8001458 <MX_TIM10_Init+0x40>)
 800143e:	2200      	movs	r2, #0
 8001440:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001442:	4805      	ldr	r0, [pc, #20]	@ (8001458 <MX_TIM10_Init+0x40>)
 8001444:	f001 fa3c 	bl	80028c0 <HAL_TIM_Base_Init>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 800144e:	f7ff fd23 	bl	8000e98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001452:	bf00      	nop
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	20000190 	.word	0x20000190
 800145c:	40014400 	.word	0x40014400

08001460 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001460:	b480      	push	{r7}
 8001462:	b085      	sub	sp, #20
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a0b      	ldr	r2, [pc, #44]	@ (800149c <HAL_TIM_PWM_MspInit+0x3c>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d10d      	bne.n	800148e <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001472:	2300      	movs	r3, #0
 8001474:	60fb      	str	r3, [r7, #12]
 8001476:	4b0a      	ldr	r3, [pc, #40]	@ (80014a0 <HAL_TIM_PWM_MspInit+0x40>)
 8001478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800147a:	4a09      	ldr	r2, [pc, #36]	@ (80014a0 <HAL_TIM_PWM_MspInit+0x40>)
 800147c:	f043 0302 	orr.w	r3, r3, #2
 8001480:	6413      	str	r3, [r2, #64]	@ 0x40
 8001482:	4b07      	ldr	r3, [pc, #28]	@ (80014a0 <HAL_TIM_PWM_MspInit+0x40>)
 8001484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001486:	f003 0302 	and.w	r3, r3, #2
 800148a:	60fb      	str	r3, [r7, #12]
 800148c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800148e:	bf00      	nop
 8001490:	3714      	adds	r7, #20
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	40000400 	.word	0x40000400
 80014a0:	40023800 	.word	0x40023800

080014a4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b08a      	sub	sp, #40	@ 0x28
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ac:	f107 0314 	add.w	r3, r7, #20
 80014b0:	2200      	movs	r2, #0
 80014b2:	601a      	str	r2, [r3, #0]
 80014b4:	605a      	str	r2, [r3, #4]
 80014b6:	609a      	str	r2, [r3, #8]
 80014b8:	60da      	str	r2, [r3, #12]
 80014ba:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM4)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a27      	ldr	r2, [pc, #156]	@ (8001560 <HAL_TIM_Base_MspInit+0xbc>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d135      	bne.n	8001532 <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80014c6:	2300      	movs	r3, #0
 80014c8:	613b      	str	r3, [r7, #16]
 80014ca:	4b26      	ldr	r3, [pc, #152]	@ (8001564 <HAL_TIM_Base_MspInit+0xc0>)
 80014cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ce:	4a25      	ldr	r2, [pc, #148]	@ (8001564 <HAL_TIM_Base_MspInit+0xc0>)
 80014d0:	f043 0304 	orr.w	r3, r3, #4
 80014d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80014d6:	4b23      	ldr	r3, [pc, #140]	@ (8001564 <HAL_TIM_Base_MspInit+0xc0>)
 80014d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014da:	f003 0304 	and.w	r3, r3, #4
 80014de:	613b      	str	r3, [r7, #16]
 80014e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014e2:	2300      	movs	r3, #0
 80014e4:	60fb      	str	r3, [r7, #12]
 80014e6:	4b1f      	ldr	r3, [pc, #124]	@ (8001564 <HAL_TIM_Base_MspInit+0xc0>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ea:	4a1e      	ldr	r2, [pc, #120]	@ (8001564 <HAL_TIM_Base_MspInit+0xc0>)
 80014ec:	f043 0302 	orr.w	r3, r3, #2
 80014f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014f2:	4b1c      	ldr	r3, [pc, #112]	@ (8001564 <HAL_TIM_Base_MspInit+0xc0>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014f6:	f003 0302 	and.w	r3, r3, #2
 80014fa:	60fb      	str	r3, [r7, #12]
 80014fc:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = TIM4_CH1_Center_link_PA7_Pin|TIM4_CH2_Left_link_PA7_Pin|TIM4_CH3_Right_link_PA7_Pin;
 80014fe:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8001502:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001504:	2302      	movs	r3, #2
 8001506:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001508:	2300      	movs	r3, #0
 800150a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800150c:	2300      	movs	r3, #0
 800150e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001510:	2302      	movs	r3, #2
 8001512:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001514:	f107 0314 	add.w	r3, r7, #20
 8001518:	4619      	mov	r1, r3
 800151a:	4813      	ldr	r0, [pc, #76]	@ (8001568 <HAL_TIM_Base_MspInit+0xc4>)
 800151c:	f000 fb68 	bl	8001bf0 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8001520:	2200      	movs	r2, #0
 8001522:	2105      	movs	r1, #5
 8001524:	201e      	movs	r0, #30
 8001526:	f000 faa7 	bl	8001a78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800152a:	201e      	movs	r0, #30
 800152c:	f000 fac0 	bl	8001ab0 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM10_CLK_ENABLE();
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 8001530:	e012      	b.n	8001558 <HAL_TIM_Base_MspInit+0xb4>
  else if(tim_baseHandle->Instance==TIM10)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a0d      	ldr	r2, [pc, #52]	@ (800156c <HAL_TIM_Base_MspInit+0xc8>)
 8001538:	4293      	cmp	r3, r2
 800153a:	d10d      	bne.n	8001558 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800153c:	2300      	movs	r3, #0
 800153e:	60bb      	str	r3, [r7, #8]
 8001540:	4b08      	ldr	r3, [pc, #32]	@ (8001564 <HAL_TIM_Base_MspInit+0xc0>)
 8001542:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001544:	4a07      	ldr	r2, [pc, #28]	@ (8001564 <HAL_TIM_Base_MspInit+0xc0>)
 8001546:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800154a:	6453      	str	r3, [r2, #68]	@ 0x44
 800154c:	4b05      	ldr	r3, [pc, #20]	@ (8001564 <HAL_TIM_Base_MspInit+0xc0>)
 800154e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001550:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001554:	60bb      	str	r3, [r7, #8]
 8001556:	68bb      	ldr	r3, [r7, #8]
}
 8001558:	bf00      	nop
 800155a:	3728      	adds	r7, #40	@ 0x28
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	40000800 	.word	0x40000800
 8001564:	40023800 	.word	0x40023800
 8001568:	40020400 	.word	0x40020400
 800156c:	40014400 	.word	0x40014400

08001570 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b08a      	sub	sp, #40	@ 0x28
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001578:	f107 0314 	add.w	r3, r7, #20
 800157c:	2200      	movs	r2, #0
 800157e:	601a      	str	r2, [r3, #0]
 8001580:	605a      	str	r2, [r3, #4]
 8001582:	609a      	str	r2, [r3, #8]
 8001584:	60da      	str	r2, [r3, #12]
 8001586:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a21      	ldr	r2, [pc, #132]	@ (8001614 <HAL_TIM_MspPostInit+0xa4>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d13b      	bne.n	800160a <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001592:	2300      	movs	r3, #0
 8001594:	613b      	str	r3, [r7, #16]
 8001596:	4b20      	ldr	r3, [pc, #128]	@ (8001618 <HAL_TIM_MspPostInit+0xa8>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800159a:	4a1f      	ldr	r2, [pc, #124]	@ (8001618 <HAL_TIM_MspPostInit+0xa8>)
 800159c:	f043 0301 	orr.w	r3, r3, #1
 80015a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80015a2:	4b1d      	ldr	r3, [pc, #116]	@ (8001618 <HAL_TIM_MspPostInit+0xa8>)
 80015a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015a6:	f003 0301 	and.w	r3, r3, #1
 80015aa:	613b      	str	r3, [r7, #16]
 80015ac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ae:	2300      	movs	r3, #0
 80015b0:	60fb      	str	r3, [r7, #12]
 80015b2:	4b19      	ldr	r3, [pc, #100]	@ (8001618 <HAL_TIM_MspPostInit+0xa8>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015b6:	4a18      	ldr	r2, [pc, #96]	@ (8001618 <HAL_TIM_MspPostInit+0xa8>)
 80015b8:	f043 0302 	orr.w	r3, r3, #2
 80015bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80015be:	4b16      	ldr	r3, [pc, #88]	@ (8001618 <HAL_TIM_MspPostInit+0xa8>)
 80015c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015c2:	f003 0302 	and.w	r3, r3, #2
 80015c6:	60fb      	str	r3, [r7, #12]
 80015c8:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80015ca:	2340      	movs	r3, #64	@ 0x40
 80015cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ce:	2302      	movs	r3, #2
 80015d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d2:	2300      	movs	r3, #0
 80015d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d6:	2300      	movs	r3, #0
 80015d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80015da:	2302      	movs	r3, #2
 80015dc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015de:	f107 0314 	add.w	r3, r7, #20
 80015e2:	4619      	mov	r1, r3
 80015e4:	480d      	ldr	r0, [pc, #52]	@ (800161c <HAL_TIM_MspPostInit+0xac>)
 80015e6:	f000 fb03 	bl	8001bf0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80015ea:	2320      	movs	r3, #32
 80015ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ee:	2302      	movs	r3, #2
 80015f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f2:	2300      	movs	r3, #0
 80015f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f6:	2300      	movs	r3, #0
 80015f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80015fa:	2302      	movs	r3, #2
 80015fc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015fe:	f107 0314 	add.w	r3, r7, #20
 8001602:	4619      	mov	r1, r3
 8001604:	4806      	ldr	r0, [pc, #24]	@ (8001620 <HAL_TIM_MspPostInit+0xb0>)
 8001606:	f000 faf3 	bl	8001bf0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800160a:	bf00      	nop
 800160c:	3728      	adds	r7, #40	@ 0x28
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	40000400 	.word	0x40000400
 8001618:	40023800 	.word	0x40023800
 800161c:	40020000 	.word	0x40020000
 8001620:	40020400 	.word	0x40020400

08001624 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart6;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001628:	4b11      	ldr	r3, [pc, #68]	@ (8001670 <MX_USART2_UART_Init+0x4c>)
 800162a:	4a12      	ldr	r2, [pc, #72]	@ (8001674 <MX_USART2_UART_Init+0x50>)
 800162c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800162e:	4b10      	ldr	r3, [pc, #64]	@ (8001670 <MX_USART2_UART_Init+0x4c>)
 8001630:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001634:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001636:	4b0e      	ldr	r3, [pc, #56]	@ (8001670 <MX_USART2_UART_Init+0x4c>)
 8001638:	2200      	movs	r2, #0
 800163a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800163c:	4b0c      	ldr	r3, [pc, #48]	@ (8001670 <MX_USART2_UART_Init+0x4c>)
 800163e:	2200      	movs	r2, #0
 8001640:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001642:	4b0b      	ldr	r3, [pc, #44]	@ (8001670 <MX_USART2_UART_Init+0x4c>)
 8001644:	2200      	movs	r2, #0
 8001646:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001648:	4b09      	ldr	r3, [pc, #36]	@ (8001670 <MX_USART2_UART_Init+0x4c>)
 800164a:	220c      	movs	r2, #12
 800164c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800164e:	4b08      	ldr	r3, [pc, #32]	@ (8001670 <MX_USART2_UART_Init+0x4c>)
 8001650:	2200      	movs	r2, #0
 8001652:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001654:	4b06      	ldr	r3, [pc, #24]	@ (8001670 <MX_USART2_UART_Init+0x4c>)
 8001656:	2200      	movs	r2, #0
 8001658:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800165a:	4805      	ldr	r0, [pc, #20]	@ (8001670 <MX_USART2_UART_Init+0x4c>)
 800165c:	f002 fca0 	bl	8003fa0 <HAL_UART_Init>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001666:	f7ff fc17 	bl	8000e98 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800166a:	bf00      	nop
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	200001d8 	.word	0x200001d8
 8001674:	40004400 	.word	0x40004400

08001678 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800167c:	4b11      	ldr	r3, [pc, #68]	@ (80016c4 <MX_USART6_UART_Init+0x4c>)
 800167e:	4a12      	ldr	r2, [pc, #72]	@ (80016c8 <MX_USART6_UART_Init+0x50>)
 8001680:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8001682:	4b10      	ldr	r3, [pc, #64]	@ (80016c4 <MX_USART6_UART_Init+0x4c>)
 8001684:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001688:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800168a:	4b0e      	ldr	r3, [pc, #56]	@ (80016c4 <MX_USART6_UART_Init+0x4c>)
 800168c:	2200      	movs	r2, #0
 800168e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001690:	4b0c      	ldr	r3, [pc, #48]	@ (80016c4 <MX_USART6_UART_Init+0x4c>)
 8001692:	2200      	movs	r2, #0
 8001694:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001696:	4b0b      	ldr	r3, [pc, #44]	@ (80016c4 <MX_USART6_UART_Init+0x4c>)
 8001698:	2200      	movs	r2, #0
 800169a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800169c:	4b09      	ldr	r3, [pc, #36]	@ (80016c4 <MX_USART6_UART_Init+0x4c>)
 800169e:	220c      	movs	r2, #12
 80016a0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016a2:	4b08      	ldr	r3, [pc, #32]	@ (80016c4 <MX_USART6_UART_Init+0x4c>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80016a8:	4b06      	ldr	r3, [pc, #24]	@ (80016c4 <MX_USART6_UART_Init+0x4c>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80016ae:	4805      	ldr	r0, [pc, #20]	@ (80016c4 <MX_USART6_UART_Init+0x4c>)
 80016b0:	f002 fc76 	bl	8003fa0 <HAL_UART_Init>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80016ba:	f7ff fbed 	bl	8000e98 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80016be:	bf00      	nop
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	20000220 	.word	0x20000220
 80016c8:	40011400 	.word	0x40011400

080016cc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b08c      	sub	sp, #48	@ 0x30
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d4:	f107 031c 	add.w	r3, r7, #28
 80016d8:	2200      	movs	r2, #0
 80016da:	601a      	str	r2, [r3, #0]
 80016dc:	605a      	str	r2, [r3, #4]
 80016de:	609a      	str	r2, [r3, #8]
 80016e0:	60da      	str	r2, [r3, #12]
 80016e2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a3a      	ldr	r2, [pc, #232]	@ (80017d4 <HAL_UART_MspInit+0x108>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d134      	bne.n	8001758 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016ee:	2300      	movs	r3, #0
 80016f0:	61bb      	str	r3, [r7, #24]
 80016f2:	4b39      	ldr	r3, [pc, #228]	@ (80017d8 <HAL_UART_MspInit+0x10c>)
 80016f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016f6:	4a38      	ldr	r2, [pc, #224]	@ (80017d8 <HAL_UART_MspInit+0x10c>)
 80016f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80016fe:	4b36      	ldr	r3, [pc, #216]	@ (80017d8 <HAL_UART_MspInit+0x10c>)
 8001700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001702:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001706:	61bb      	str	r3, [r7, #24]
 8001708:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800170a:	2300      	movs	r3, #0
 800170c:	617b      	str	r3, [r7, #20]
 800170e:	4b32      	ldr	r3, [pc, #200]	@ (80017d8 <HAL_UART_MspInit+0x10c>)
 8001710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001712:	4a31      	ldr	r2, [pc, #196]	@ (80017d8 <HAL_UART_MspInit+0x10c>)
 8001714:	f043 0301 	orr.w	r3, r3, #1
 8001718:	6313      	str	r3, [r2, #48]	@ 0x30
 800171a:	4b2f      	ldr	r3, [pc, #188]	@ (80017d8 <HAL_UART_MspInit+0x10c>)
 800171c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800171e:	f003 0301 	and.w	r3, r3, #1
 8001722:	617b      	str	r3, [r7, #20]
 8001724:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001726:	230c      	movs	r3, #12
 8001728:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800172a:	2302      	movs	r3, #2
 800172c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172e:	2300      	movs	r3, #0
 8001730:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001732:	2303      	movs	r3, #3
 8001734:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001736:	2307      	movs	r3, #7
 8001738:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800173a:	f107 031c 	add.w	r3, r7, #28
 800173e:	4619      	mov	r1, r3
 8001740:	4826      	ldr	r0, [pc, #152]	@ (80017dc <HAL_UART_MspInit+0x110>)
 8001742:	f000 fa55 	bl	8001bf0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001746:	2200      	movs	r2, #0
 8001748:	2105      	movs	r1, #5
 800174a:	2026      	movs	r0, #38	@ 0x26
 800174c:	f000 f994 	bl	8001a78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001750:	2026      	movs	r0, #38	@ 0x26
 8001752:	f000 f9ad 	bl	8001ab0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8001756:	e038      	b.n	80017ca <HAL_UART_MspInit+0xfe>
  else if(uartHandle->Instance==USART6)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a20      	ldr	r2, [pc, #128]	@ (80017e0 <HAL_UART_MspInit+0x114>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d133      	bne.n	80017ca <HAL_UART_MspInit+0xfe>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001762:	2300      	movs	r3, #0
 8001764:	613b      	str	r3, [r7, #16]
 8001766:	4b1c      	ldr	r3, [pc, #112]	@ (80017d8 <HAL_UART_MspInit+0x10c>)
 8001768:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800176a:	4a1b      	ldr	r2, [pc, #108]	@ (80017d8 <HAL_UART_MspInit+0x10c>)
 800176c:	f043 0320 	orr.w	r3, r3, #32
 8001770:	6453      	str	r3, [r2, #68]	@ 0x44
 8001772:	4b19      	ldr	r3, [pc, #100]	@ (80017d8 <HAL_UART_MspInit+0x10c>)
 8001774:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001776:	f003 0320 	and.w	r3, r3, #32
 800177a:	613b      	str	r3, [r7, #16]
 800177c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800177e:	2300      	movs	r3, #0
 8001780:	60fb      	str	r3, [r7, #12]
 8001782:	4b15      	ldr	r3, [pc, #84]	@ (80017d8 <HAL_UART_MspInit+0x10c>)
 8001784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001786:	4a14      	ldr	r2, [pc, #80]	@ (80017d8 <HAL_UART_MspInit+0x10c>)
 8001788:	f043 0304 	orr.w	r3, r3, #4
 800178c:	6313      	str	r3, [r2, #48]	@ 0x30
 800178e:	4b12      	ldr	r3, [pc, #72]	@ (80017d8 <HAL_UART_MspInit+0x10c>)
 8001790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001792:	f003 0304 	and.w	r3, r3, #4
 8001796:	60fb      	str	r3, [r7, #12]
 8001798:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800179a:	23c0      	movs	r3, #192	@ 0xc0
 800179c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800179e:	2302      	movs	r3, #2
 80017a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a2:	2300      	movs	r3, #0
 80017a4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017a6:	2303      	movs	r3, #3
 80017a8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80017aa:	2308      	movs	r3, #8
 80017ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017ae:	f107 031c 	add.w	r3, r7, #28
 80017b2:	4619      	mov	r1, r3
 80017b4:	480b      	ldr	r0, [pc, #44]	@ (80017e4 <HAL_UART_MspInit+0x118>)
 80017b6:	f000 fa1b 	bl	8001bf0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 80017ba:	2200      	movs	r2, #0
 80017bc:	2105      	movs	r1, #5
 80017be:	2047      	movs	r0, #71	@ 0x47
 80017c0:	f000 f95a 	bl	8001a78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80017c4:	2047      	movs	r0, #71	@ 0x47
 80017c6:	f000 f973 	bl	8001ab0 <HAL_NVIC_EnableIRQ>
}
 80017ca:	bf00      	nop
 80017cc:	3730      	adds	r7, #48	@ 0x30
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	40004400 	.word	0x40004400
 80017d8:	40023800 	.word	0x40023800
 80017dc:	40020000 	.word	0x40020000
 80017e0:	40011400 	.word	0x40011400
 80017e4:	40020800 	.word	0x40020800

080017e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80017e8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001820 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80017ec:	f7ff fd16 	bl	800121c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017f0:	480c      	ldr	r0, [pc, #48]	@ (8001824 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017f2:	490d      	ldr	r1, [pc, #52]	@ (8001828 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017f4:	4a0d      	ldr	r2, [pc, #52]	@ (800182c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017f8:	e002      	b.n	8001800 <LoopCopyDataInit>

080017fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017fe:	3304      	adds	r3, #4

08001800 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001800:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001802:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001804:	d3f9      	bcc.n	80017fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001806:	4a0a      	ldr	r2, [pc, #40]	@ (8001830 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001808:	4c0a      	ldr	r4, [pc, #40]	@ (8001834 <LoopFillZerobss+0x22>)
  movs r3, #0
 800180a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800180c:	e001      	b.n	8001812 <LoopFillZerobss>

0800180e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800180e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001810:	3204      	adds	r2, #4

08001812 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001812:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001814:	d3fb      	bcc.n	800180e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001816:	f006 f985 	bl	8007b24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800181a:	f7ff fa8d 	bl	8000d38 <main>
  bx  lr    
 800181e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001820:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001824:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001828:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 800182c:	08007d1c 	.word	0x08007d1c
  ldr r2, =_sbss
 8001830:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001834:	20004d94 	.word	0x20004d94

08001838 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001838:	e7fe      	b.n	8001838 <ADC_IRQHandler>
	...

0800183c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001840:	4b0e      	ldr	r3, [pc, #56]	@ (800187c <HAL_Init+0x40>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a0d      	ldr	r2, [pc, #52]	@ (800187c <HAL_Init+0x40>)
 8001846:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800184a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800184c:	4b0b      	ldr	r3, [pc, #44]	@ (800187c <HAL_Init+0x40>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a0a      	ldr	r2, [pc, #40]	@ (800187c <HAL_Init+0x40>)
 8001852:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001856:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001858:	4b08      	ldr	r3, [pc, #32]	@ (800187c <HAL_Init+0x40>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a07      	ldr	r2, [pc, #28]	@ (800187c <HAL_Init+0x40>)
 800185e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001862:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001864:	2003      	movs	r0, #3
 8001866:	f000 f8fc 	bl	8001a62 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800186a:	200f      	movs	r0, #15
 800186c:	f7ff fc20 	bl	80010b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001870:	f7ff fbf2 	bl	8001058 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001874:	2300      	movs	r3, #0
}
 8001876:	4618      	mov	r0, r3
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	40023c00 	.word	0x40023c00

08001880 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001884:	4b06      	ldr	r3, [pc, #24]	@ (80018a0 <HAL_IncTick+0x20>)
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	461a      	mov	r2, r3
 800188a:	4b06      	ldr	r3, [pc, #24]	@ (80018a4 <HAL_IncTick+0x24>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4413      	add	r3, r2
 8001890:	4a04      	ldr	r2, [pc, #16]	@ (80018a4 <HAL_IncTick+0x24>)
 8001892:	6013      	str	r3, [r2, #0]
}
 8001894:	bf00      	nop
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	20000008 	.word	0x20000008
 80018a4:	20000268 	.word	0x20000268

080018a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  return uwTick;
 80018ac:	4b03      	ldr	r3, [pc, #12]	@ (80018bc <HAL_GetTick+0x14>)
 80018ae:	681b      	ldr	r3, [r3, #0]
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	20000268 	.word	0x20000268

080018c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b084      	sub	sp, #16
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018c8:	f7ff ffee 	bl	80018a8 <HAL_GetTick>
 80018cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80018d8:	d005      	beq.n	80018e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018da:	4b0a      	ldr	r3, [pc, #40]	@ (8001904 <HAL_Delay+0x44>)
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	461a      	mov	r2, r3
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	4413      	add	r3, r2
 80018e4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80018e6:	bf00      	nop
 80018e8:	f7ff ffde 	bl	80018a8 <HAL_GetTick>
 80018ec:	4602      	mov	r2, r0
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	68fa      	ldr	r2, [r7, #12]
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d8f7      	bhi.n	80018e8 <HAL_Delay+0x28>
  {
  }
}
 80018f8:	bf00      	nop
 80018fa:	bf00      	nop
 80018fc:	3710      	adds	r7, #16
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	20000008 	.word	0x20000008

08001908 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001908:	b480      	push	{r7}
 800190a:	b085      	sub	sp, #20
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	f003 0307 	and.w	r3, r3, #7
 8001916:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001918:	4b0c      	ldr	r3, [pc, #48]	@ (800194c <__NVIC_SetPriorityGrouping+0x44>)
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800191e:	68ba      	ldr	r2, [r7, #8]
 8001920:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001924:	4013      	ands	r3, r2
 8001926:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001930:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001934:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001938:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800193a:	4a04      	ldr	r2, [pc, #16]	@ (800194c <__NVIC_SetPriorityGrouping+0x44>)
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	60d3      	str	r3, [r2, #12]
}
 8001940:	bf00      	nop
 8001942:	3714      	adds	r7, #20
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr
 800194c:	e000ed00 	.word	0xe000ed00

08001950 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001954:	4b04      	ldr	r3, [pc, #16]	@ (8001968 <__NVIC_GetPriorityGrouping+0x18>)
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	0a1b      	lsrs	r3, r3, #8
 800195a:	f003 0307 	and.w	r3, r3, #7
}
 800195e:	4618      	mov	r0, r3
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr
 8001968:	e000ed00 	.word	0xe000ed00

0800196c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	4603      	mov	r3, r0
 8001974:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800197a:	2b00      	cmp	r3, #0
 800197c:	db0b      	blt.n	8001996 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800197e:	79fb      	ldrb	r3, [r7, #7]
 8001980:	f003 021f 	and.w	r2, r3, #31
 8001984:	4907      	ldr	r1, [pc, #28]	@ (80019a4 <__NVIC_EnableIRQ+0x38>)
 8001986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800198a:	095b      	lsrs	r3, r3, #5
 800198c:	2001      	movs	r0, #1
 800198e:	fa00 f202 	lsl.w	r2, r0, r2
 8001992:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001996:	bf00      	nop
 8001998:	370c      	adds	r7, #12
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	e000e100 	.word	0xe000e100

080019a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	4603      	mov	r3, r0
 80019b0:	6039      	str	r1, [r7, #0]
 80019b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	db0a      	blt.n	80019d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	b2da      	uxtb	r2, r3
 80019c0:	490c      	ldr	r1, [pc, #48]	@ (80019f4 <__NVIC_SetPriority+0x4c>)
 80019c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c6:	0112      	lsls	r2, r2, #4
 80019c8:	b2d2      	uxtb	r2, r2
 80019ca:	440b      	add	r3, r1
 80019cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019d0:	e00a      	b.n	80019e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	b2da      	uxtb	r2, r3
 80019d6:	4908      	ldr	r1, [pc, #32]	@ (80019f8 <__NVIC_SetPriority+0x50>)
 80019d8:	79fb      	ldrb	r3, [r7, #7]
 80019da:	f003 030f 	and.w	r3, r3, #15
 80019de:	3b04      	subs	r3, #4
 80019e0:	0112      	lsls	r2, r2, #4
 80019e2:	b2d2      	uxtb	r2, r2
 80019e4:	440b      	add	r3, r1
 80019e6:	761a      	strb	r2, [r3, #24]
}
 80019e8:	bf00      	nop
 80019ea:	370c      	adds	r7, #12
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr
 80019f4:	e000e100 	.word	0xe000e100
 80019f8:	e000ed00 	.word	0xe000ed00

080019fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b089      	sub	sp, #36	@ 0x24
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	60f8      	str	r0, [r7, #12]
 8001a04:	60b9      	str	r1, [r7, #8]
 8001a06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	f003 0307 	and.w	r3, r3, #7
 8001a0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	f1c3 0307 	rsb	r3, r3, #7
 8001a16:	2b04      	cmp	r3, #4
 8001a18:	bf28      	it	cs
 8001a1a:	2304      	movcs	r3, #4
 8001a1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	3304      	adds	r3, #4
 8001a22:	2b06      	cmp	r3, #6
 8001a24:	d902      	bls.n	8001a2c <NVIC_EncodePriority+0x30>
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	3b03      	subs	r3, #3
 8001a2a:	e000      	b.n	8001a2e <NVIC_EncodePriority+0x32>
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a30:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001a34:	69bb      	ldr	r3, [r7, #24]
 8001a36:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3a:	43da      	mvns	r2, r3
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	401a      	ands	r2, r3
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a44:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a4e:	43d9      	mvns	r1, r3
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a54:	4313      	orrs	r3, r2
         );
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3724      	adds	r7, #36	@ 0x24
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr

08001a62 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a62:	b580      	push	{r7, lr}
 8001a64:	b082      	sub	sp, #8
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f7ff ff4c 	bl	8001908 <__NVIC_SetPriorityGrouping>
}
 8001a70:	bf00      	nop
 8001a72:	3708      	adds	r7, #8
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}

08001a78 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b086      	sub	sp, #24
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	4603      	mov	r3, r0
 8001a80:	60b9      	str	r1, [r7, #8]
 8001a82:	607a      	str	r2, [r7, #4]
 8001a84:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a86:	2300      	movs	r3, #0
 8001a88:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a8a:	f7ff ff61 	bl	8001950 <__NVIC_GetPriorityGrouping>
 8001a8e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a90:	687a      	ldr	r2, [r7, #4]
 8001a92:	68b9      	ldr	r1, [r7, #8]
 8001a94:	6978      	ldr	r0, [r7, #20]
 8001a96:	f7ff ffb1 	bl	80019fc <NVIC_EncodePriority>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aa0:	4611      	mov	r1, r2
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f7ff ff80 	bl	80019a8 <__NVIC_SetPriority>
}
 8001aa8:	bf00      	nop
 8001aaa:	3718      	adds	r7, #24
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}

08001ab0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f7ff ff54 	bl	800196c <__NVIC_EnableIRQ>
}
 8001ac4:	bf00      	nop
 8001ac6:	3708      	adds	r7, #8
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}

08001acc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b084      	sub	sp, #16
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ad8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001ada:	f7ff fee5 	bl	80018a8 <HAL_GetTick>
 8001ade:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001ae6:	b2db      	uxtb	r3, r3
 8001ae8:	2b02      	cmp	r3, #2
 8001aea:	d008      	beq.n	8001afe <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2280      	movs	r2, #128	@ 0x80
 8001af0:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2200      	movs	r2, #0
 8001af6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	e052      	b.n	8001ba4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f022 0216 	bic.w	r2, r2, #22
 8001b0c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	695a      	ldr	r2, [r3, #20]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001b1c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d103      	bne.n	8001b2e <HAL_DMA_Abort+0x62>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d007      	beq.n	8001b3e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f022 0208 	bic.w	r2, r2, #8
 8001b3c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f022 0201 	bic.w	r2, r2, #1
 8001b4c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b4e:	e013      	b.n	8001b78 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b50:	f7ff feaa 	bl	80018a8 <HAL_GetTick>
 8001b54:	4602      	mov	r2, r0
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	2b05      	cmp	r3, #5
 8001b5c:	d90c      	bls.n	8001b78 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2220      	movs	r2, #32
 8001b62:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2203      	movs	r2, #3
 8001b68:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001b74:	2303      	movs	r3, #3
 8001b76:	e015      	b.n	8001ba4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 0301 	and.w	r3, r3, #1
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d1e4      	bne.n	8001b50 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b8a:	223f      	movs	r2, #63	@ 0x3f
 8001b8c:	409a      	lsls	r2, r3
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2201      	movs	r2, #1
 8001b96:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001ba2:	2300      	movs	r3, #0
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3710      	adds	r7, #16
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}

08001bac <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	2b02      	cmp	r3, #2
 8001bbe:	d004      	beq.n	8001bca <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2280      	movs	r2, #128	@ 0x80
 8001bc4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e00c      	b.n	8001be4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2205      	movs	r2, #5
 8001bce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f022 0201 	bic.w	r2, r2, #1
 8001be0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001be2:	2300      	movs	r3, #0
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	370c      	adds	r7, #12
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr

08001bf0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b089      	sub	sp, #36	@ 0x24
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c02:	2300      	movs	r3, #0
 8001c04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c06:	2300      	movs	r3, #0
 8001c08:	61fb      	str	r3, [r7, #28]
 8001c0a:	e159      	b.n	8001ec0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	fa02 f303 	lsl.w	r3, r2, r3
 8001c14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	697a      	ldr	r2, [r7, #20]
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c20:	693a      	ldr	r2, [r7, #16]
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	429a      	cmp	r2, r3
 8001c26:	f040 8148 	bne.w	8001eba <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	f003 0303 	and.w	r3, r3, #3
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	d005      	beq.n	8001c42 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c3e:	2b02      	cmp	r3, #2
 8001c40:	d130      	bne.n	8001ca4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c48:	69fb      	ldr	r3, [r7, #28]
 8001c4a:	005b      	lsls	r3, r3, #1
 8001c4c:	2203      	movs	r2, #3
 8001c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c52:	43db      	mvns	r3, r3
 8001c54:	69ba      	ldr	r2, [r7, #24]
 8001c56:	4013      	ands	r3, r2
 8001c58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	68da      	ldr	r2, [r3, #12]
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	005b      	lsls	r3, r3, #1
 8001c62:	fa02 f303 	lsl.w	r3, r2, r3
 8001c66:	69ba      	ldr	r2, [r7, #24]
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	69ba      	ldr	r2, [r7, #24]
 8001c70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c78:	2201      	movs	r2, #1
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c80:	43db      	mvns	r3, r3
 8001c82:	69ba      	ldr	r2, [r7, #24]
 8001c84:	4013      	ands	r3, r2
 8001c86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	091b      	lsrs	r3, r3, #4
 8001c8e:	f003 0201 	and.w	r2, r3, #1
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	fa02 f303 	lsl.w	r3, r2, r3
 8001c98:	69ba      	ldr	r2, [r7, #24]
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	69ba      	ldr	r2, [r7, #24]
 8001ca2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f003 0303 	and.w	r3, r3, #3
 8001cac:	2b03      	cmp	r3, #3
 8001cae:	d017      	beq.n	8001ce0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	005b      	lsls	r3, r3, #1
 8001cba:	2203      	movs	r2, #3
 8001cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc0:	43db      	mvns	r3, r3
 8001cc2:	69ba      	ldr	r2, [r7, #24]
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	689a      	ldr	r2, [r3, #8]
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	005b      	lsls	r3, r3, #1
 8001cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd4:	69ba      	ldr	r2, [r7, #24]
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	69ba      	ldr	r2, [r7, #24]
 8001cde:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f003 0303 	and.w	r3, r3, #3
 8001ce8:	2b02      	cmp	r3, #2
 8001cea:	d123      	bne.n	8001d34 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001cec:	69fb      	ldr	r3, [r7, #28]
 8001cee:	08da      	lsrs	r2, r3, #3
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	3208      	adds	r2, #8
 8001cf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cf8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	f003 0307 	and.w	r3, r3, #7
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	220f      	movs	r2, #15
 8001d04:	fa02 f303 	lsl.w	r3, r2, r3
 8001d08:	43db      	mvns	r3, r3
 8001d0a:	69ba      	ldr	r2, [r7, #24]
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	691a      	ldr	r2, [r3, #16]
 8001d14:	69fb      	ldr	r3, [r7, #28]
 8001d16:	f003 0307 	and.w	r3, r3, #7
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d20:	69ba      	ldr	r2, [r7, #24]
 8001d22:	4313      	orrs	r3, r2
 8001d24:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	08da      	lsrs	r2, r3, #3
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	3208      	adds	r2, #8
 8001d2e:	69b9      	ldr	r1, [r7, #24]
 8001d30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	005b      	lsls	r3, r3, #1
 8001d3e:	2203      	movs	r2, #3
 8001d40:	fa02 f303 	lsl.w	r3, r2, r3
 8001d44:	43db      	mvns	r3, r3
 8001d46:	69ba      	ldr	r2, [r7, #24]
 8001d48:	4013      	ands	r3, r2
 8001d4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f003 0203 	and.w	r2, r3, #3
 8001d54:	69fb      	ldr	r3, [r7, #28]
 8001d56:	005b      	lsls	r3, r3, #1
 8001d58:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5c:	69ba      	ldr	r2, [r7, #24]
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	69ba      	ldr	r2, [r7, #24]
 8001d66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	f000 80a2 	beq.w	8001eba <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d76:	2300      	movs	r3, #0
 8001d78:	60fb      	str	r3, [r7, #12]
 8001d7a:	4b57      	ldr	r3, [pc, #348]	@ (8001ed8 <HAL_GPIO_Init+0x2e8>)
 8001d7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d7e:	4a56      	ldr	r2, [pc, #344]	@ (8001ed8 <HAL_GPIO_Init+0x2e8>)
 8001d80:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d84:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d86:	4b54      	ldr	r3, [pc, #336]	@ (8001ed8 <HAL_GPIO_Init+0x2e8>)
 8001d88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d8e:	60fb      	str	r3, [r7, #12]
 8001d90:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d92:	4a52      	ldr	r2, [pc, #328]	@ (8001edc <HAL_GPIO_Init+0x2ec>)
 8001d94:	69fb      	ldr	r3, [r7, #28]
 8001d96:	089b      	lsrs	r3, r3, #2
 8001d98:	3302      	adds	r3, #2
 8001d9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001da0:	69fb      	ldr	r3, [r7, #28]
 8001da2:	f003 0303 	and.w	r3, r3, #3
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	220f      	movs	r2, #15
 8001daa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dae:	43db      	mvns	r3, r3
 8001db0:	69ba      	ldr	r2, [r7, #24]
 8001db2:	4013      	ands	r3, r2
 8001db4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4a49      	ldr	r2, [pc, #292]	@ (8001ee0 <HAL_GPIO_Init+0x2f0>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d019      	beq.n	8001df2 <HAL_GPIO_Init+0x202>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4a48      	ldr	r2, [pc, #288]	@ (8001ee4 <HAL_GPIO_Init+0x2f4>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d013      	beq.n	8001dee <HAL_GPIO_Init+0x1fe>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4a47      	ldr	r2, [pc, #284]	@ (8001ee8 <HAL_GPIO_Init+0x2f8>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d00d      	beq.n	8001dea <HAL_GPIO_Init+0x1fa>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4a46      	ldr	r2, [pc, #280]	@ (8001eec <HAL_GPIO_Init+0x2fc>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d007      	beq.n	8001de6 <HAL_GPIO_Init+0x1f6>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4a45      	ldr	r2, [pc, #276]	@ (8001ef0 <HAL_GPIO_Init+0x300>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d101      	bne.n	8001de2 <HAL_GPIO_Init+0x1f2>
 8001dde:	2304      	movs	r3, #4
 8001de0:	e008      	b.n	8001df4 <HAL_GPIO_Init+0x204>
 8001de2:	2307      	movs	r3, #7
 8001de4:	e006      	b.n	8001df4 <HAL_GPIO_Init+0x204>
 8001de6:	2303      	movs	r3, #3
 8001de8:	e004      	b.n	8001df4 <HAL_GPIO_Init+0x204>
 8001dea:	2302      	movs	r3, #2
 8001dec:	e002      	b.n	8001df4 <HAL_GPIO_Init+0x204>
 8001dee:	2301      	movs	r3, #1
 8001df0:	e000      	b.n	8001df4 <HAL_GPIO_Init+0x204>
 8001df2:	2300      	movs	r3, #0
 8001df4:	69fa      	ldr	r2, [r7, #28]
 8001df6:	f002 0203 	and.w	r2, r2, #3
 8001dfa:	0092      	lsls	r2, r2, #2
 8001dfc:	4093      	lsls	r3, r2
 8001dfe:	69ba      	ldr	r2, [r7, #24]
 8001e00:	4313      	orrs	r3, r2
 8001e02:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e04:	4935      	ldr	r1, [pc, #212]	@ (8001edc <HAL_GPIO_Init+0x2ec>)
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	089b      	lsrs	r3, r3, #2
 8001e0a:	3302      	adds	r3, #2
 8001e0c:	69ba      	ldr	r2, [r7, #24]
 8001e0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e12:	4b38      	ldr	r3, [pc, #224]	@ (8001ef4 <HAL_GPIO_Init+0x304>)
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	43db      	mvns	r3, r3
 8001e1c:	69ba      	ldr	r2, [r7, #24]
 8001e1e:	4013      	ands	r3, r2
 8001e20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d003      	beq.n	8001e36 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001e2e:	69ba      	ldr	r2, [r7, #24]
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	4313      	orrs	r3, r2
 8001e34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e36:	4a2f      	ldr	r2, [pc, #188]	@ (8001ef4 <HAL_GPIO_Init+0x304>)
 8001e38:	69bb      	ldr	r3, [r7, #24]
 8001e3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e3c:	4b2d      	ldr	r3, [pc, #180]	@ (8001ef4 <HAL_GPIO_Init+0x304>)
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	43db      	mvns	r3, r3
 8001e46:	69ba      	ldr	r2, [r7, #24]
 8001e48:	4013      	ands	r3, r2
 8001e4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d003      	beq.n	8001e60 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001e58:	69ba      	ldr	r2, [r7, #24]
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e60:	4a24      	ldr	r2, [pc, #144]	@ (8001ef4 <HAL_GPIO_Init+0x304>)
 8001e62:	69bb      	ldr	r3, [r7, #24]
 8001e64:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e66:	4b23      	ldr	r3, [pc, #140]	@ (8001ef4 <HAL_GPIO_Init+0x304>)
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	43db      	mvns	r3, r3
 8001e70:	69ba      	ldr	r2, [r7, #24]
 8001e72:	4013      	ands	r3, r2
 8001e74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d003      	beq.n	8001e8a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001e82:	69ba      	ldr	r2, [r7, #24]
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	4313      	orrs	r3, r2
 8001e88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e8a:	4a1a      	ldr	r2, [pc, #104]	@ (8001ef4 <HAL_GPIO_Init+0x304>)
 8001e8c:	69bb      	ldr	r3, [r7, #24]
 8001e8e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e90:	4b18      	ldr	r3, [pc, #96]	@ (8001ef4 <HAL_GPIO_Init+0x304>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	43db      	mvns	r3, r3
 8001e9a:	69ba      	ldr	r2, [r7, #24]
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d003      	beq.n	8001eb4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001eac:	69ba      	ldr	r2, [r7, #24]
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001eb4:	4a0f      	ldr	r2, [pc, #60]	@ (8001ef4 <HAL_GPIO_Init+0x304>)
 8001eb6:	69bb      	ldr	r3, [r7, #24]
 8001eb8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	3301      	adds	r3, #1
 8001ebe:	61fb      	str	r3, [r7, #28]
 8001ec0:	69fb      	ldr	r3, [r7, #28]
 8001ec2:	2b0f      	cmp	r3, #15
 8001ec4:	f67f aea2 	bls.w	8001c0c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ec8:	bf00      	nop
 8001eca:	bf00      	nop
 8001ecc:	3724      	adds	r7, #36	@ 0x24
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr
 8001ed6:	bf00      	nop
 8001ed8:	40023800 	.word	0x40023800
 8001edc:	40013800 	.word	0x40013800
 8001ee0:	40020000 	.word	0x40020000
 8001ee4:	40020400 	.word	0x40020400
 8001ee8:	40020800 	.word	0x40020800
 8001eec:	40020c00 	.word	0x40020c00
 8001ef0:	40021000 	.word	0x40021000
 8001ef4:	40013c00 	.word	0x40013c00

08001ef8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
 8001f00:	460b      	mov	r3, r1
 8001f02:	807b      	strh	r3, [r7, #2]
 8001f04:	4613      	mov	r3, r2
 8001f06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f08:	787b      	ldrb	r3, [r7, #1]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d003      	beq.n	8001f16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f0e:	887a      	ldrh	r2, [r7, #2]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f14:	e003      	b.n	8001f1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f16:	887b      	ldrh	r3, [r7, #2]
 8001f18:	041a      	lsls	r2, r3, #16
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	619a      	str	r2, [r3, #24]
}
 8001f1e:	bf00      	nop
 8001f20:	370c      	adds	r7, #12
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
	...

08001f2c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b086      	sub	sp, #24
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d101      	bne.n	8001f3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e267      	b.n	800240e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0301 	and.w	r3, r3, #1
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d075      	beq.n	8002036 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001f4a:	4b88      	ldr	r3, [pc, #544]	@ (800216c <HAL_RCC_OscConfig+0x240>)
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	f003 030c 	and.w	r3, r3, #12
 8001f52:	2b04      	cmp	r3, #4
 8001f54:	d00c      	beq.n	8001f70 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f56:	4b85      	ldr	r3, [pc, #532]	@ (800216c <HAL_RCC_OscConfig+0x240>)
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001f5e:	2b08      	cmp	r3, #8
 8001f60:	d112      	bne.n	8001f88 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f62:	4b82      	ldr	r3, [pc, #520]	@ (800216c <HAL_RCC_OscConfig+0x240>)
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f6a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001f6e:	d10b      	bne.n	8001f88 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f70:	4b7e      	ldr	r3, [pc, #504]	@ (800216c <HAL_RCC_OscConfig+0x240>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d05b      	beq.n	8002034 <HAL_RCC_OscConfig+0x108>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d157      	bne.n	8002034 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	e242      	b.n	800240e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f90:	d106      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x74>
 8001f92:	4b76      	ldr	r3, [pc, #472]	@ (800216c <HAL_RCC_OscConfig+0x240>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a75      	ldr	r2, [pc, #468]	@ (800216c <HAL_RCC_OscConfig+0x240>)
 8001f98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f9c:	6013      	str	r3, [r2, #0]
 8001f9e:	e01d      	b.n	8001fdc <HAL_RCC_OscConfig+0xb0>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001fa8:	d10c      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x98>
 8001faa:	4b70      	ldr	r3, [pc, #448]	@ (800216c <HAL_RCC_OscConfig+0x240>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a6f      	ldr	r2, [pc, #444]	@ (800216c <HAL_RCC_OscConfig+0x240>)
 8001fb0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001fb4:	6013      	str	r3, [r2, #0]
 8001fb6:	4b6d      	ldr	r3, [pc, #436]	@ (800216c <HAL_RCC_OscConfig+0x240>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a6c      	ldr	r2, [pc, #432]	@ (800216c <HAL_RCC_OscConfig+0x240>)
 8001fbc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fc0:	6013      	str	r3, [r2, #0]
 8001fc2:	e00b      	b.n	8001fdc <HAL_RCC_OscConfig+0xb0>
 8001fc4:	4b69      	ldr	r3, [pc, #420]	@ (800216c <HAL_RCC_OscConfig+0x240>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a68      	ldr	r2, [pc, #416]	@ (800216c <HAL_RCC_OscConfig+0x240>)
 8001fca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001fce:	6013      	str	r3, [r2, #0]
 8001fd0:	4b66      	ldr	r3, [pc, #408]	@ (800216c <HAL_RCC_OscConfig+0x240>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a65      	ldr	r2, [pc, #404]	@ (800216c <HAL_RCC_OscConfig+0x240>)
 8001fd6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001fda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d013      	beq.n	800200c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fe4:	f7ff fc60 	bl	80018a8 <HAL_GetTick>
 8001fe8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fea:	e008      	b.n	8001ffe <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fec:	f7ff fc5c 	bl	80018a8 <HAL_GetTick>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	2b64      	cmp	r3, #100	@ 0x64
 8001ff8:	d901      	bls.n	8001ffe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	e207      	b.n	800240e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ffe:	4b5b      	ldr	r3, [pc, #364]	@ (800216c <HAL_RCC_OscConfig+0x240>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002006:	2b00      	cmp	r3, #0
 8002008:	d0f0      	beq.n	8001fec <HAL_RCC_OscConfig+0xc0>
 800200a:	e014      	b.n	8002036 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800200c:	f7ff fc4c 	bl	80018a8 <HAL_GetTick>
 8002010:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002012:	e008      	b.n	8002026 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002014:	f7ff fc48 	bl	80018a8 <HAL_GetTick>
 8002018:	4602      	mov	r2, r0
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	2b64      	cmp	r3, #100	@ 0x64
 8002020:	d901      	bls.n	8002026 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002022:	2303      	movs	r3, #3
 8002024:	e1f3      	b.n	800240e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002026:	4b51      	ldr	r3, [pc, #324]	@ (800216c <HAL_RCC_OscConfig+0x240>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800202e:	2b00      	cmp	r3, #0
 8002030:	d1f0      	bne.n	8002014 <HAL_RCC_OscConfig+0xe8>
 8002032:	e000      	b.n	8002036 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002034:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 0302 	and.w	r3, r3, #2
 800203e:	2b00      	cmp	r3, #0
 8002040:	d063      	beq.n	800210a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002042:	4b4a      	ldr	r3, [pc, #296]	@ (800216c <HAL_RCC_OscConfig+0x240>)
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	f003 030c 	and.w	r3, r3, #12
 800204a:	2b00      	cmp	r3, #0
 800204c:	d00b      	beq.n	8002066 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800204e:	4b47      	ldr	r3, [pc, #284]	@ (800216c <HAL_RCC_OscConfig+0x240>)
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002056:	2b08      	cmp	r3, #8
 8002058:	d11c      	bne.n	8002094 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800205a:	4b44      	ldr	r3, [pc, #272]	@ (800216c <HAL_RCC_OscConfig+0x240>)
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d116      	bne.n	8002094 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002066:	4b41      	ldr	r3, [pc, #260]	@ (800216c <HAL_RCC_OscConfig+0x240>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0302 	and.w	r3, r3, #2
 800206e:	2b00      	cmp	r3, #0
 8002070:	d005      	beq.n	800207e <HAL_RCC_OscConfig+0x152>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	68db      	ldr	r3, [r3, #12]
 8002076:	2b01      	cmp	r3, #1
 8002078:	d001      	beq.n	800207e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e1c7      	b.n	800240e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800207e:	4b3b      	ldr	r3, [pc, #236]	@ (800216c <HAL_RCC_OscConfig+0x240>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	691b      	ldr	r3, [r3, #16]
 800208a:	00db      	lsls	r3, r3, #3
 800208c:	4937      	ldr	r1, [pc, #220]	@ (800216c <HAL_RCC_OscConfig+0x240>)
 800208e:	4313      	orrs	r3, r2
 8002090:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002092:	e03a      	b.n	800210a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	68db      	ldr	r3, [r3, #12]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d020      	beq.n	80020de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800209c:	4b34      	ldr	r3, [pc, #208]	@ (8002170 <HAL_RCC_OscConfig+0x244>)
 800209e:	2201      	movs	r2, #1
 80020a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020a2:	f7ff fc01 	bl	80018a8 <HAL_GetTick>
 80020a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020a8:	e008      	b.n	80020bc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020aa:	f7ff fbfd 	bl	80018a8 <HAL_GetTick>
 80020ae:	4602      	mov	r2, r0
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	1ad3      	subs	r3, r2, r3
 80020b4:	2b02      	cmp	r3, #2
 80020b6:	d901      	bls.n	80020bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80020b8:	2303      	movs	r3, #3
 80020ba:	e1a8      	b.n	800240e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020bc:	4b2b      	ldr	r3, [pc, #172]	@ (800216c <HAL_RCC_OscConfig+0x240>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 0302 	and.w	r3, r3, #2
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d0f0      	beq.n	80020aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020c8:	4b28      	ldr	r3, [pc, #160]	@ (800216c <HAL_RCC_OscConfig+0x240>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	691b      	ldr	r3, [r3, #16]
 80020d4:	00db      	lsls	r3, r3, #3
 80020d6:	4925      	ldr	r1, [pc, #148]	@ (800216c <HAL_RCC_OscConfig+0x240>)
 80020d8:	4313      	orrs	r3, r2
 80020da:	600b      	str	r3, [r1, #0]
 80020dc:	e015      	b.n	800210a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020de:	4b24      	ldr	r3, [pc, #144]	@ (8002170 <HAL_RCC_OscConfig+0x244>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020e4:	f7ff fbe0 	bl	80018a8 <HAL_GetTick>
 80020e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020ea:	e008      	b.n	80020fe <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020ec:	f7ff fbdc 	bl	80018a8 <HAL_GetTick>
 80020f0:	4602      	mov	r2, r0
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	2b02      	cmp	r3, #2
 80020f8:	d901      	bls.n	80020fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80020fa:	2303      	movs	r3, #3
 80020fc:	e187      	b.n	800240e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020fe:	4b1b      	ldr	r3, [pc, #108]	@ (800216c <HAL_RCC_OscConfig+0x240>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 0302 	and.w	r3, r3, #2
 8002106:	2b00      	cmp	r3, #0
 8002108:	d1f0      	bne.n	80020ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0308 	and.w	r3, r3, #8
 8002112:	2b00      	cmp	r3, #0
 8002114:	d036      	beq.n	8002184 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	695b      	ldr	r3, [r3, #20]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d016      	beq.n	800214c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800211e:	4b15      	ldr	r3, [pc, #84]	@ (8002174 <HAL_RCC_OscConfig+0x248>)
 8002120:	2201      	movs	r2, #1
 8002122:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002124:	f7ff fbc0 	bl	80018a8 <HAL_GetTick>
 8002128:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800212a:	e008      	b.n	800213e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800212c:	f7ff fbbc 	bl	80018a8 <HAL_GetTick>
 8002130:	4602      	mov	r2, r0
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	2b02      	cmp	r3, #2
 8002138:	d901      	bls.n	800213e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800213a:	2303      	movs	r3, #3
 800213c:	e167      	b.n	800240e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800213e:	4b0b      	ldr	r3, [pc, #44]	@ (800216c <HAL_RCC_OscConfig+0x240>)
 8002140:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002142:	f003 0302 	and.w	r3, r3, #2
 8002146:	2b00      	cmp	r3, #0
 8002148:	d0f0      	beq.n	800212c <HAL_RCC_OscConfig+0x200>
 800214a:	e01b      	b.n	8002184 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800214c:	4b09      	ldr	r3, [pc, #36]	@ (8002174 <HAL_RCC_OscConfig+0x248>)
 800214e:	2200      	movs	r2, #0
 8002150:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002152:	f7ff fba9 	bl	80018a8 <HAL_GetTick>
 8002156:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002158:	e00e      	b.n	8002178 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800215a:	f7ff fba5 	bl	80018a8 <HAL_GetTick>
 800215e:	4602      	mov	r2, r0
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	1ad3      	subs	r3, r2, r3
 8002164:	2b02      	cmp	r3, #2
 8002166:	d907      	bls.n	8002178 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002168:	2303      	movs	r3, #3
 800216a:	e150      	b.n	800240e <HAL_RCC_OscConfig+0x4e2>
 800216c:	40023800 	.word	0x40023800
 8002170:	42470000 	.word	0x42470000
 8002174:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002178:	4b88      	ldr	r3, [pc, #544]	@ (800239c <HAL_RCC_OscConfig+0x470>)
 800217a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800217c:	f003 0302 	and.w	r3, r3, #2
 8002180:	2b00      	cmp	r3, #0
 8002182:	d1ea      	bne.n	800215a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 0304 	and.w	r3, r3, #4
 800218c:	2b00      	cmp	r3, #0
 800218e:	f000 8097 	beq.w	80022c0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002192:	2300      	movs	r3, #0
 8002194:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002196:	4b81      	ldr	r3, [pc, #516]	@ (800239c <HAL_RCC_OscConfig+0x470>)
 8002198:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800219a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d10f      	bne.n	80021c2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021a2:	2300      	movs	r3, #0
 80021a4:	60bb      	str	r3, [r7, #8]
 80021a6:	4b7d      	ldr	r3, [pc, #500]	@ (800239c <HAL_RCC_OscConfig+0x470>)
 80021a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021aa:	4a7c      	ldr	r2, [pc, #496]	@ (800239c <HAL_RCC_OscConfig+0x470>)
 80021ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80021b2:	4b7a      	ldr	r3, [pc, #488]	@ (800239c <HAL_RCC_OscConfig+0x470>)
 80021b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021ba:	60bb      	str	r3, [r7, #8]
 80021bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021be:	2301      	movs	r3, #1
 80021c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021c2:	4b77      	ldr	r3, [pc, #476]	@ (80023a0 <HAL_RCC_OscConfig+0x474>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d118      	bne.n	8002200 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021ce:	4b74      	ldr	r3, [pc, #464]	@ (80023a0 <HAL_RCC_OscConfig+0x474>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a73      	ldr	r2, [pc, #460]	@ (80023a0 <HAL_RCC_OscConfig+0x474>)
 80021d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021da:	f7ff fb65 	bl	80018a8 <HAL_GetTick>
 80021de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021e0:	e008      	b.n	80021f4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021e2:	f7ff fb61 	bl	80018a8 <HAL_GetTick>
 80021e6:	4602      	mov	r2, r0
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	1ad3      	subs	r3, r2, r3
 80021ec:	2b02      	cmp	r3, #2
 80021ee:	d901      	bls.n	80021f4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80021f0:	2303      	movs	r3, #3
 80021f2:	e10c      	b.n	800240e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021f4:	4b6a      	ldr	r3, [pc, #424]	@ (80023a0 <HAL_RCC_OscConfig+0x474>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d0f0      	beq.n	80021e2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	2b01      	cmp	r3, #1
 8002206:	d106      	bne.n	8002216 <HAL_RCC_OscConfig+0x2ea>
 8002208:	4b64      	ldr	r3, [pc, #400]	@ (800239c <HAL_RCC_OscConfig+0x470>)
 800220a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800220c:	4a63      	ldr	r2, [pc, #396]	@ (800239c <HAL_RCC_OscConfig+0x470>)
 800220e:	f043 0301 	orr.w	r3, r3, #1
 8002212:	6713      	str	r3, [r2, #112]	@ 0x70
 8002214:	e01c      	b.n	8002250 <HAL_RCC_OscConfig+0x324>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	2b05      	cmp	r3, #5
 800221c:	d10c      	bne.n	8002238 <HAL_RCC_OscConfig+0x30c>
 800221e:	4b5f      	ldr	r3, [pc, #380]	@ (800239c <HAL_RCC_OscConfig+0x470>)
 8002220:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002222:	4a5e      	ldr	r2, [pc, #376]	@ (800239c <HAL_RCC_OscConfig+0x470>)
 8002224:	f043 0304 	orr.w	r3, r3, #4
 8002228:	6713      	str	r3, [r2, #112]	@ 0x70
 800222a:	4b5c      	ldr	r3, [pc, #368]	@ (800239c <HAL_RCC_OscConfig+0x470>)
 800222c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800222e:	4a5b      	ldr	r2, [pc, #364]	@ (800239c <HAL_RCC_OscConfig+0x470>)
 8002230:	f043 0301 	orr.w	r3, r3, #1
 8002234:	6713      	str	r3, [r2, #112]	@ 0x70
 8002236:	e00b      	b.n	8002250 <HAL_RCC_OscConfig+0x324>
 8002238:	4b58      	ldr	r3, [pc, #352]	@ (800239c <HAL_RCC_OscConfig+0x470>)
 800223a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800223c:	4a57      	ldr	r2, [pc, #348]	@ (800239c <HAL_RCC_OscConfig+0x470>)
 800223e:	f023 0301 	bic.w	r3, r3, #1
 8002242:	6713      	str	r3, [r2, #112]	@ 0x70
 8002244:	4b55      	ldr	r3, [pc, #340]	@ (800239c <HAL_RCC_OscConfig+0x470>)
 8002246:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002248:	4a54      	ldr	r2, [pc, #336]	@ (800239c <HAL_RCC_OscConfig+0x470>)
 800224a:	f023 0304 	bic.w	r3, r3, #4
 800224e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d015      	beq.n	8002284 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002258:	f7ff fb26 	bl	80018a8 <HAL_GetTick>
 800225c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800225e:	e00a      	b.n	8002276 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002260:	f7ff fb22 	bl	80018a8 <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800226e:	4293      	cmp	r3, r2
 8002270:	d901      	bls.n	8002276 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002272:	2303      	movs	r3, #3
 8002274:	e0cb      	b.n	800240e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002276:	4b49      	ldr	r3, [pc, #292]	@ (800239c <HAL_RCC_OscConfig+0x470>)
 8002278:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800227a:	f003 0302 	and.w	r3, r3, #2
 800227e:	2b00      	cmp	r3, #0
 8002280:	d0ee      	beq.n	8002260 <HAL_RCC_OscConfig+0x334>
 8002282:	e014      	b.n	80022ae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002284:	f7ff fb10 	bl	80018a8 <HAL_GetTick>
 8002288:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800228a:	e00a      	b.n	80022a2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800228c:	f7ff fb0c 	bl	80018a8 <HAL_GetTick>
 8002290:	4602      	mov	r2, r0
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	f241 3288 	movw	r2, #5000	@ 0x1388
 800229a:	4293      	cmp	r3, r2
 800229c:	d901      	bls.n	80022a2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	e0b5      	b.n	800240e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022a2:	4b3e      	ldr	r3, [pc, #248]	@ (800239c <HAL_RCC_OscConfig+0x470>)
 80022a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022a6:	f003 0302 	and.w	r3, r3, #2
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d1ee      	bne.n	800228c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80022ae:	7dfb      	ldrb	r3, [r7, #23]
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d105      	bne.n	80022c0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022b4:	4b39      	ldr	r3, [pc, #228]	@ (800239c <HAL_RCC_OscConfig+0x470>)
 80022b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022b8:	4a38      	ldr	r2, [pc, #224]	@ (800239c <HAL_RCC_OscConfig+0x470>)
 80022ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80022be:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	699b      	ldr	r3, [r3, #24]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	f000 80a1 	beq.w	800240c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80022ca:	4b34      	ldr	r3, [pc, #208]	@ (800239c <HAL_RCC_OscConfig+0x470>)
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	f003 030c 	and.w	r3, r3, #12
 80022d2:	2b08      	cmp	r3, #8
 80022d4:	d05c      	beq.n	8002390 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	699b      	ldr	r3, [r3, #24]
 80022da:	2b02      	cmp	r3, #2
 80022dc:	d141      	bne.n	8002362 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022de:	4b31      	ldr	r3, [pc, #196]	@ (80023a4 <HAL_RCC_OscConfig+0x478>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e4:	f7ff fae0 	bl	80018a8 <HAL_GetTick>
 80022e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022ea:	e008      	b.n	80022fe <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022ec:	f7ff fadc 	bl	80018a8 <HAL_GetTick>
 80022f0:	4602      	mov	r2, r0
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	d901      	bls.n	80022fe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80022fa:	2303      	movs	r3, #3
 80022fc:	e087      	b.n	800240e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022fe:	4b27      	ldr	r3, [pc, #156]	@ (800239c <HAL_RCC_OscConfig+0x470>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d1f0      	bne.n	80022ec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	69da      	ldr	r2, [r3, #28]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6a1b      	ldr	r3, [r3, #32]
 8002312:	431a      	orrs	r2, r3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002318:	019b      	lsls	r3, r3, #6
 800231a:	431a      	orrs	r2, r3
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002320:	085b      	lsrs	r3, r3, #1
 8002322:	3b01      	subs	r3, #1
 8002324:	041b      	lsls	r3, r3, #16
 8002326:	431a      	orrs	r2, r3
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800232c:	061b      	lsls	r3, r3, #24
 800232e:	491b      	ldr	r1, [pc, #108]	@ (800239c <HAL_RCC_OscConfig+0x470>)
 8002330:	4313      	orrs	r3, r2
 8002332:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002334:	4b1b      	ldr	r3, [pc, #108]	@ (80023a4 <HAL_RCC_OscConfig+0x478>)
 8002336:	2201      	movs	r2, #1
 8002338:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800233a:	f7ff fab5 	bl	80018a8 <HAL_GetTick>
 800233e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002340:	e008      	b.n	8002354 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002342:	f7ff fab1 	bl	80018a8 <HAL_GetTick>
 8002346:	4602      	mov	r2, r0
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	1ad3      	subs	r3, r2, r3
 800234c:	2b02      	cmp	r3, #2
 800234e:	d901      	bls.n	8002354 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002350:	2303      	movs	r3, #3
 8002352:	e05c      	b.n	800240e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002354:	4b11      	ldr	r3, [pc, #68]	@ (800239c <HAL_RCC_OscConfig+0x470>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800235c:	2b00      	cmp	r3, #0
 800235e:	d0f0      	beq.n	8002342 <HAL_RCC_OscConfig+0x416>
 8002360:	e054      	b.n	800240c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002362:	4b10      	ldr	r3, [pc, #64]	@ (80023a4 <HAL_RCC_OscConfig+0x478>)
 8002364:	2200      	movs	r2, #0
 8002366:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002368:	f7ff fa9e 	bl	80018a8 <HAL_GetTick>
 800236c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800236e:	e008      	b.n	8002382 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002370:	f7ff fa9a 	bl	80018a8 <HAL_GetTick>
 8002374:	4602      	mov	r2, r0
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	2b02      	cmp	r3, #2
 800237c:	d901      	bls.n	8002382 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800237e:	2303      	movs	r3, #3
 8002380:	e045      	b.n	800240e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002382:	4b06      	ldr	r3, [pc, #24]	@ (800239c <HAL_RCC_OscConfig+0x470>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d1f0      	bne.n	8002370 <HAL_RCC_OscConfig+0x444>
 800238e:	e03d      	b.n	800240c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	699b      	ldr	r3, [r3, #24]
 8002394:	2b01      	cmp	r3, #1
 8002396:	d107      	bne.n	80023a8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	e038      	b.n	800240e <HAL_RCC_OscConfig+0x4e2>
 800239c:	40023800 	.word	0x40023800
 80023a0:	40007000 	.word	0x40007000
 80023a4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80023a8:	4b1b      	ldr	r3, [pc, #108]	@ (8002418 <HAL_RCC_OscConfig+0x4ec>)
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	699b      	ldr	r3, [r3, #24]
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d028      	beq.n	8002408 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d121      	bne.n	8002408 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023ce:	429a      	cmp	r2, r3
 80023d0:	d11a      	bne.n	8002408 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80023d2:	68fa      	ldr	r2, [r7, #12]
 80023d4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80023d8:	4013      	ands	r3, r2
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80023de:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d111      	bne.n	8002408 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023ee:	085b      	lsrs	r3, r3, #1
 80023f0:	3b01      	subs	r3, #1
 80023f2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d107      	bne.n	8002408 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002402:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002404:	429a      	cmp	r2, r3
 8002406:	d001      	beq.n	800240c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e000      	b.n	800240e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800240c:	2300      	movs	r3, #0
}
 800240e:	4618      	mov	r0, r3
 8002410:	3718      	adds	r7, #24
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	40023800 	.word	0x40023800

0800241c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b084      	sub	sp, #16
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
 8002424:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d101      	bne.n	8002430 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	e0cc      	b.n	80025ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002430:	4b68      	ldr	r3, [pc, #416]	@ (80025d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 0307 	and.w	r3, r3, #7
 8002438:	683a      	ldr	r2, [r7, #0]
 800243a:	429a      	cmp	r2, r3
 800243c:	d90c      	bls.n	8002458 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800243e:	4b65      	ldr	r3, [pc, #404]	@ (80025d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002440:	683a      	ldr	r2, [r7, #0]
 8002442:	b2d2      	uxtb	r2, r2
 8002444:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002446:	4b63      	ldr	r3, [pc, #396]	@ (80025d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 0307 	and.w	r3, r3, #7
 800244e:	683a      	ldr	r2, [r7, #0]
 8002450:	429a      	cmp	r2, r3
 8002452:	d001      	beq.n	8002458 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	e0b8      	b.n	80025ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 0302 	and.w	r3, r3, #2
 8002460:	2b00      	cmp	r3, #0
 8002462:	d020      	beq.n	80024a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 0304 	and.w	r3, r3, #4
 800246c:	2b00      	cmp	r3, #0
 800246e:	d005      	beq.n	800247c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002470:	4b59      	ldr	r3, [pc, #356]	@ (80025d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	4a58      	ldr	r2, [pc, #352]	@ (80025d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002476:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800247a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0308 	and.w	r3, r3, #8
 8002484:	2b00      	cmp	r3, #0
 8002486:	d005      	beq.n	8002494 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002488:	4b53      	ldr	r3, [pc, #332]	@ (80025d8 <HAL_RCC_ClockConfig+0x1bc>)
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	4a52      	ldr	r2, [pc, #328]	@ (80025d8 <HAL_RCC_ClockConfig+0x1bc>)
 800248e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002492:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002494:	4b50      	ldr	r3, [pc, #320]	@ (80025d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	494d      	ldr	r1, [pc, #308]	@ (80025d8 <HAL_RCC_ClockConfig+0x1bc>)
 80024a2:	4313      	orrs	r3, r2
 80024a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 0301 	and.w	r3, r3, #1
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d044      	beq.n	800253c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d107      	bne.n	80024ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ba:	4b47      	ldr	r3, [pc, #284]	@ (80025d8 <HAL_RCC_ClockConfig+0x1bc>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d119      	bne.n	80024fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e07f      	b.n	80025ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	2b02      	cmp	r3, #2
 80024d0:	d003      	beq.n	80024da <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024d6:	2b03      	cmp	r3, #3
 80024d8:	d107      	bne.n	80024ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024da:	4b3f      	ldr	r3, [pc, #252]	@ (80025d8 <HAL_RCC_ClockConfig+0x1bc>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d109      	bne.n	80024fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e06f      	b.n	80025ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024ea:	4b3b      	ldr	r3, [pc, #236]	@ (80025d8 <HAL_RCC_ClockConfig+0x1bc>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 0302 	and.w	r3, r3, #2
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d101      	bne.n	80024fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e067      	b.n	80025ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024fa:	4b37      	ldr	r3, [pc, #220]	@ (80025d8 <HAL_RCC_ClockConfig+0x1bc>)
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	f023 0203 	bic.w	r2, r3, #3
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	4934      	ldr	r1, [pc, #208]	@ (80025d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002508:	4313      	orrs	r3, r2
 800250a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800250c:	f7ff f9cc 	bl	80018a8 <HAL_GetTick>
 8002510:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002512:	e00a      	b.n	800252a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002514:	f7ff f9c8 	bl	80018a8 <HAL_GetTick>
 8002518:	4602      	mov	r2, r0
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002522:	4293      	cmp	r3, r2
 8002524:	d901      	bls.n	800252a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002526:	2303      	movs	r3, #3
 8002528:	e04f      	b.n	80025ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800252a:	4b2b      	ldr	r3, [pc, #172]	@ (80025d8 <HAL_RCC_ClockConfig+0x1bc>)
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	f003 020c 	and.w	r2, r3, #12
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	429a      	cmp	r2, r3
 800253a:	d1eb      	bne.n	8002514 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800253c:	4b25      	ldr	r3, [pc, #148]	@ (80025d4 <HAL_RCC_ClockConfig+0x1b8>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 0307 	and.w	r3, r3, #7
 8002544:	683a      	ldr	r2, [r7, #0]
 8002546:	429a      	cmp	r2, r3
 8002548:	d20c      	bcs.n	8002564 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800254a:	4b22      	ldr	r3, [pc, #136]	@ (80025d4 <HAL_RCC_ClockConfig+0x1b8>)
 800254c:	683a      	ldr	r2, [r7, #0]
 800254e:	b2d2      	uxtb	r2, r2
 8002550:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002552:	4b20      	ldr	r3, [pc, #128]	@ (80025d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0307 	and.w	r3, r3, #7
 800255a:	683a      	ldr	r2, [r7, #0]
 800255c:	429a      	cmp	r2, r3
 800255e:	d001      	beq.n	8002564 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	e032      	b.n	80025ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 0304 	and.w	r3, r3, #4
 800256c:	2b00      	cmp	r3, #0
 800256e:	d008      	beq.n	8002582 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002570:	4b19      	ldr	r3, [pc, #100]	@ (80025d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	68db      	ldr	r3, [r3, #12]
 800257c:	4916      	ldr	r1, [pc, #88]	@ (80025d8 <HAL_RCC_ClockConfig+0x1bc>)
 800257e:	4313      	orrs	r3, r2
 8002580:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0308 	and.w	r3, r3, #8
 800258a:	2b00      	cmp	r3, #0
 800258c:	d009      	beq.n	80025a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800258e:	4b12      	ldr	r3, [pc, #72]	@ (80025d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	691b      	ldr	r3, [r3, #16]
 800259a:	00db      	lsls	r3, r3, #3
 800259c:	490e      	ldr	r1, [pc, #56]	@ (80025d8 <HAL_RCC_ClockConfig+0x1bc>)
 800259e:	4313      	orrs	r3, r2
 80025a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80025a2:	f000 f821 	bl	80025e8 <HAL_RCC_GetSysClockFreq>
 80025a6:	4602      	mov	r2, r0
 80025a8:	4b0b      	ldr	r3, [pc, #44]	@ (80025d8 <HAL_RCC_ClockConfig+0x1bc>)
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	091b      	lsrs	r3, r3, #4
 80025ae:	f003 030f 	and.w	r3, r3, #15
 80025b2:	490a      	ldr	r1, [pc, #40]	@ (80025dc <HAL_RCC_ClockConfig+0x1c0>)
 80025b4:	5ccb      	ldrb	r3, [r1, r3]
 80025b6:	fa22 f303 	lsr.w	r3, r2, r3
 80025ba:	4a09      	ldr	r2, [pc, #36]	@ (80025e0 <HAL_RCC_ClockConfig+0x1c4>)
 80025bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80025be:	4b09      	ldr	r3, [pc, #36]	@ (80025e4 <HAL_RCC_ClockConfig+0x1c8>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4618      	mov	r0, r3
 80025c4:	f7fe fd74 	bl	80010b0 <HAL_InitTick>

  return HAL_OK;
 80025c8:	2300      	movs	r3, #0
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3710      	adds	r7, #16
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	40023c00 	.word	0x40023c00
 80025d8:	40023800 	.word	0x40023800
 80025dc:	08007cf4 	.word	0x08007cf4
 80025e0:	20000000 	.word	0x20000000
 80025e4:	20000004 	.word	0x20000004

080025e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025ec:	b094      	sub	sp, #80	@ 0x50
 80025ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80025f0:	2300      	movs	r3, #0
 80025f2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80025f4:	2300      	movs	r3, #0
 80025f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80025f8:	2300      	movs	r3, #0
 80025fa:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80025fc:	2300      	movs	r3, #0
 80025fe:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002600:	4b79      	ldr	r3, [pc, #484]	@ (80027e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	f003 030c 	and.w	r3, r3, #12
 8002608:	2b08      	cmp	r3, #8
 800260a:	d00d      	beq.n	8002628 <HAL_RCC_GetSysClockFreq+0x40>
 800260c:	2b08      	cmp	r3, #8
 800260e:	f200 80e1 	bhi.w	80027d4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002612:	2b00      	cmp	r3, #0
 8002614:	d002      	beq.n	800261c <HAL_RCC_GetSysClockFreq+0x34>
 8002616:	2b04      	cmp	r3, #4
 8002618:	d003      	beq.n	8002622 <HAL_RCC_GetSysClockFreq+0x3a>
 800261a:	e0db      	b.n	80027d4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800261c:	4b73      	ldr	r3, [pc, #460]	@ (80027ec <HAL_RCC_GetSysClockFreq+0x204>)
 800261e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002620:	e0db      	b.n	80027da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002622:	4b73      	ldr	r3, [pc, #460]	@ (80027f0 <HAL_RCC_GetSysClockFreq+0x208>)
 8002624:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002626:	e0d8      	b.n	80027da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002628:	4b6f      	ldr	r3, [pc, #444]	@ (80027e8 <HAL_RCC_GetSysClockFreq+0x200>)
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002630:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002632:	4b6d      	ldr	r3, [pc, #436]	@ (80027e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800263a:	2b00      	cmp	r3, #0
 800263c:	d063      	beq.n	8002706 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800263e:	4b6a      	ldr	r3, [pc, #424]	@ (80027e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	099b      	lsrs	r3, r3, #6
 8002644:	2200      	movs	r2, #0
 8002646:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002648:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800264a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800264c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002650:	633b      	str	r3, [r7, #48]	@ 0x30
 8002652:	2300      	movs	r3, #0
 8002654:	637b      	str	r3, [r7, #52]	@ 0x34
 8002656:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800265a:	4622      	mov	r2, r4
 800265c:	462b      	mov	r3, r5
 800265e:	f04f 0000 	mov.w	r0, #0
 8002662:	f04f 0100 	mov.w	r1, #0
 8002666:	0159      	lsls	r1, r3, #5
 8002668:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800266c:	0150      	lsls	r0, r2, #5
 800266e:	4602      	mov	r2, r0
 8002670:	460b      	mov	r3, r1
 8002672:	4621      	mov	r1, r4
 8002674:	1a51      	subs	r1, r2, r1
 8002676:	6139      	str	r1, [r7, #16]
 8002678:	4629      	mov	r1, r5
 800267a:	eb63 0301 	sbc.w	r3, r3, r1
 800267e:	617b      	str	r3, [r7, #20]
 8002680:	f04f 0200 	mov.w	r2, #0
 8002684:	f04f 0300 	mov.w	r3, #0
 8002688:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800268c:	4659      	mov	r1, fp
 800268e:	018b      	lsls	r3, r1, #6
 8002690:	4651      	mov	r1, sl
 8002692:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002696:	4651      	mov	r1, sl
 8002698:	018a      	lsls	r2, r1, #6
 800269a:	4651      	mov	r1, sl
 800269c:	ebb2 0801 	subs.w	r8, r2, r1
 80026a0:	4659      	mov	r1, fp
 80026a2:	eb63 0901 	sbc.w	r9, r3, r1
 80026a6:	f04f 0200 	mov.w	r2, #0
 80026aa:	f04f 0300 	mov.w	r3, #0
 80026ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80026b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80026b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80026ba:	4690      	mov	r8, r2
 80026bc:	4699      	mov	r9, r3
 80026be:	4623      	mov	r3, r4
 80026c0:	eb18 0303 	adds.w	r3, r8, r3
 80026c4:	60bb      	str	r3, [r7, #8]
 80026c6:	462b      	mov	r3, r5
 80026c8:	eb49 0303 	adc.w	r3, r9, r3
 80026cc:	60fb      	str	r3, [r7, #12]
 80026ce:	f04f 0200 	mov.w	r2, #0
 80026d2:	f04f 0300 	mov.w	r3, #0
 80026d6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80026da:	4629      	mov	r1, r5
 80026dc:	024b      	lsls	r3, r1, #9
 80026de:	4621      	mov	r1, r4
 80026e0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80026e4:	4621      	mov	r1, r4
 80026e6:	024a      	lsls	r2, r1, #9
 80026e8:	4610      	mov	r0, r2
 80026ea:	4619      	mov	r1, r3
 80026ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80026ee:	2200      	movs	r2, #0
 80026f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80026f2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80026f4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80026f8:	f7fd fd72 	bl	80001e0 <__aeabi_uldivmod>
 80026fc:	4602      	mov	r2, r0
 80026fe:	460b      	mov	r3, r1
 8002700:	4613      	mov	r3, r2
 8002702:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002704:	e058      	b.n	80027b8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002706:	4b38      	ldr	r3, [pc, #224]	@ (80027e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	099b      	lsrs	r3, r3, #6
 800270c:	2200      	movs	r2, #0
 800270e:	4618      	mov	r0, r3
 8002710:	4611      	mov	r1, r2
 8002712:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002716:	623b      	str	r3, [r7, #32]
 8002718:	2300      	movs	r3, #0
 800271a:	627b      	str	r3, [r7, #36]	@ 0x24
 800271c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002720:	4642      	mov	r2, r8
 8002722:	464b      	mov	r3, r9
 8002724:	f04f 0000 	mov.w	r0, #0
 8002728:	f04f 0100 	mov.w	r1, #0
 800272c:	0159      	lsls	r1, r3, #5
 800272e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002732:	0150      	lsls	r0, r2, #5
 8002734:	4602      	mov	r2, r0
 8002736:	460b      	mov	r3, r1
 8002738:	4641      	mov	r1, r8
 800273a:	ebb2 0a01 	subs.w	sl, r2, r1
 800273e:	4649      	mov	r1, r9
 8002740:	eb63 0b01 	sbc.w	fp, r3, r1
 8002744:	f04f 0200 	mov.w	r2, #0
 8002748:	f04f 0300 	mov.w	r3, #0
 800274c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002750:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002754:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002758:	ebb2 040a 	subs.w	r4, r2, sl
 800275c:	eb63 050b 	sbc.w	r5, r3, fp
 8002760:	f04f 0200 	mov.w	r2, #0
 8002764:	f04f 0300 	mov.w	r3, #0
 8002768:	00eb      	lsls	r3, r5, #3
 800276a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800276e:	00e2      	lsls	r2, r4, #3
 8002770:	4614      	mov	r4, r2
 8002772:	461d      	mov	r5, r3
 8002774:	4643      	mov	r3, r8
 8002776:	18e3      	adds	r3, r4, r3
 8002778:	603b      	str	r3, [r7, #0]
 800277a:	464b      	mov	r3, r9
 800277c:	eb45 0303 	adc.w	r3, r5, r3
 8002780:	607b      	str	r3, [r7, #4]
 8002782:	f04f 0200 	mov.w	r2, #0
 8002786:	f04f 0300 	mov.w	r3, #0
 800278a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800278e:	4629      	mov	r1, r5
 8002790:	028b      	lsls	r3, r1, #10
 8002792:	4621      	mov	r1, r4
 8002794:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002798:	4621      	mov	r1, r4
 800279a:	028a      	lsls	r2, r1, #10
 800279c:	4610      	mov	r0, r2
 800279e:	4619      	mov	r1, r3
 80027a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80027a2:	2200      	movs	r2, #0
 80027a4:	61bb      	str	r3, [r7, #24]
 80027a6:	61fa      	str	r2, [r7, #28]
 80027a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80027ac:	f7fd fd18 	bl	80001e0 <__aeabi_uldivmod>
 80027b0:	4602      	mov	r2, r0
 80027b2:	460b      	mov	r3, r1
 80027b4:	4613      	mov	r3, r2
 80027b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80027b8:	4b0b      	ldr	r3, [pc, #44]	@ (80027e8 <HAL_RCC_GetSysClockFreq+0x200>)
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	0c1b      	lsrs	r3, r3, #16
 80027be:	f003 0303 	and.w	r3, r3, #3
 80027c2:	3301      	adds	r3, #1
 80027c4:	005b      	lsls	r3, r3, #1
 80027c6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80027c8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80027ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80027cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80027d0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80027d2:	e002      	b.n	80027da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80027d4:	4b05      	ldr	r3, [pc, #20]	@ (80027ec <HAL_RCC_GetSysClockFreq+0x204>)
 80027d6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80027d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80027dc:	4618      	mov	r0, r3
 80027de:	3750      	adds	r7, #80	@ 0x50
 80027e0:	46bd      	mov	sp, r7
 80027e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80027e6:	bf00      	nop
 80027e8:	40023800 	.word	0x40023800
 80027ec:	00f42400 	.word	0x00f42400
 80027f0:	007a1200 	.word	0x007a1200

080027f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027f4:	b480      	push	{r7}
 80027f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027f8:	4b03      	ldr	r3, [pc, #12]	@ (8002808 <HAL_RCC_GetHCLKFreq+0x14>)
 80027fa:	681b      	ldr	r3, [r3, #0]
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr
 8002806:	bf00      	nop
 8002808:	20000000 	.word	0x20000000

0800280c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002810:	f7ff fff0 	bl	80027f4 <HAL_RCC_GetHCLKFreq>
 8002814:	4602      	mov	r2, r0
 8002816:	4b05      	ldr	r3, [pc, #20]	@ (800282c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	0a9b      	lsrs	r3, r3, #10
 800281c:	f003 0307 	and.w	r3, r3, #7
 8002820:	4903      	ldr	r1, [pc, #12]	@ (8002830 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002822:	5ccb      	ldrb	r3, [r1, r3]
 8002824:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002828:	4618      	mov	r0, r3
 800282a:	bd80      	pop	{r7, pc}
 800282c:	40023800 	.word	0x40023800
 8002830:	08007d04 	.word	0x08007d04

08002834 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002838:	f7ff ffdc 	bl	80027f4 <HAL_RCC_GetHCLKFreq>
 800283c:	4602      	mov	r2, r0
 800283e:	4b05      	ldr	r3, [pc, #20]	@ (8002854 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	0b5b      	lsrs	r3, r3, #13
 8002844:	f003 0307 	and.w	r3, r3, #7
 8002848:	4903      	ldr	r1, [pc, #12]	@ (8002858 <HAL_RCC_GetPCLK2Freq+0x24>)
 800284a:	5ccb      	ldrb	r3, [r1, r3]
 800284c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002850:	4618      	mov	r0, r3
 8002852:	bd80      	pop	{r7, pc}
 8002854:	40023800 	.word	0x40023800
 8002858:	08007d04 	.word	0x08007d04

0800285c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800285c:	b480      	push	{r7}
 800285e:	b083      	sub	sp, #12
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
 8002864:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	220f      	movs	r2, #15
 800286a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800286c:	4b12      	ldr	r3, [pc, #72]	@ (80028b8 <HAL_RCC_GetClockConfig+0x5c>)
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	f003 0203 	and.w	r2, r3, #3
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002878:	4b0f      	ldr	r3, [pc, #60]	@ (80028b8 <HAL_RCC_GetClockConfig+0x5c>)
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002884:	4b0c      	ldr	r3, [pc, #48]	@ (80028b8 <HAL_RCC_GetClockConfig+0x5c>)
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002890:	4b09      	ldr	r3, [pc, #36]	@ (80028b8 <HAL_RCC_GetClockConfig+0x5c>)
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	08db      	lsrs	r3, r3, #3
 8002896:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800289e:	4b07      	ldr	r3, [pc, #28]	@ (80028bc <HAL_RCC_GetClockConfig+0x60>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 0207 	and.w	r2, r3, #7
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	601a      	str	r2, [r3, #0]
}
 80028aa:	bf00      	nop
 80028ac:	370c      	adds	r7, #12
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr
 80028b6:	bf00      	nop
 80028b8:	40023800 	.word	0x40023800
 80028bc:	40023c00 	.word	0x40023c00

080028c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d101      	bne.n	80028d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e041      	b.n	8002956 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d106      	bne.n	80028ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2200      	movs	r2, #0
 80028e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f7fe fddc 	bl	80014a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2202      	movs	r2, #2
 80028f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	3304      	adds	r3, #4
 80028fc:	4619      	mov	r1, r3
 80028fe:	4610      	mov	r0, r2
 8002900:	f000 fed6 	bl	80036b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2201      	movs	r2, #1
 8002908:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2201      	movs	r2, #1
 8002910:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2201      	movs	r2, #1
 8002918:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2201      	movs	r2, #1
 8002920:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2201      	movs	r2, #1
 8002928:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2201      	movs	r2, #1
 8002930:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2201      	movs	r2, #1
 8002938:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2201      	movs	r2, #1
 8002940:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2201      	movs	r2, #1
 8002948:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2201      	movs	r2, #1
 8002950:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002954:	2300      	movs	r3, #0
}
 8002956:	4618      	mov	r0, r3
 8002958:	3708      	adds	r7, #8
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
	...

08002960 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002960:	b480      	push	{r7}
 8002962:	b085      	sub	sp, #20
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800296e:	b2db      	uxtb	r3, r3
 8002970:	2b01      	cmp	r3, #1
 8002972:	d001      	beq.n	8002978 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	e03c      	b.n	80029f2 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2202      	movs	r2, #2
 800297c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a1e      	ldr	r2, [pc, #120]	@ (8002a00 <HAL_TIM_Base_Start+0xa0>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d018      	beq.n	80029bc <HAL_TIM_Base_Start+0x5c>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002992:	d013      	beq.n	80029bc <HAL_TIM_Base_Start+0x5c>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a1a      	ldr	r2, [pc, #104]	@ (8002a04 <HAL_TIM_Base_Start+0xa4>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d00e      	beq.n	80029bc <HAL_TIM_Base_Start+0x5c>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a19      	ldr	r2, [pc, #100]	@ (8002a08 <HAL_TIM_Base_Start+0xa8>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d009      	beq.n	80029bc <HAL_TIM_Base_Start+0x5c>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a17      	ldr	r2, [pc, #92]	@ (8002a0c <HAL_TIM_Base_Start+0xac>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d004      	beq.n	80029bc <HAL_TIM_Base_Start+0x5c>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a16      	ldr	r2, [pc, #88]	@ (8002a10 <HAL_TIM_Base_Start+0xb0>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d111      	bne.n	80029e0 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	f003 0307 	and.w	r3, r3, #7
 80029c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2b06      	cmp	r3, #6
 80029cc:	d010      	beq.n	80029f0 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f042 0201 	orr.w	r2, r2, #1
 80029dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029de:	e007      	b.n	80029f0 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f042 0201 	orr.w	r2, r2, #1
 80029ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80029f0:	2300      	movs	r3, #0
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3714      	adds	r7, #20
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr
 80029fe:	bf00      	nop
 8002a00:	40010000 	.word	0x40010000
 8002a04:	40000400 	.word	0x40000400
 8002a08:	40000800 	.word	0x40000800
 8002a0c:	40000c00 	.word	0x40000c00
 8002a10:	40014000 	.word	0x40014000

08002a14 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b085      	sub	sp, #20
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	d001      	beq.n	8002a2c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e044      	b.n	8002ab6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2202      	movs	r2, #2
 8002a30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	68da      	ldr	r2, [r3, #12]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f042 0201 	orr.w	r2, r2, #1
 8002a42:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a1e      	ldr	r2, [pc, #120]	@ (8002ac4 <HAL_TIM_Base_Start_IT+0xb0>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d018      	beq.n	8002a80 <HAL_TIM_Base_Start_IT+0x6c>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a56:	d013      	beq.n	8002a80 <HAL_TIM_Base_Start_IT+0x6c>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a1a      	ldr	r2, [pc, #104]	@ (8002ac8 <HAL_TIM_Base_Start_IT+0xb4>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d00e      	beq.n	8002a80 <HAL_TIM_Base_Start_IT+0x6c>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a19      	ldr	r2, [pc, #100]	@ (8002acc <HAL_TIM_Base_Start_IT+0xb8>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d009      	beq.n	8002a80 <HAL_TIM_Base_Start_IT+0x6c>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a17      	ldr	r2, [pc, #92]	@ (8002ad0 <HAL_TIM_Base_Start_IT+0xbc>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d004      	beq.n	8002a80 <HAL_TIM_Base_Start_IT+0x6c>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a16      	ldr	r2, [pc, #88]	@ (8002ad4 <HAL_TIM_Base_Start_IT+0xc0>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d111      	bne.n	8002aa4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	f003 0307 	and.w	r3, r3, #7
 8002a8a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2b06      	cmp	r3, #6
 8002a90:	d010      	beq.n	8002ab4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f042 0201 	orr.w	r2, r2, #1
 8002aa0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002aa2:	e007      	b.n	8002ab4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f042 0201 	orr.w	r2, r2, #1
 8002ab2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ab4:	2300      	movs	r3, #0
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3714      	adds	r7, #20
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr
 8002ac2:	bf00      	nop
 8002ac4:	40010000 	.word	0x40010000
 8002ac8:	40000400 	.word	0x40000400
 8002acc:	40000800 	.word	0x40000800
 8002ad0:	40000c00 	.word	0x40000c00
 8002ad4:	40014000 	.word	0x40014000

08002ad8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b082      	sub	sp, #8
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d101      	bne.n	8002aea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e041      	b.n	8002b6e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d106      	bne.n	8002b04 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2200      	movs	r2, #0
 8002afa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f7fe fcae 	bl	8001460 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2202      	movs	r2, #2
 8002b08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	3304      	adds	r3, #4
 8002b14:	4619      	mov	r1, r3
 8002b16:	4610      	mov	r0, r2
 8002b18:	f000 fdca 	bl	80036b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2201      	movs	r2, #1
 8002b20:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2201      	movs	r2, #1
 8002b28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2201      	movs	r2, #1
 8002b30:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2201      	movs	r2, #1
 8002b38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2201      	movs	r2, #1
 8002b40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2201      	movs	r2, #1
 8002b48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2201      	movs	r2, #1
 8002b58:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2201      	movs	r2, #1
 8002b60:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2201      	movs	r2, #1
 8002b68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002b6c:	2300      	movs	r3, #0
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3708      	adds	r7, #8
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
	...

08002b78 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b084      	sub	sp, #16
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
 8002b80:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d109      	bne.n	8002b9c <HAL_TIM_PWM_Start+0x24>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	bf14      	ite	ne
 8002b94:	2301      	movne	r3, #1
 8002b96:	2300      	moveq	r3, #0
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	e022      	b.n	8002be2 <HAL_TIM_PWM_Start+0x6a>
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	2b04      	cmp	r3, #4
 8002ba0:	d109      	bne.n	8002bb6 <HAL_TIM_PWM_Start+0x3e>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	bf14      	ite	ne
 8002bae:	2301      	movne	r3, #1
 8002bb0:	2300      	moveq	r3, #0
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	e015      	b.n	8002be2 <HAL_TIM_PWM_Start+0x6a>
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	2b08      	cmp	r3, #8
 8002bba:	d109      	bne.n	8002bd0 <HAL_TIM_PWM_Start+0x58>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	bf14      	ite	ne
 8002bc8:	2301      	movne	r3, #1
 8002bca:	2300      	moveq	r3, #0
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	e008      	b.n	8002be2 <HAL_TIM_PWM_Start+0x6a>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	bf14      	ite	ne
 8002bdc:	2301      	movne	r3, #1
 8002bde:	2300      	moveq	r3, #0
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d001      	beq.n	8002bea <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e068      	b.n	8002cbc <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d104      	bne.n	8002bfa <HAL_TIM_PWM_Start+0x82>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2202      	movs	r2, #2
 8002bf4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002bf8:	e013      	b.n	8002c22 <HAL_TIM_PWM_Start+0xaa>
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	2b04      	cmp	r3, #4
 8002bfe:	d104      	bne.n	8002c0a <HAL_TIM_PWM_Start+0x92>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2202      	movs	r2, #2
 8002c04:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002c08:	e00b      	b.n	8002c22 <HAL_TIM_PWM_Start+0xaa>
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	2b08      	cmp	r3, #8
 8002c0e:	d104      	bne.n	8002c1a <HAL_TIM_PWM_Start+0xa2>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2202      	movs	r2, #2
 8002c14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002c18:	e003      	b.n	8002c22 <HAL_TIM_PWM_Start+0xaa>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2202      	movs	r2, #2
 8002c1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	2201      	movs	r2, #1
 8002c28:	6839      	ldr	r1, [r7, #0]
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f001 f910 	bl	8003e50 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a23      	ldr	r2, [pc, #140]	@ (8002cc4 <HAL_TIM_PWM_Start+0x14c>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d107      	bne.n	8002c4a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002c48:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a1d      	ldr	r2, [pc, #116]	@ (8002cc4 <HAL_TIM_PWM_Start+0x14c>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d018      	beq.n	8002c86 <HAL_TIM_PWM_Start+0x10e>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c5c:	d013      	beq.n	8002c86 <HAL_TIM_PWM_Start+0x10e>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a19      	ldr	r2, [pc, #100]	@ (8002cc8 <HAL_TIM_PWM_Start+0x150>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d00e      	beq.n	8002c86 <HAL_TIM_PWM_Start+0x10e>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a17      	ldr	r2, [pc, #92]	@ (8002ccc <HAL_TIM_PWM_Start+0x154>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d009      	beq.n	8002c86 <HAL_TIM_PWM_Start+0x10e>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a16      	ldr	r2, [pc, #88]	@ (8002cd0 <HAL_TIM_PWM_Start+0x158>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d004      	beq.n	8002c86 <HAL_TIM_PWM_Start+0x10e>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a14      	ldr	r2, [pc, #80]	@ (8002cd4 <HAL_TIM_PWM_Start+0x15c>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d111      	bne.n	8002caa <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	f003 0307 	and.w	r3, r3, #7
 8002c90:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2b06      	cmp	r3, #6
 8002c96:	d010      	beq.n	8002cba <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f042 0201 	orr.w	r2, r2, #1
 8002ca6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ca8:	e007      	b.n	8002cba <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f042 0201 	orr.w	r2, r2, #1
 8002cb8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002cba:	2300      	movs	r3, #0
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3710      	adds	r7, #16
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}
 8002cc4:	40010000 	.word	0x40010000
 8002cc8:	40000400 	.word	0x40000400
 8002ccc:	40000800 	.word	0x40000800
 8002cd0:	40000c00 	.word	0x40000c00
 8002cd4:	40014000 	.word	0x40014000

08002cd8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b082      	sub	sp, #8
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d101      	bne.n	8002cea <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e041      	b.n	8002d6e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d106      	bne.n	8002d04 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f000 f839 	bl	8002d76 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2202      	movs	r2, #2
 8002d08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	3304      	adds	r3, #4
 8002d14:	4619      	mov	r1, r3
 8002d16:	4610      	mov	r0, r2
 8002d18:	f000 fcca 	bl	80036b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2201      	movs	r2, #1
 8002d20:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2201      	movs	r2, #1
 8002d28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2201      	movs	r2, #1
 8002d30:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2201      	movs	r2, #1
 8002d38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2201      	movs	r2, #1
 8002d40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2201      	movs	r2, #1
 8002d48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2201      	movs	r2, #1
 8002d58:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2201      	movs	r2, #1
 8002d68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002d6c:	2300      	movs	r3, #0
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3708      	adds	r7, #8
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}

08002d76 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002d76:	b480      	push	{r7}
 8002d78:	b083      	sub	sp, #12
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002d7e:	bf00      	nop
 8002d80:	370c      	adds	r7, #12
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr
	...

08002d8c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b084      	sub	sp, #16
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d96:	2300      	movs	r3, #0
 8002d98:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d104      	bne.n	8002daa <HAL_TIM_IC_Start_IT+0x1e>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	e013      	b.n	8002dd2 <HAL_TIM_IC_Start_IT+0x46>
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	2b04      	cmp	r3, #4
 8002dae:	d104      	bne.n	8002dba <HAL_TIM_IC_Start_IT+0x2e>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	e00b      	b.n	8002dd2 <HAL_TIM_IC_Start_IT+0x46>
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	2b08      	cmp	r3, #8
 8002dbe:	d104      	bne.n	8002dca <HAL_TIM_IC_Start_IT+0x3e>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	e003      	b.n	8002dd2 <HAL_TIM_IC_Start_IT+0x46>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d104      	bne.n	8002de4 <HAL_TIM_IC_Start_IT+0x58>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	e013      	b.n	8002e0c <HAL_TIM_IC_Start_IT+0x80>
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	2b04      	cmp	r3, #4
 8002de8:	d104      	bne.n	8002df4 <HAL_TIM_IC_Start_IT+0x68>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	e00b      	b.n	8002e0c <HAL_TIM_IC_Start_IT+0x80>
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	2b08      	cmp	r3, #8
 8002df8:	d104      	bne.n	8002e04 <HAL_TIM_IC_Start_IT+0x78>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	e003      	b.n	8002e0c <HAL_TIM_IC_Start_IT+0x80>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002e0e:	7bbb      	ldrb	r3, [r7, #14]
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d102      	bne.n	8002e1a <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002e14:	7b7b      	ldrb	r3, [r7, #13]
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d001      	beq.n	8002e1e <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e0c2      	b.n	8002fa4 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d104      	bne.n	8002e2e <HAL_TIM_IC_Start_IT+0xa2>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2202      	movs	r2, #2
 8002e28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002e2c:	e013      	b.n	8002e56 <HAL_TIM_IC_Start_IT+0xca>
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	2b04      	cmp	r3, #4
 8002e32:	d104      	bne.n	8002e3e <HAL_TIM_IC_Start_IT+0xb2>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2202      	movs	r2, #2
 8002e38:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002e3c:	e00b      	b.n	8002e56 <HAL_TIM_IC_Start_IT+0xca>
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	2b08      	cmp	r3, #8
 8002e42:	d104      	bne.n	8002e4e <HAL_TIM_IC_Start_IT+0xc2>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2202      	movs	r2, #2
 8002e48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002e4c:	e003      	b.n	8002e56 <HAL_TIM_IC_Start_IT+0xca>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2202      	movs	r2, #2
 8002e52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d104      	bne.n	8002e66 <HAL_TIM_IC_Start_IT+0xda>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2202      	movs	r2, #2
 8002e60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002e64:	e013      	b.n	8002e8e <HAL_TIM_IC_Start_IT+0x102>
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	2b04      	cmp	r3, #4
 8002e6a:	d104      	bne.n	8002e76 <HAL_TIM_IC_Start_IT+0xea>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2202      	movs	r2, #2
 8002e70:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002e74:	e00b      	b.n	8002e8e <HAL_TIM_IC_Start_IT+0x102>
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	2b08      	cmp	r3, #8
 8002e7a:	d104      	bne.n	8002e86 <HAL_TIM_IC_Start_IT+0xfa>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2202      	movs	r2, #2
 8002e80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002e84:	e003      	b.n	8002e8e <HAL_TIM_IC_Start_IT+0x102>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2202      	movs	r2, #2
 8002e8a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	2b0c      	cmp	r3, #12
 8002e92:	d841      	bhi.n	8002f18 <HAL_TIM_IC_Start_IT+0x18c>
 8002e94:	a201      	add	r2, pc, #4	@ (adr r2, 8002e9c <HAL_TIM_IC_Start_IT+0x110>)
 8002e96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e9a:	bf00      	nop
 8002e9c:	08002ed1 	.word	0x08002ed1
 8002ea0:	08002f19 	.word	0x08002f19
 8002ea4:	08002f19 	.word	0x08002f19
 8002ea8:	08002f19 	.word	0x08002f19
 8002eac:	08002ee3 	.word	0x08002ee3
 8002eb0:	08002f19 	.word	0x08002f19
 8002eb4:	08002f19 	.word	0x08002f19
 8002eb8:	08002f19 	.word	0x08002f19
 8002ebc:	08002ef5 	.word	0x08002ef5
 8002ec0:	08002f19 	.word	0x08002f19
 8002ec4:	08002f19 	.word	0x08002f19
 8002ec8:	08002f19 	.word	0x08002f19
 8002ecc:	08002f07 	.word	0x08002f07
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	68da      	ldr	r2, [r3, #12]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f042 0202 	orr.w	r2, r2, #2
 8002ede:	60da      	str	r2, [r3, #12]
      break;
 8002ee0:	e01d      	b.n	8002f1e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	68da      	ldr	r2, [r3, #12]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f042 0204 	orr.w	r2, r2, #4
 8002ef0:	60da      	str	r2, [r3, #12]
      break;
 8002ef2:	e014      	b.n	8002f1e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	68da      	ldr	r2, [r3, #12]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f042 0208 	orr.w	r2, r2, #8
 8002f02:	60da      	str	r2, [r3, #12]
      break;
 8002f04:	e00b      	b.n	8002f1e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	68da      	ldr	r2, [r3, #12]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f042 0210 	orr.w	r2, r2, #16
 8002f14:	60da      	str	r2, [r3, #12]
      break;
 8002f16:	e002      	b.n	8002f1e <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	73fb      	strb	r3, [r7, #15]
      break;
 8002f1c:	bf00      	nop
  }

  if (status == HAL_OK)
 8002f1e:	7bfb      	ldrb	r3, [r7, #15]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d13e      	bne.n	8002fa2 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	2201      	movs	r2, #1
 8002f2a:	6839      	ldr	r1, [r7, #0]
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f000 ff8f 	bl	8003e50 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a1d      	ldr	r2, [pc, #116]	@ (8002fac <HAL_TIM_IC_Start_IT+0x220>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d018      	beq.n	8002f6e <HAL_TIM_IC_Start_IT+0x1e2>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f44:	d013      	beq.n	8002f6e <HAL_TIM_IC_Start_IT+0x1e2>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a19      	ldr	r2, [pc, #100]	@ (8002fb0 <HAL_TIM_IC_Start_IT+0x224>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d00e      	beq.n	8002f6e <HAL_TIM_IC_Start_IT+0x1e2>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a17      	ldr	r2, [pc, #92]	@ (8002fb4 <HAL_TIM_IC_Start_IT+0x228>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d009      	beq.n	8002f6e <HAL_TIM_IC_Start_IT+0x1e2>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a16      	ldr	r2, [pc, #88]	@ (8002fb8 <HAL_TIM_IC_Start_IT+0x22c>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d004      	beq.n	8002f6e <HAL_TIM_IC_Start_IT+0x1e2>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a14      	ldr	r2, [pc, #80]	@ (8002fbc <HAL_TIM_IC_Start_IT+0x230>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d111      	bne.n	8002f92 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	f003 0307 	and.w	r3, r3, #7
 8002f78:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	2b06      	cmp	r3, #6
 8002f7e:	d010      	beq.n	8002fa2 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f042 0201 	orr.w	r2, r2, #1
 8002f8e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f90:	e007      	b.n	8002fa2 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f042 0201 	orr.w	r2, r2, #1
 8002fa0:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002fa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	3710      	adds	r7, #16
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}
 8002fac:	40010000 	.word	0x40010000
 8002fb0:	40000400 	.word	0x40000400
 8002fb4:	40000800 	.word	0x40000800
 8002fb8:	40000c00 	.word	0x40000c00
 8002fbc:	40014000 	.word	0x40014000

08002fc0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b084      	sub	sp, #16
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	68db      	ldr	r3, [r3, #12]
 8002fce:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	691b      	ldr	r3, [r3, #16]
 8002fd6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	f003 0302 	and.w	r3, r3, #2
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d020      	beq.n	8003024 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	f003 0302 	and.w	r3, r3, #2
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d01b      	beq.n	8003024 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f06f 0202 	mvn.w	r2, #2
 8002ff4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	699b      	ldr	r3, [r3, #24]
 8003002:	f003 0303 	and.w	r3, r3, #3
 8003006:	2b00      	cmp	r3, #0
 8003008:	d003      	beq.n	8003012 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f7fd fcee 	bl	80009ec <HAL_TIM_IC_CaptureCallback>
 8003010:	e005      	b.n	800301e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f000 fb2e 	bl	8003674 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003018:	6878      	ldr	r0, [r7, #4]
 800301a:	f000 fb35 	bl	8003688 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2200      	movs	r2, #0
 8003022:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	f003 0304 	and.w	r3, r3, #4
 800302a:	2b00      	cmp	r3, #0
 800302c:	d020      	beq.n	8003070 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	f003 0304 	and.w	r3, r3, #4
 8003034:	2b00      	cmp	r3, #0
 8003036:	d01b      	beq.n	8003070 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f06f 0204 	mvn.w	r2, #4
 8003040:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2202      	movs	r2, #2
 8003046:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	699b      	ldr	r3, [r3, #24]
 800304e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003052:	2b00      	cmp	r3, #0
 8003054:	d003      	beq.n	800305e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f7fd fcc8 	bl	80009ec <HAL_TIM_IC_CaptureCallback>
 800305c:	e005      	b.n	800306a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f000 fb08 	bl	8003674 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	f000 fb0f 	bl	8003688 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2200      	movs	r2, #0
 800306e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	f003 0308 	and.w	r3, r3, #8
 8003076:	2b00      	cmp	r3, #0
 8003078:	d020      	beq.n	80030bc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	f003 0308 	and.w	r3, r3, #8
 8003080:	2b00      	cmp	r3, #0
 8003082:	d01b      	beq.n	80030bc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f06f 0208 	mvn.w	r2, #8
 800308c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2204      	movs	r2, #4
 8003092:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	69db      	ldr	r3, [r3, #28]
 800309a:	f003 0303 	and.w	r3, r3, #3
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d003      	beq.n	80030aa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f7fd fca2 	bl	80009ec <HAL_TIM_IC_CaptureCallback>
 80030a8:	e005      	b.n	80030b6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f000 fae2 	bl	8003674 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	f000 fae9 	bl	8003688 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2200      	movs	r2, #0
 80030ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	f003 0310 	and.w	r3, r3, #16
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d020      	beq.n	8003108 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	f003 0310 	and.w	r3, r3, #16
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d01b      	beq.n	8003108 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f06f 0210 	mvn.w	r2, #16
 80030d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2208      	movs	r2, #8
 80030de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	69db      	ldr	r3, [r3, #28]
 80030e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d003      	beq.n	80030f6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f7fd fc7c 	bl	80009ec <HAL_TIM_IC_CaptureCallback>
 80030f4:	e005      	b.n	8003102 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f000 fabc 	bl	8003674 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030fc:	6878      	ldr	r0, [r7, #4]
 80030fe:	f000 fac3 	bl	8003688 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2200      	movs	r2, #0
 8003106:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	f003 0301 	and.w	r3, r3, #1
 800310e:	2b00      	cmp	r3, #0
 8003110:	d00c      	beq.n	800312c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	f003 0301 	and.w	r3, r3, #1
 8003118:	2b00      	cmp	r3, #0
 800311a:	d007      	beq.n	800312c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f06f 0201 	mvn.w	r2, #1
 8003124:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f7fd fea4 	bl	8000e74 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003132:	2b00      	cmp	r3, #0
 8003134:	d00c      	beq.n	8003150 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800313c:	2b00      	cmp	r3, #0
 800313e:	d007      	beq.n	8003150 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003148:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f000 ff1e 	bl	8003f8c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003156:	2b00      	cmp	r3, #0
 8003158:	d00c      	beq.n	8003174 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003160:	2b00      	cmp	r3, #0
 8003162:	d007      	beq.n	8003174 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800316c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f000 fa94 	bl	800369c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	f003 0320 	and.w	r3, r3, #32
 800317a:	2b00      	cmp	r3, #0
 800317c:	d00c      	beq.n	8003198 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	f003 0320 	and.w	r3, r3, #32
 8003184:	2b00      	cmp	r3, #0
 8003186:	d007      	beq.n	8003198 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f06f 0220 	mvn.w	r2, #32
 8003190:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f000 fef0 	bl	8003f78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003198:	bf00      	nop
 800319a:	3710      	adds	r7, #16
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}

080031a0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b086      	sub	sp, #24
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	60f8      	str	r0, [r7, #12]
 80031a8:	60b9      	str	r1, [r7, #8]
 80031aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031ac:	2300      	movs	r3, #0
 80031ae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d101      	bne.n	80031be <HAL_TIM_IC_ConfigChannel+0x1e>
 80031ba:	2302      	movs	r3, #2
 80031bc:	e088      	b.n	80032d0 <HAL_TIM_IC_ConfigChannel+0x130>
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2201      	movs	r2, #1
 80031c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d11b      	bne.n	8003204 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80031dc:	f000 fc80 	bl	8003ae0 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	699a      	ldr	r2, [r3, #24]
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f022 020c 	bic.w	r2, r2, #12
 80031ee:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	6999      	ldr	r1, [r3, #24]
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	689a      	ldr	r2, [r3, #8]
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	430a      	orrs	r2, r1
 8003200:	619a      	str	r2, [r3, #24]
 8003202:	e060      	b.n	80032c6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2b04      	cmp	r3, #4
 8003208:	d11c      	bne.n	8003244 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800321a:	f000 fcf8 	bl	8003c0e <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	699a      	ldr	r2, [r3, #24]
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800322c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	6999      	ldr	r1, [r3, #24]
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	021a      	lsls	r2, r3, #8
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	430a      	orrs	r2, r1
 8003240:	619a      	str	r2, [r3, #24]
 8003242:	e040      	b.n	80032c6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2b08      	cmp	r3, #8
 8003248:	d11b      	bne.n	8003282 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800325a:	f000 fd45 	bl	8003ce8 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	69da      	ldr	r2, [r3, #28]
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f022 020c 	bic.w	r2, r2, #12
 800326c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	69d9      	ldr	r1, [r3, #28]
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	689a      	ldr	r2, [r3, #8]
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	430a      	orrs	r2, r1
 800327e:	61da      	str	r2, [r3, #28]
 8003280:	e021      	b.n	80032c6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2b0c      	cmp	r3, #12
 8003286:	d11c      	bne.n	80032c2 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8003298:	f000 fd62 	bl	8003d60 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	69da      	ldr	r2, [r3, #28]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80032aa:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	69d9      	ldr	r1, [r3, #28]
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	021a      	lsls	r2, r3, #8
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	430a      	orrs	r2, r1
 80032be:	61da      	str	r2, [r3, #28]
 80032c0:	e001      	b.n	80032c6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2200      	movs	r2, #0
 80032ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80032ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	3718      	adds	r7, #24
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}

080032d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b086      	sub	sp, #24
 80032dc:	af00      	add	r7, sp, #0
 80032de:	60f8      	str	r0, [r7, #12]
 80032e0:	60b9      	str	r1, [r7, #8]
 80032e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032e4:	2300      	movs	r3, #0
 80032e6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d101      	bne.n	80032f6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80032f2:	2302      	movs	r3, #2
 80032f4:	e0ae      	b.n	8003454 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2201      	movs	r2, #1
 80032fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2b0c      	cmp	r3, #12
 8003302:	f200 809f 	bhi.w	8003444 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003306:	a201      	add	r2, pc, #4	@ (adr r2, 800330c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800330c:	08003341 	.word	0x08003341
 8003310:	08003445 	.word	0x08003445
 8003314:	08003445 	.word	0x08003445
 8003318:	08003445 	.word	0x08003445
 800331c:	08003381 	.word	0x08003381
 8003320:	08003445 	.word	0x08003445
 8003324:	08003445 	.word	0x08003445
 8003328:	08003445 	.word	0x08003445
 800332c:	080033c3 	.word	0x080033c3
 8003330:	08003445 	.word	0x08003445
 8003334:	08003445 	.word	0x08003445
 8003338:	08003445 	.word	0x08003445
 800333c:	08003403 	.word	0x08003403
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	68b9      	ldr	r1, [r7, #8]
 8003346:	4618      	mov	r0, r3
 8003348:	f000 fa3e 	bl	80037c8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	699a      	ldr	r2, [r3, #24]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f042 0208 	orr.w	r2, r2, #8
 800335a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	699a      	ldr	r2, [r3, #24]
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f022 0204 	bic.w	r2, r2, #4
 800336a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	6999      	ldr	r1, [r3, #24]
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	691a      	ldr	r2, [r3, #16]
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	430a      	orrs	r2, r1
 800337c:	619a      	str	r2, [r3, #24]
      break;
 800337e:	e064      	b.n	800344a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	68b9      	ldr	r1, [r7, #8]
 8003386:	4618      	mov	r0, r3
 8003388:	f000 fa84 	bl	8003894 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	699a      	ldr	r2, [r3, #24]
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800339a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	699a      	ldr	r2, [r3, #24]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80033aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	6999      	ldr	r1, [r3, #24]
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	691b      	ldr	r3, [r3, #16]
 80033b6:	021a      	lsls	r2, r3, #8
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	430a      	orrs	r2, r1
 80033be:	619a      	str	r2, [r3, #24]
      break;
 80033c0:	e043      	b.n	800344a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	68b9      	ldr	r1, [r7, #8]
 80033c8:	4618      	mov	r0, r3
 80033ca:	f000 facf 	bl	800396c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	69da      	ldr	r2, [r3, #28]
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f042 0208 	orr.w	r2, r2, #8
 80033dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	69da      	ldr	r2, [r3, #28]
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f022 0204 	bic.w	r2, r2, #4
 80033ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	69d9      	ldr	r1, [r3, #28]
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	691a      	ldr	r2, [r3, #16]
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	430a      	orrs	r2, r1
 80033fe:	61da      	str	r2, [r3, #28]
      break;
 8003400:	e023      	b.n	800344a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	68b9      	ldr	r1, [r7, #8]
 8003408:	4618      	mov	r0, r3
 800340a:	f000 fb19 	bl	8003a40 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	69da      	ldr	r2, [r3, #28]
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800341c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	69da      	ldr	r2, [r3, #28]
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800342c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	69d9      	ldr	r1, [r3, #28]
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	691b      	ldr	r3, [r3, #16]
 8003438:	021a      	lsls	r2, r3, #8
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	430a      	orrs	r2, r1
 8003440:	61da      	str	r2, [r3, #28]
      break;
 8003442:	e002      	b.n	800344a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	75fb      	strb	r3, [r7, #23]
      break;
 8003448:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2200      	movs	r2, #0
 800344e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003452:	7dfb      	ldrb	r3, [r7, #23]
}
 8003454:	4618      	mov	r0, r3
 8003456:	3718      	adds	r7, #24
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}

0800345c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b084      	sub	sp, #16
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
 8003464:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003466:	2300      	movs	r3, #0
 8003468:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003470:	2b01      	cmp	r3, #1
 8003472:	d101      	bne.n	8003478 <HAL_TIM_ConfigClockSource+0x1c>
 8003474:	2302      	movs	r3, #2
 8003476:	e0b4      	b.n	80035e2 <HAL_TIM_ConfigClockSource+0x186>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2201      	movs	r2, #1
 800347c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2202      	movs	r2, #2
 8003484:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003496:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800349e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	68ba      	ldr	r2, [r7, #8]
 80034a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80034b0:	d03e      	beq.n	8003530 <HAL_TIM_ConfigClockSource+0xd4>
 80034b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80034b6:	f200 8087 	bhi.w	80035c8 <HAL_TIM_ConfigClockSource+0x16c>
 80034ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80034be:	f000 8086 	beq.w	80035ce <HAL_TIM_ConfigClockSource+0x172>
 80034c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80034c6:	d87f      	bhi.n	80035c8 <HAL_TIM_ConfigClockSource+0x16c>
 80034c8:	2b70      	cmp	r3, #112	@ 0x70
 80034ca:	d01a      	beq.n	8003502 <HAL_TIM_ConfigClockSource+0xa6>
 80034cc:	2b70      	cmp	r3, #112	@ 0x70
 80034ce:	d87b      	bhi.n	80035c8 <HAL_TIM_ConfigClockSource+0x16c>
 80034d0:	2b60      	cmp	r3, #96	@ 0x60
 80034d2:	d050      	beq.n	8003576 <HAL_TIM_ConfigClockSource+0x11a>
 80034d4:	2b60      	cmp	r3, #96	@ 0x60
 80034d6:	d877      	bhi.n	80035c8 <HAL_TIM_ConfigClockSource+0x16c>
 80034d8:	2b50      	cmp	r3, #80	@ 0x50
 80034da:	d03c      	beq.n	8003556 <HAL_TIM_ConfigClockSource+0xfa>
 80034dc:	2b50      	cmp	r3, #80	@ 0x50
 80034de:	d873      	bhi.n	80035c8 <HAL_TIM_ConfigClockSource+0x16c>
 80034e0:	2b40      	cmp	r3, #64	@ 0x40
 80034e2:	d058      	beq.n	8003596 <HAL_TIM_ConfigClockSource+0x13a>
 80034e4:	2b40      	cmp	r3, #64	@ 0x40
 80034e6:	d86f      	bhi.n	80035c8 <HAL_TIM_ConfigClockSource+0x16c>
 80034e8:	2b30      	cmp	r3, #48	@ 0x30
 80034ea:	d064      	beq.n	80035b6 <HAL_TIM_ConfigClockSource+0x15a>
 80034ec:	2b30      	cmp	r3, #48	@ 0x30
 80034ee:	d86b      	bhi.n	80035c8 <HAL_TIM_ConfigClockSource+0x16c>
 80034f0:	2b20      	cmp	r3, #32
 80034f2:	d060      	beq.n	80035b6 <HAL_TIM_ConfigClockSource+0x15a>
 80034f4:	2b20      	cmp	r3, #32
 80034f6:	d867      	bhi.n	80035c8 <HAL_TIM_ConfigClockSource+0x16c>
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d05c      	beq.n	80035b6 <HAL_TIM_ConfigClockSource+0x15a>
 80034fc:	2b10      	cmp	r3, #16
 80034fe:	d05a      	beq.n	80035b6 <HAL_TIM_ConfigClockSource+0x15a>
 8003500:	e062      	b.n	80035c8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003512:	f000 fc7d 	bl	8003e10 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003524:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	68ba      	ldr	r2, [r7, #8]
 800352c:	609a      	str	r2, [r3, #8]
      break;
 800352e:	e04f      	b.n	80035d0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003540:	f000 fc66 	bl	8003e10 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	689a      	ldr	r2, [r3, #8]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003552:	609a      	str	r2, [r3, #8]
      break;
 8003554:	e03c      	b.n	80035d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003562:	461a      	mov	r2, r3
 8003564:	f000 fb24 	bl	8003bb0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	2150      	movs	r1, #80	@ 0x50
 800356e:	4618      	mov	r0, r3
 8003570:	f000 fc33 	bl	8003dda <TIM_ITRx_SetConfig>
      break;
 8003574:	e02c      	b.n	80035d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003582:	461a      	mov	r2, r3
 8003584:	f000 fb80 	bl	8003c88 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	2160      	movs	r1, #96	@ 0x60
 800358e:	4618      	mov	r0, r3
 8003590:	f000 fc23 	bl	8003dda <TIM_ITRx_SetConfig>
      break;
 8003594:	e01c      	b.n	80035d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80035a2:	461a      	mov	r2, r3
 80035a4:	f000 fb04 	bl	8003bb0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	2140      	movs	r1, #64	@ 0x40
 80035ae:	4618      	mov	r0, r3
 80035b0:	f000 fc13 	bl	8003dda <TIM_ITRx_SetConfig>
      break;
 80035b4:	e00c      	b.n	80035d0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4619      	mov	r1, r3
 80035c0:	4610      	mov	r0, r2
 80035c2:	f000 fc0a 	bl	8003dda <TIM_ITRx_SetConfig>
      break;
 80035c6:	e003      	b.n	80035d0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	73fb      	strb	r3, [r7, #15]
      break;
 80035cc:	e000      	b.n	80035d0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80035ce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2201      	movs	r2, #1
 80035d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2200      	movs	r2, #0
 80035dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80035e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3710      	adds	r7, #16
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}
	...

080035ec <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b085      	sub	sp, #20
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
 80035f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80035f6:	2300      	movs	r3, #0
 80035f8:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	2b0c      	cmp	r3, #12
 80035fe:	d831      	bhi.n	8003664 <HAL_TIM_ReadCapturedValue+0x78>
 8003600:	a201      	add	r2, pc, #4	@ (adr r2, 8003608 <HAL_TIM_ReadCapturedValue+0x1c>)
 8003602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003606:	bf00      	nop
 8003608:	0800363d 	.word	0x0800363d
 800360c:	08003665 	.word	0x08003665
 8003610:	08003665 	.word	0x08003665
 8003614:	08003665 	.word	0x08003665
 8003618:	08003647 	.word	0x08003647
 800361c:	08003665 	.word	0x08003665
 8003620:	08003665 	.word	0x08003665
 8003624:	08003665 	.word	0x08003665
 8003628:	08003651 	.word	0x08003651
 800362c:	08003665 	.word	0x08003665
 8003630:	08003665 	.word	0x08003665
 8003634:	08003665 	.word	0x08003665
 8003638:	0800365b 	.word	0x0800365b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003642:	60fb      	str	r3, [r7, #12]

      break;
 8003644:	e00f      	b.n	8003666 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800364c:	60fb      	str	r3, [r7, #12]

      break;
 800364e:	e00a      	b.n	8003666 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003656:	60fb      	str	r3, [r7, #12]

      break;
 8003658:	e005      	b.n	8003666 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003660:	60fb      	str	r3, [r7, #12]

      break;
 8003662:	e000      	b.n	8003666 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003664:	bf00      	nop
  }

  return tmpreg;
 8003666:	68fb      	ldr	r3, [r7, #12]
}
 8003668:	4618      	mov	r0, r3
 800366a:	3714      	adds	r7, #20
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr

08003674 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003674:	b480      	push	{r7}
 8003676:	b083      	sub	sp, #12
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800367c:	bf00      	nop
 800367e:	370c      	adds	r7, #12
 8003680:	46bd      	mov	sp, r7
 8003682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003686:	4770      	bx	lr

08003688 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003688:	b480      	push	{r7}
 800368a:	b083      	sub	sp, #12
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003690:	bf00      	nop
 8003692:	370c      	adds	r7, #12
 8003694:	46bd      	mov	sp, r7
 8003696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369a:	4770      	bx	lr

0800369c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800369c:	b480      	push	{r7}
 800369e:	b083      	sub	sp, #12
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80036a4:	bf00      	nop
 80036a6:	370c      	adds	r7, #12
 80036a8:	46bd      	mov	sp, r7
 80036aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ae:	4770      	bx	lr

080036b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b085      	sub	sp, #20
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
 80036b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	4a3a      	ldr	r2, [pc, #232]	@ (80037ac <TIM_Base_SetConfig+0xfc>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d00f      	beq.n	80036e8 <TIM_Base_SetConfig+0x38>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036ce:	d00b      	beq.n	80036e8 <TIM_Base_SetConfig+0x38>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	4a37      	ldr	r2, [pc, #220]	@ (80037b0 <TIM_Base_SetConfig+0x100>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d007      	beq.n	80036e8 <TIM_Base_SetConfig+0x38>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	4a36      	ldr	r2, [pc, #216]	@ (80037b4 <TIM_Base_SetConfig+0x104>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d003      	beq.n	80036e8 <TIM_Base_SetConfig+0x38>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	4a35      	ldr	r2, [pc, #212]	@ (80037b8 <TIM_Base_SetConfig+0x108>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d108      	bne.n	80036fa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	68fa      	ldr	r2, [r7, #12]
 80036f6:	4313      	orrs	r3, r2
 80036f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	4a2b      	ldr	r2, [pc, #172]	@ (80037ac <TIM_Base_SetConfig+0xfc>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d01b      	beq.n	800373a <TIM_Base_SetConfig+0x8a>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003708:	d017      	beq.n	800373a <TIM_Base_SetConfig+0x8a>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	4a28      	ldr	r2, [pc, #160]	@ (80037b0 <TIM_Base_SetConfig+0x100>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d013      	beq.n	800373a <TIM_Base_SetConfig+0x8a>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	4a27      	ldr	r2, [pc, #156]	@ (80037b4 <TIM_Base_SetConfig+0x104>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d00f      	beq.n	800373a <TIM_Base_SetConfig+0x8a>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	4a26      	ldr	r2, [pc, #152]	@ (80037b8 <TIM_Base_SetConfig+0x108>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d00b      	beq.n	800373a <TIM_Base_SetConfig+0x8a>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	4a25      	ldr	r2, [pc, #148]	@ (80037bc <TIM_Base_SetConfig+0x10c>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d007      	beq.n	800373a <TIM_Base_SetConfig+0x8a>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	4a24      	ldr	r2, [pc, #144]	@ (80037c0 <TIM_Base_SetConfig+0x110>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d003      	beq.n	800373a <TIM_Base_SetConfig+0x8a>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	4a23      	ldr	r2, [pc, #140]	@ (80037c4 <TIM_Base_SetConfig+0x114>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d108      	bne.n	800374c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003740:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	68db      	ldr	r3, [r3, #12]
 8003746:	68fa      	ldr	r2, [r7, #12]
 8003748:	4313      	orrs	r3, r2
 800374a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	695b      	ldr	r3, [r3, #20]
 8003756:	4313      	orrs	r3, r2
 8003758:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	68fa      	ldr	r2, [r7, #12]
 800375e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	689a      	ldr	r2, [r3, #8]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	681a      	ldr	r2, [r3, #0]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	4a0e      	ldr	r2, [pc, #56]	@ (80037ac <TIM_Base_SetConfig+0xfc>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d103      	bne.n	8003780 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	691a      	ldr	r2, [r3, #16]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2201      	movs	r2, #1
 8003784:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	691b      	ldr	r3, [r3, #16]
 800378a:	f003 0301 	and.w	r3, r3, #1
 800378e:	2b01      	cmp	r3, #1
 8003790:	d105      	bne.n	800379e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	691b      	ldr	r3, [r3, #16]
 8003796:	f023 0201 	bic.w	r2, r3, #1
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	611a      	str	r2, [r3, #16]
  }
}
 800379e:	bf00      	nop
 80037a0:	3714      	adds	r7, #20
 80037a2:	46bd      	mov	sp, r7
 80037a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a8:	4770      	bx	lr
 80037aa:	bf00      	nop
 80037ac:	40010000 	.word	0x40010000
 80037b0:	40000400 	.word	0x40000400
 80037b4:	40000800 	.word	0x40000800
 80037b8:	40000c00 	.word	0x40000c00
 80037bc:	40014000 	.word	0x40014000
 80037c0:	40014400 	.word	0x40014400
 80037c4:	40014800 	.word	0x40014800

080037c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b087      	sub	sp, #28
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
 80037d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6a1b      	ldr	r3, [r3, #32]
 80037d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6a1b      	ldr	r3, [r3, #32]
 80037dc:	f023 0201 	bic.w	r2, r3, #1
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	699b      	ldr	r3, [r3, #24]
 80037ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	f023 0303 	bic.w	r3, r3, #3
 80037fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	68fa      	ldr	r2, [r7, #12]
 8003806:	4313      	orrs	r3, r2
 8003808:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	f023 0302 	bic.w	r3, r3, #2
 8003810:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	697a      	ldr	r2, [r7, #20]
 8003818:	4313      	orrs	r3, r2
 800381a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	4a1c      	ldr	r2, [pc, #112]	@ (8003890 <TIM_OC1_SetConfig+0xc8>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d10c      	bne.n	800383e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	f023 0308 	bic.w	r3, r3, #8
 800382a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	68db      	ldr	r3, [r3, #12]
 8003830:	697a      	ldr	r2, [r7, #20]
 8003832:	4313      	orrs	r3, r2
 8003834:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	f023 0304 	bic.w	r3, r3, #4
 800383c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	4a13      	ldr	r2, [pc, #76]	@ (8003890 <TIM_OC1_SetConfig+0xc8>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d111      	bne.n	800386a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800384c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003854:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	695b      	ldr	r3, [r3, #20]
 800385a:	693a      	ldr	r2, [r7, #16]
 800385c:	4313      	orrs	r3, r2
 800385e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	699b      	ldr	r3, [r3, #24]
 8003864:	693a      	ldr	r2, [r7, #16]
 8003866:	4313      	orrs	r3, r2
 8003868:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	693a      	ldr	r2, [r7, #16]
 800386e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	68fa      	ldr	r2, [r7, #12]
 8003874:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	685a      	ldr	r2, [r3, #4]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	697a      	ldr	r2, [r7, #20]
 8003882:	621a      	str	r2, [r3, #32]
}
 8003884:	bf00      	nop
 8003886:	371c      	adds	r7, #28
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr
 8003890:	40010000 	.word	0x40010000

08003894 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003894:	b480      	push	{r7}
 8003896:	b087      	sub	sp, #28
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
 800389c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6a1b      	ldr	r3, [r3, #32]
 80038a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6a1b      	ldr	r3, [r3, #32]
 80038a8:	f023 0210 	bic.w	r2, r3, #16
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	699b      	ldr	r3, [r3, #24]
 80038ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80038c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80038ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	021b      	lsls	r3, r3, #8
 80038d2:	68fa      	ldr	r2, [r7, #12]
 80038d4:	4313      	orrs	r3, r2
 80038d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	f023 0320 	bic.w	r3, r3, #32
 80038de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	011b      	lsls	r3, r3, #4
 80038e6:	697a      	ldr	r2, [r7, #20]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	4a1e      	ldr	r2, [pc, #120]	@ (8003968 <TIM_OC2_SetConfig+0xd4>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d10d      	bne.n	8003910 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80038fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	011b      	lsls	r3, r3, #4
 8003902:	697a      	ldr	r2, [r7, #20]
 8003904:	4313      	orrs	r3, r2
 8003906:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800390e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	4a15      	ldr	r2, [pc, #84]	@ (8003968 <TIM_OC2_SetConfig+0xd4>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d113      	bne.n	8003940 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800391e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003926:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	695b      	ldr	r3, [r3, #20]
 800392c:	009b      	lsls	r3, r3, #2
 800392e:	693a      	ldr	r2, [r7, #16]
 8003930:	4313      	orrs	r3, r2
 8003932:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	699b      	ldr	r3, [r3, #24]
 8003938:	009b      	lsls	r3, r3, #2
 800393a:	693a      	ldr	r2, [r7, #16]
 800393c:	4313      	orrs	r3, r2
 800393e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	693a      	ldr	r2, [r7, #16]
 8003944:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	68fa      	ldr	r2, [r7, #12]
 800394a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	685a      	ldr	r2, [r3, #4]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	697a      	ldr	r2, [r7, #20]
 8003958:	621a      	str	r2, [r3, #32]
}
 800395a:	bf00      	nop
 800395c:	371c      	adds	r7, #28
 800395e:	46bd      	mov	sp, r7
 8003960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003964:	4770      	bx	lr
 8003966:	bf00      	nop
 8003968:	40010000 	.word	0x40010000

0800396c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800396c:	b480      	push	{r7}
 800396e:	b087      	sub	sp, #28
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
 8003974:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6a1b      	ldr	r3, [r3, #32]
 800397a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6a1b      	ldr	r3, [r3, #32]
 8003980:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	69db      	ldr	r3, [r3, #28]
 8003992:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800399a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	f023 0303 	bic.w	r3, r3, #3
 80039a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	68fa      	ldr	r2, [r7, #12]
 80039aa:	4313      	orrs	r3, r2
 80039ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80039b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	021b      	lsls	r3, r3, #8
 80039bc:	697a      	ldr	r2, [r7, #20]
 80039be:	4313      	orrs	r3, r2
 80039c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	4a1d      	ldr	r2, [pc, #116]	@ (8003a3c <TIM_OC3_SetConfig+0xd0>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d10d      	bne.n	80039e6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80039d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	68db      	ldr	r3, [r3, #12]
 80039d6:	021b      	lsls	r3, r3, #8
 80039d8:	697a      	ldr	r2, [r7, #20]
 80039da:	4313      	orrs	r3, r2
 80039dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80039e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	4a14      	ldr	r2, [pc, #80]	@ (8003a3c <TIM_OC3_SetConfig+0xd0>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d113      	bne.n	8003a16 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80039f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80039fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	695b      	ldr	r3, [r3, #20]
 8003a02:	011b      	lsls	r3, r3, #4
 8003a04:	693a      	ldr	r2, [r7, #16]
 8003a06:	4313      	orrs	r3, r2
 8003a08:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	699b      	ldr	r3, [r3, #24]
 8003a0e:	011b      	lsls	r3, r3, #4
 8003a10:	693a      	ldr	r2, [r7, #16]
 8003a12:	4313      	orrs	r3, r2
 8003a14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	693a      	ldr	r2, [r7, #16]
 8003a1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	68fa      	ldr	r2, [r7, #12]
 8003a20:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	685a      	ldr	r2, [r3, #4]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	697a      	ldr	r2, [r7, #20]
 8003a2e:	621a      	str	r2, [r3, #32]
}
 8003a30:	bf00      	nop
 8003a32:	371c      	adds	r7, #28
 8003a34:	46bd      	mov	sp, r7
 8003a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3a:	4770      	bx	lr
 8003a3c:	40010000 	.word	0x40010000

08003a40 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b087      	sub	sp, #28
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
 8003a48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6a1b      	ldr	r3, [r3, #32]
 8003a4e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6a1b      	ldr	r3, [r3, #32]
 8003a54:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	69db      	ldr	r3, [r3, #28]
 8003a66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003a6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	021b      	lsls	r3, r3, #8
 8003a7e:	68fa      	ldr	r2, [r7, #12]
 8003a80:	4313      	orrs	r3, r2
 8003a82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003a8a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	031b      	lsls	r3, r3, #12
 8003a92:	693a      	ldr	r2, [r7, #16]
 8003a94:	4313      	orrs	r3, r2
 8003a96:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	4a10      	ldr	r2, [pc, #64]	@ (8003adc <TIM_OC4_SetConfig+0x9c>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d109      	bne.n	8003ab4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003aa6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	695b      	ldr	r3, [r3, #20]
 8003aac:	019b      	lsls	r3, r3, #6
 8003aae:	697a      	ldr	r2, [r7, #20]
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	697a      	ldr	r2, [r7, #20]
 8003ab8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	68fa      	ldr	r2, [r7, #12]
 8003abe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	685a      	ldr	r2, [r3, #4]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	693a      	ldr	r2, [r7, #16]
 8003acc:	621a      	str	r2, [r3, #32]
}
 8003ace:	bf00      	nop
 8003ad0:	371c      	adds	r7, #28
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad8:	4770      	bx	lr
 8003ada:	bf00      	nop
 8003adc:	40010000 	.word	0x40010000

08003ae0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b087      	sub	sp, #28
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	60f8      	str	r0, [r7, #12]
 8003ae8:	60b9      	str	r1, [r7, #8]
 8003aea:	607a      	str	r2, [r7, #4]
 8003aec:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	6a1b      	ldr	r3, [r3, #32]
 8003af2:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	6a1b      	ldr	r3, [r3, #32]
 8003af8:	f023 0201 	bic.w	r2, r3, #1
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	699b      	ldr	r3, [r3, #24]
 8003b04:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	4a24      	ldr	r2, [pc, #144]	@ (8003b9c <TIM_TI1_SetConfig+0xbc>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d013      	beq.n	8003b36 <TIM_TI1_SetConfig+0x56>
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b14:	d00f      	beq.n	8003b36 <TIM_TI1_SetConfig+0x56>
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	4a21      	ldr	r2, [pc, #132]	@ (8003ba0 <TIM_TI1_SetConfig+0xc0>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d00b      	beq.n	8003b36 <TIM_TI1_SetConfig+0x56>
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	4a20      	ldr	r2, [pc, #128]	@ (8003ba4 <TIM_TI1_SetConfig+0xc4>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d007      	beq.n	8003b36 <TIM_TI1_SetConfig+0x56>
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	4a1f      	ldr	r2, [pc, #124]	@ (8003ba8 <TIM_TI1_SetConfig+0xc8>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d003      	beq.n	8003b36 <TIM_TI1_SetConfig+0x56>
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	4a1e      	ldr	r2, [pc, #120]	@ (8003bac <TIM_TI1_SetConfig+0xcc>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d101      	bne.n	8003b3a <TIM_TI1_SetConfig+0x5a>
 8003b36:	2301      	movs	r3, #1
 8003b38:	e000      	b.n	8003b3c <TIM_TI1_SetConfig+0x5c>
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d008      	beq.n	8003b52 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	f023 0303 	bic.w	r3, r3, #3
 8003b46:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003b48:	697a      	ldr	r2, [r7, #20]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	617b      	str	r3, [r7, #20]
 8003b50:	e003      	b.n	8003b5a <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	f043 0301 	orr.w	r3, r3, #1
 8003b58:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003b60:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	011b      	lsls	r3, r3, #4
 8003b66:	b2db      	uxtb	r3, r3
 8003b68:	697a      	ldr	r2, [r7, #20]
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	f023 030a 	bic.w	r3, r3, #10
 8003b74:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	f003 030a 	and.w	r3, r3, #10
 8003b7c:	693a      	ldr	r2, [r7, #16]
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	697a      	ldr	r2, [r7, #20]
 8003b86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	693a      	ldr	r2, [r7, #16]
 8003b8c:	621a      	str	r2, [r3, #32]
}
 8003b8e:	bf00      	nop
 8003b90:	371c      	adds	r7, #28
 8003b92:	46bd      	mov	sp, r7
 8003b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b98:	4770      	bx	lr
 8003b9a:	bf00      	nop
 8003b9c:	40010000 	.word	0x40010000
 8003ba0:	40000400 	.word	0x40000400
 8003ba4:	40000800 	.word	0x40000800
 8003ba8:	40000c00 	.word	0x40000c00
 8003bac:	40014000 	.word	0x40014000

08003bb0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b087      	sub	sp, #28
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	60f8      	str	r0, [r7, #12]
 8003bb8:	60b9      	str	r1, [r7, #8]
 8003bba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	6a1b      	ldr	r3, [r3, #32]
 8003bc0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	6a1b      	ldr	r3, [r3, #32]
 8003bc6:	f023 0201 	bic.w	r2, r3, #1
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	699b      	ldr	r3, [r3, #24]
 8003bd2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003bda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	011b      	lsls	r3, r3, #4
 8003be0:	693a      	ldr	r2, [r7, #16]
 8003be2:	4313      	orrs	r3, r2
 8003be4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	f023 030a 	bic.w	r3, r3, #10
 8003bec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003bee:	697a      	ldr	r2, [r7, #20]
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	693a      	ldr	r2, [r7, #16]
 8003bfa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	697a      	ldr	r2, [r7, #20]
 8003c00:	621a      	str	r2, [r3, #32]
}
 8003c02:	bf00      	nop
 8003c04:	371c      	adds	r7, #28
 8003c06:	46bd      	mov	sp, r7
 8003c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0c:	4770      	bx	lr

08003c0e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003c0e:	b480      	push	{r7}
 8003c10:	b087      	sub	sp, #28
 8003c12:	af00      	add	r7, sp, #0
 8003c14:	60f8      	str	r0, [r7, #12]
 8003c16:	60b9      	str	r1, [r7, #8]
 8003c18:	607a      	str	r2, [r7, #4]
 8003c1a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	6a1b      	ldr	r3, [r3, #32]
 8003c20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	6a1b      	ldr	r3, [r3, #32]
 8003c26:	f023 0210 	bic.w	r2, r3, #16
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	699b      	ldr	r3, [r3, #24]
 8003c32:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	021b      	lsls	r3, r3, #8
 8003c40:	693a      	ldr	r2, [r7, #16]
 8003c42:	4313      	orrs	r3, r2
 8003c44:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003c4c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	031b      	lsls	r3, r3, #12
 8003c52:	b29b      	uxth	r3, r3
 8003c54:	693a      	ldr	r2, [r7, #16]
 8003c56:	4313      	orrs	r3, r2
 8003c58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003c60:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	011b      	lsls	r3, r3, #4
 8003c66:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8003c6a:	697a      	ldr	r2, [r7, #20]
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	693a      	ldr	r2, [r7, #16]
 8003c74:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	697a      	ldr	r2, [r7, #20]
 8003c7a:	621a      	str	r2, [r3, #32]
}
 8003c7c:	bf00      	nop
 8003c7e:	371c      	adds	r7, #28
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr

08003c88 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b087      	sub	sp, #28
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	60f8      	str	r0, [r7, #12]
 8003c90:	60b9      	str	r1, [r7, #8]
 8003c92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	6a1b      	ldr	r3, [r3, #32]
 8003c98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	6a1b      	ldr	r3, [r3, #32]
 8003c9e:	f023 0210 	bic.w	r2, r3, #16
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	699b      	ldr	r3, [r3, #24]
 8003caa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003cb2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	031b      	lsls	r3, r3, #12
 8003cb8:	693a      	ldr	r2, [r7, #16]
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003cc4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	011b      	lsls	r3, r3, #4
 8003cca:	697a      	ldr	r2, [r7, #20]
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	693a      	ldr	r2, [r7, #16]
 8003cd4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	697a      	ldr	r2, [r7, #20]
 8003cda:	621a      	str	r2, [r3, #32]
}
 8003cdc:	bf00      	nop
 8003cde:	371c      	adds	r7, #28
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr

08003ce8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b087      	sub	sp, #28
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	60f8      	str	r0, [r7, #12]
 8003cf0:	60b9      	str	r1, [r7, #8]
 8003cf2:	607a      	str	r2, [r7, #4]
 8003cf4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	6a1b      	ldr	r3, [r3, #32]
 8003cfa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	6a1b      	ldr	r3, [r3, #32]
 8003d00:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	69db      	ldr	r3, [r3, #28]
 8003d0c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	f023 0303 	bic.w	r3, r3, #3
 8003d14:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8003d16:	693a      	ldr	r2, [r7, #16]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003d24:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	011b      	lsls	r3, r3, #4
 8003d2a:	b2db      	uxtb	r3, r3
 8003d2c:	693a      	ldr	r2, [r7, #16]
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8003d38:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	021b      	lsls	r3, r3, #8
 8003d3e:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8003d42:	697a      	ldr	r2, [r7, #20]
 8003d44:	4313      	orrs	r3, r2
 8003d46:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	693a      	ldr	r2, [r7, #16]
 8003d4c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	697a      	ldr	r2, [r7, #20]
 8003d52:	621a      	str	r2, [r3, #32]
}
 8003d54:	bf00      	nop
 8003d56:	371c      	adds	r7, #28
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5e:	4770      	bx	lr

08003d60 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b087      	sub	sp, #28
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	60f8      	str	r0, [r7, #12]
 8003d68:	60b9      	str	r1, [r7, #8]
 8003d6a:	607a      	str	r2, [r7, #4]
 8003d6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	6a1b      	ldr	r3, [r3, #32]
 8003d72:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	6a1b      	ldr	r3, [r3, #32]
 8003d78:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	69db      	ldr	r3, [r3, #28]
 8003d84:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d8c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	021b      	lsls	r3, r3, #8
 8003d92:	693a      	ldr	r2, [r7, #16]
 8003d94:	4313      	orrs	r3, r2
 8003d96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003d9e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	031b      	lsls	r3, r3, #12
 8003da4:	b29b      	uxth	r3, r3
 8003da6:	693a      	ldr	r2, [r7, #16]
 8003da8:	4313      	orrs	r3, r2
 8003daa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8003db2:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	031b      	lsls	r3, r3, #12
 8003db8:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8003dbc:	697a      	ldr	r2, [r7, #20]
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	693a      	ldr	r2, [r7, #16]
 8003dc6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	697a      	ldr	r2, [r7, #20]
 8003dcc:	621a      	str	r2, [r3, #32]
}
 8003dce:	bf00      	nop
 8003dd0:	371c      	adds	r7, #28
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd8:	4770      	bx	lr

08003dda <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003dda:	b480      	push	{r7}
 8003ddc:	b085      	sub	sp, #20
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	6078      	str	r0, [r7, #4]
 8003de2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003df0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003df2:	683a      	ldr	r2, [r7, #0]
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	4313      	orrs	r3, r2
 8003df8:	f043 0307 	orr.w	r3, r3, #7
 8003dfc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	68fa      	ldr	r2, [r7, #12]
 8003e02:	609a      	str	r2, [r3, #8]
}
 8003e04:	bf00      	nop
 8003e06:	3714      	adds	r7, #20
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0e:	4770      	bx	lr

08003e10 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b087      	sub	sp, #28
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	60f8      	str	r0, [r7, #12]
 8003e18:	60b9      	str	r1, [r7, #8]
 8003e1a:	607a      	str	r2, [r7, #4]
 8003e1c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003e2a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	021a      	lsls	r2, r3, #8
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	431a      	orrs	r2, r3
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	4313      	orrs	r3, r2
 8003e38:	697a      	ldr	r2, [r7, #20]
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	697a      	ldr	r2, [r7, #20]
 8003e42:	609a      	str	r2, [r3, #8]
}
 8003e44:	bf00      	nop
 8003e46:	371c      	adds	r7, #28
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4e:	4770      	bx	lr

08003e50 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b087      	sub	sp, #28
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	60f8      	str	r0, [r7, #12]
 8003e58:	60b9      	str	r1, [r7, #8]
 8003e5a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	f003 031f 	and.w	r3, r3, #31
 8003e62:	2201      	movs	r2, #1
 8003e64:	fa02 f303 	lsl.w	r3, r2, r3
 8003e68:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	6a1a      	ldr	r2, [r3, #32]
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	43db      	mvns	r3, r3
 8003e72:	401a      	ands	r2, r3
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	6a1a      	ldr	r2, [r3, #32]
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	f003 031f 	and.w	r3, r3, #31
 8003e82:	6879      	ldr	r1, [r7, #4]
 8003e84:	fa01 f303 	lsl.w	r3, r1, r3
 8003e88:	431a      	orrs	r2, r3
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	621a      	str	r2, [r3, #32]
}
 8003e8e:	bf00      	nop
 8003e90:	371c      	adds	r7, #28
 8003e92:	46bd      	mov	sp, r7
 8003e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e98:	4770      	bx	lr
	...

08003e9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b085      	sub	sp, #20
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
 8003ea4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d101      	bne.n	8003eb4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003eb0:	2302      	movs	r3, #2
 8003eb2:	e050      	b.n	8003f56 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2202      	movs	r2, #2
 8003ec0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003eda:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	68fa      	ldr	r2, [r7, #12]
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	68fa      	ldr	r2, [r7, #12]
 8003eec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a1c      	ldr	r2, [pc, #112]	@ (8003f64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d018      	beq.n	8003f2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f00:	d013      	beq.n	8003f2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a18      	ldr	r2, [pc, #96]	@ (8003f68 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d00e      	beq.n	8003f2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a16      	ldr	r2, [pc, #88]	@ (8003f6c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d009      	beq.n	8003f2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a15      	ldr	r2, [pc, #84]	@ (8003f70 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d004      	beq.n	8003f2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a13      	ldr	r2, [pc, #76]	@ (8003f74 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d10c      	bne.n	8003f44 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003f30:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	68ba      	ldr	r2, [r7, #8]
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	68ba      	ldr	r2, [r7, #8]
 8003f42:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2201      	movs	r2, #1
 8003f48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003f54:	2300      	movs	r3, #0
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3714      	adds	r7, #20
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr
 8003f62:	bf00      	nop
 8003f64:	40010000 	.word	0x40010000
 8003f68:	40000400 	.word	0x40000400
 8003f6c:	40000800 	.word	0x40000800
 8003f70:	40000c00 	.word	0x40000c00
 8003f74:	40014000 	.word	0x40014000

08003f78 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b083      	sub	sp, #12
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f80:	bf00      	nop
 8003f82:	370c      	adds	r7, #12
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr

08003f8c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b083      	sub	sp, #12
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f94:	bf00      	nop
 8003f96:	370c      	adds	r7, #12
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9e:	4770      	bx	lr

08003fa0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b082      	sub	sp, #8
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d101      	bne.n	8003fb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e042      	b.n	8004038 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003fb8:	b2db      	uxtb	r3, r3
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d106      	bne.n	8003fcc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f7fd fb80 	bl	80016cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2224      	movs	r2, #36	@ 0x24
 8003fd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	68da      	ldr	r2, [r3, #12]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003fe2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003fe4:	6878      	ldr	r0, [r7, #4]
 8003fe6:	f000 fcdb 	bl	80049a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	691a      	ldr	r2, [r3, #16]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003ff8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	695a      	ldr	r2, [r3, #20]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004008:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	68da      	ldr	r2, [r3, #12]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004018:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2200      	movs	r2, #0
 800401e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2220      	movs	r2, #32
 8004024:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2220      	movs	r2, #32
 800402c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2200      	movs	r2, #0
 8004034:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004036:	2300      	movs	r3, #0
}
 8004038:	4618      	mov	r0, r3
 800403a:	3708      	adds	r7, #8
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}

08004040 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b084      	sub	sp, #16
 8004044:	af00      	add	r7, sp, #0
 8004046:	60f8      	str	r0, [r7, #12]
 8004048:	60b9      	str	r1, [r7, #8]
 800404a:	4613      	mov	r3, r2
 800404c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004054:	b2db      	uxtb	r3, r3
 8004056:	2b20      	cmp	r3, #32
 8004058:	d112      	bne.n	8004080 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d002      	beq.n	8004066 <HAL_UART_Receive_IT+0x26>
 8004060:	88fb      	ldrh	r3, [r7, #6]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d101      	bne.n	800406a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	e00b      	b.n	8004082 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2200      	movs	r2, #0
 800406e:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004070:	88fb      	ldrh	r3, [r7, #6]
 8004072:	461a      	mov	r2, r3
 8004074:	68b9      	ldr	r1, [r7, #8]
 8004076:	68f8      	ldr	r0, [r7, #12]
 8004078:	f000 faba 	bl	80045f0 <UART_Start_Receive_IT>
 800407c:	4603      	mov	r3, r0
 800407e:	e000      	b.n	8004082 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004080:	2302      	movs	r3, #2
  }
}
 8004082:	4618      	mov	r0, r3
 8004084:	3710      	adds	r7, #16
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}
	...

0800408c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b0ba      	sub	sp, #232	@ 0xe8
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	68db      	ldr	r3, [r3, #12]
 80040a4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	695b      	ldr	r3, [r3, #20]
 80040ae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80040b2:	2300      	movs	r3, #0
 80040b4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80040b8:	2300      	movs	r3, #0
 80040ba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80040be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040c2:	f003 030f 	and.w	r3, r3, #15
 80040c6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80040ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d10f      	bne.n	80040f2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80040d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040d6:	f003 0320 	and.w	r3, r3, #32
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d009      	beq.n	80040f2 <HAL_UART_IRQHandler+0x66>
 80040de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040e2:	f003 0320 	and.w	r3, r3, #32
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d003      	beq.n	80040f2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f000 fb99 	bl	8004822 <UART_Receive_IT>
      return;
 80040f0:	e25b      	b.n	80045aa <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80040f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	f000 80de 	beq.w	80042b8 <HAL_UART_IRQHandler+0x22c>
 80040fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004100:	f003 0301 	and.w	r3, r3, #1
 8004104:	2b00      	cmp	r3, #0
 8004106:	d106      	bne.n	8004116 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004108:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800410c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004110:	2b00      	cmp	r3, #0
 8004112:	f000 80d1 	beq.w	80042b8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004116:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800411a:	f003 0301 	and.w	r3, r3, #1
 800411e:	2b00      	cmp	r3, #0
 8004120:	d00b      	beq.n	800413a <HAL_UART_IRQHandler+0xae>
 8004122:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004126:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800412a:	2b00      	cmp	r3, #0
 800412c:	d005      	beq.n	800413a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004132:	f043 0201 	orr.w	r2, r3, #1
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800413a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800413e:	f003 0304 	and.w	r3, r3, #4
 8004142:	2b00      	cmp	r3, #0
 8004144:	d00b      	beq.n	800415e <HAL_UART_IRQHandler+0xd2>
 8004146:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800414a:	f003 0301 	and.w	r3, r3, #1
 800414e:	2b00      	cmp	r3, #0
 8004150:	d005      	beq.n	800415e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004156:	f043 0202 	orr.w	r2, r3, #2
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800415e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004162:	f003 0302 	and.w	r3, r3, #2
 8004166:	2b00      	cmp	r3, #0
 8004168:	d00b      	beq.n	8004182 <HAL_UART_IRQHandler+0xf6>
 800416a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800416e:	f003 0301 	and.w	r3, r3, #1
 8004172:	2b00      	cmp	r3, #0
 8004174:	d005      	beq.n	8004182 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800417a:	f043 0204 	orr.w	r2, r3, #4
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004182:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004186:	f003 0308 	and.w	r3, r3, #8
 800418a:	2b00      	cmp	r3, #0
 800418c:	d011      	beq.n	80041b2 <HAL_UART_IRQHandler+0x126>
 800418e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004192:	f003 0320 	and.w	r3, r3, #32
 8004196:	2b00      	cmp	r3, #0
 8004198:	d105      	bne.n	80041a6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800419a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800419e:	f003 0301 	and.w	r3, r3, #1
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d005      	beq.n	80041b2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041aa:	f043 0208 	orr.w	r2, r3, #8
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	f000 81f2 	beq.w	80045a0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80041bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041c0:	f003 0320 	and.w	r3, r3, #32
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d008      	beq.n	80041da <HAL_UART_IRQHandler+0x14e>
 80041c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80041cc:	f003 0320 	and.w	r3, r3, #32
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d002      	beq.n	80041da <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80041d4:	6878      	ldr	r0, [r7, #4]
 80041d6:	f000 fb24 	bl	8004822 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	695b      	ldr	r3, [r3, #20]
 80041e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041e4:	2b40      	cmp	r3, #64	@ 0x40
 80041e6:	bf0c      	ite	eq
 80041e8:	2301      	moveq	r3, #1
 80041ea:	2300      	movne	r3, #0
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041f6:	f003 0308 	and.w	r3, r3, #8
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d103      	bne.n	8004206 <HAL_UART_IRQHandler+0x17a>
 80041fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004202:	2b00      	cmp	r3, #0
 8004204:	d04f      	beq.n	80042a6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f000 fa2c 	bl	8004664 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	695b      	ldr	r3, [r3, #20]
 8004212:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004216:	2b40      	cmp	r3, #64	@ 0x40
 8004218:	d141      	bne.n	800429e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	3314      	adds	r3, #20
 8004220:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004224:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004228:	e853 3f00 	ldrex	r3, [r3]
 800422c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004230:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004234:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004238:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	3314      	adds	r3, #20
 8004242:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004246:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800424a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800424e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004252:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004256:	e841 2300 	strex	r3, r2, [r1]
 800425a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800425e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004262:	2b00      	cmp	r3, #0
 8004264:	d1d9      	bne.n	800421a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800426a:	2b00      	cmp	r3, #0
 800426c:	d013      	beq.n	8004296 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004272:	4a7e      	ldr	r2, [pc, #504]	@ (800446c <HAL_UART_IRQHandler+0x3e0>)
 8004274:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800427a:	4618      	mov	r0, r3
 800427c:	f7fd fc96 	bl	8001bac <HAL_DMA_Abort_IT>
 8004280:	4603      	mov	r3, r0
 8004282:	2b00      	cmp	r3, #0
 8004284:	d016      	beq.n	80042b4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800428a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800428c:	687a      	ldr	r2, [r7, #4]
 800428e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004290:	4610      	mov	r0, r2
 8004292:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004294:	e00e      	b.n	80042b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f000 f994 	bl	80045c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800429c:	e00a      	b.n	80042b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f000 f990 	bl	80045c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042a4:	e006      	b.n	80042b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f000 f98c 	bl	80045c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2200      	movs	r2, #0
 80042b0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80042b2:	e175      	b.n	80045a0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042b4:	bf00      	nop
    return;
 80042b6:	e173      	b.n	80045a0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042bc:	2b01      	cmp	r3, #1
 80042be:	f040 814f 	bne.w	8004560 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80042c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042c6:	f003 0310 	and.w	r3, r3, #16
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	f000 8148 	beq.w	8004560 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80042d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042d4:	f003 0310 	and.w	r3, r3, #16
 80042d8:	2b00      	cmp	r3, #0
 80042da:	f000 8141 	beq.w	8004560 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80042de:	2300      	movs	r3, #0
 80042e0:	60bb      	str	r3, [r7, #8]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	60bb      	str	r3, [r7, #8]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	60bb      	str	r3, [r7, #8]
 80042f2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	695b      	ldr	r3, [r3, #20]
 80042fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042fe:	2b40      	cmp	r3, #64	@ 0x40
 8004300:	f040 80b6 	bne.w	8004470 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004310:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004314:	2b00      	cmp	r3, #0
 8004316:	f000 8145 	beq.w	80045a4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800431e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004322:	429a      	cmp	r2, r3
 8004324:	f080 813e 	bcs.w	80045a4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800432e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004334:	69db      	ldr	r3, [r3, #28]
 8004336:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800433a:	f000 8088 	beq.w	800444e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	330c      	adds	r3, #12
 8004344:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004348:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800434c:	e853 3f00 	ldrex	r3, [r3]
 8004350:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004354:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004358:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800435c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	330c      	adds	r3, #12
 8004366:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800436a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800436e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004372:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004376:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800437a:	e841 2300 	strex	r3, r2, [r1]
 800437e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004382:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004386:	2b00      	cmp	r3, #0
 8004388:	d1d9      	bne.n	800433e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	3314      	adds	r3, #20
 8004390:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004392:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004394:	e853 3f00 	ldrex	r3, [r3]
 8004398:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800439a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800439c:	f023 0301 	bic.w	r3, r3, #1
 80043a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	3314      	adds	r3, #20
 80043aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80043ae:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80043b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043b4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80043b6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80043ba:	e841 2300 	strex	r3, r2, [r1]
 80043be:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80043c0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d1e1      	bne.n	800438a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	3314      	adds	r3, #20
 80043cc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80043d0:	e853 3f00 	ldrex	r3, [r3]
 80043d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80043d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80043d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80043dc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	3314      	adds	r3, #20
 80043e6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80043ea:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80043ec:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ee:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80043f0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80043f2:	e841 2300 	strex	r3, r2, [r1]
 80043f6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80043f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d1e3      	bne.n	80043c6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2220      	movs	r2, #32
 8004402:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2200      	movs	r2, #0
 800440a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	330c      	adds	r3, #12
 8004412:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004414:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004416:	e853 3f00 	ldrex	r3, [r3]
 800441a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800441c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800441e:	f023 0310 	bic.w	r3, r3, #16
 8004422:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	330c      	adds	r3, #12
 800442c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004430:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004432:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004434:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004436:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004438:	e841 2300 	strex	r3, r2, [r1]
 800443c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800443e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004440:	2b00      	cmp	r3, #0
 8004442:	d1e3      	bne.n	800440c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004448:	4618      	mov	r0, r3
 800444a:	f7fd fb3f 	bl	8001acc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2202      	movs	r2, #2
 8004452:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800445c:	b29b      	uxth	r3, r3
 800445e:	1ad3      	subs	r3, r2, r3
 8004460:	b29b      	uxth	r3, r3
 8004462:	4619      	mov	r1, r3
 8004464:	6878      	ldr	r0, [r7, #4]
 8004466:	f000 f8b7 	bl	80045d8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800446a:	e09b      	b.n	80045a4 <HAL_UART_IRQHandler+0x518>
 800446c:	0800472b 	.word	0x0800472b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004478:	b29b      	uxth	r3, r3
 800447a:	1ad3      	subs	r3, r2, r3
 800447c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004484:	b29b      	uxth	r3, r3
 8004486:	2b00      	cmp	r3, #0
 8004488:	f000 808e 	beq.w	80045a8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800448c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004490:	2b00      	cmp	r3, #0
 8004492:	f000 8089 	beq.w	80045a8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	330c      	adds	r3, #12
 800449c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800449e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044a0:	e853 3f00 	ldrex	r3, [r3]
 80044a4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80044a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044a8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80044ac:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	330c      	adds	r3, #12
 80044b6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80044ba:	647a      	str	r2, [r7, #68]	@ 0x44
 80044bc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044be:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80044c0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80044c2:	e841 2300 	strex	r3, r2, [r1]
 80044c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80044c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d1e3      	bne.n	8004496 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	3314      	adds	r3, #20
 80044d4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044d8:	e853 3f00 	ldrex	r3, [r3]
 80044dc:	623b      	str	r3, [r7, #32]
   return(result);
 80044de:	6a3b      	ldr	r3, [r7, #32]
 80044e0:	f023 0301 	bic.w	r3, r3, #1
 80044e4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	3314      	adds	r3, #20
 80044ee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80044f2:	633a      	str	r2, [r7, #48]	@ 0x30
 80044f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80044f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80044fa:	e841 2300 	strex	r3, r2, [r1]
 80044fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004500:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004502:	2b00      	cmp	r3, #0
 8004504:	d1e3      	bne.n	80044ce <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2220      	movs	r2, #32
 800450a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2200      	movs	r2, #0
 8004512:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	330c      	adds	r3, #12
 800451a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	e853 3f00 	ldrex	r3, [r3]
 8004522:	60fb      	str	r3, [r7, #12]
   return(result);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	f023 0310 	bic.w	r3, r3, #16
 800452a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	330c      	adds	r3, #12
 8004534:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004538:	61fa      	str	r2, [r7, #28]
 800453a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800453c:	69b9      	ldr	r1, [r7, #24]
 800453e:	69fa      	ldr	r2, [r7, #28]
 8004540:	e841 2300 	strex	r3, r2, [r1]
 8004544:	617b      	str	r3, [r7, #20]
   return(result);
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d1e3      	bne.n	8004514 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2202      	movs	r2, #2
 8004550:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004552:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004556:	4619      	mov	r1, r3
 8004558:	6878      	ldr	r0, [r7, #4]
 800455a:	f000 f83d 	bl	80045d8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800455e:	e023      	b.n	80045a8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004560:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004564:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004568:	2b00      	cmp	r3, #0
 800456a:	d009      	beq.n	8004580 <HAL_UART_IRQHandler+0x4f4>
 800456c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004570:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004574:	2b00      	cmp	r3, #0
 8004576:	d003      	beq.n	8004580 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004578:	6878      	ldr	r0, [r7, #4]
 800457a:	f000 f8ea 	bl	8004752 <UART_Transmit_IT>
    return;
 800457e:	e014      	b.n	80045aa <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004580:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004584:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004588:	2b00      	cmp	r3, #0
 800458a:	d00e      	beq.n	80045aa <HAL_UART_IRQHandler+0x51e>
 800458c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004590:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004594:	2b00      	cmp	r3, #0
 8004596:	d008      	beq.n	80045aa <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004598:	6878      	ldr	r0, [r7, #4]
 800459a:	f000 f92a 	bl	80047f2 <UART_EndTransmit_IT>
    return;
 800459e:	e004      	b.n	80045aa <HAL_UART_IRQHandler+0x51e>
    return;
 80045a0:	bf00      	nop
 80045a2:	e002      	b.n	80045aa <HAL_UART_IRQHandler+0x51e>
      return;
 80045a4:	bf00      	nop
 80045a6:	e000      	b.n	80045aa <HAL_UART_IRQHandler+0x51e>
      return;
 80045a8:	bf00      	nop
  }
}
 80045aa:	37e8      	adds	r7, #232	@ 0xe8
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd80      	pop	{r7, pc}

080045b0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b083      	sub	sp, #12
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80045b8:	bf00      	nop
 80045ba:	370c      	adds	r7, #12
 80045bc:	46bd      	mov	sp, r7
 80045be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c2:	4770      	bx	lr

080045c4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b083      	sub	sp, #12
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80045cc:	bf00      	nop
 80045ce:	370c      	adds	r7, #12
 80045d0:	46bd      	mov	sp, r7
 80045d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d6:	4770      	bx	lr

080045d8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80045d8:	b480      	push	{r7}
 80045da:	b083      	sub	sp, #12
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
 80045e0:	460b      	mov	r3, r1
 80045e2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80045e4:	bf00      	nop
 80045e6:	370c      	adds	r7, #12
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr

080045f0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b085      	sub	sp, #20
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	60f8      	str	r0, [r7, #12]
 80045f8:	60b9      	str	r1, [r7, #8]
 80045fa:	4613      	mov	r3, r2
 80045fc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	68ba      	ldr	r2, [r7, #8]
 8004602:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	88fa      	ldrh	r2, [r7, #6]
 8004608:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	88fa      	ldrh	r2, [r7, #6]
 800460e:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	2200      	movs	r2, #0
 8004614:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2222      	movs	r2, #34	@ 0x22
 800461a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	691b      	ldr	r3, [r3, #16]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d007      	beq.n	8004636 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	68da      	ldr	r2, [r3, #12]
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004634:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	695a      	ldr	r2, [r3, #20]
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f042 0201 	orr.w	r2, r2, #1
 8004644:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	68da      	ldr	r2, [r3, #12]
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f042 0220 	orr.w	r2, r2, #32
 8004654:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004656:	2300      	movs	r3, #0
}
 8004658:	4618      	mov	r0, r3
 800465a:	3714      	adds	r7, #20
 800465c:	46bd      	mov	sp, r7
 800465e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004662:	4770      	bx	lr

08004664 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004664:	b480      	push	{r7}
 8004666:	b095      	sub	sp, #84	@ 0x54
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	330c      	adds	r3, #12
 8004672:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004674:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004676:	e853 3f00 	ldrex	r3, [r3]
 800467a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800467c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800467e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004682:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	330c      	adds	r3, #12
 800468a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800468c:	643a      	str	r2, [r7, #64]	@ 0x40
 800468e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004690:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004692:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004694:	e841 2300 	strex	r3, r2, [r1]
 8004698:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800469a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800469c:	2b00      	cmp	r3, #0
 800469e:	d1e5      	bne.n	800466c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	3314      	adds	r3, #20
 80046a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046a8:	6a3b      	ldr	r3, [r7, #32]
 80046aa:	e853 3f00 	ldrex	r3, [r3]
 80046ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80046b0:	69fb      	ldr	r3, [r7, #28]
 80046b2:	f023 0301 	bic.w	r3, r3, #1
 80046b6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	3314      	adds	r3, #20
 80046be:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80046c0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80046c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046c4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80046c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80046c8:	e841 2300 	strex	r3, r2, [r1]
 80046cc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80046ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d1e5      	bne.n	80046a0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046d8:	2b01      	cmp	r3, #1
 80046da:	d119      	bne.n	8004710 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	330c      	adds	r3, #12
 80046e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	e853 3f00 	ldrex	r3, [r3]
 80046ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	f023 0310 	bic.w	r3, r3, #16
 80046f2:	647b      	str	r3, [r7, #68]	@ 0x44
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	330c      	adds	r3, #12
 80046fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80046fc:	61ba      	str	r2, [r7, #24]
 80046fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004700:	6979      	ldr	r1, [r7, #20]
 8004702:	69ba      	ldr	r2, [r7, #24]
 8004704:	e841 2300 	strex	r3, r2, [r1]
 8004708:	613b      	str	r3, [r7, #16]
   return(result);
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d1e5      	bne.n	80046dc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2220      	movs	r2, #32
 8004714:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2200      	movs	r2, #0
 800471c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800471e:	bf00      	nop
 8004720:	3754      	adds	r7, #84	@ 0x54
 8004722:	46bd      	mov	sp, r7
 8004724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004728:	4770      	bx	lr

0800472a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800472a:	b580      	push	{r7, lr}
 800472c:	b084      	sub	sp, #16
 800472e:	af00      	add	r7, sp, #0
 8004730:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004736:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2200      	movs	r2, #0
 800473c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2200      	movs	r2, #0
 8004742:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004744:	68f8      	ldr	r0, [r7, #12]
 8004746:	f7ff ff3d 	bl	80045c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800474a:	bf00      	nop
 800474c:	3710      	adds	r7, #16
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}

08004752 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004752:	b480      	push	{r7}
 8004754:	b085      	sub	sp, #20
 8004756:	af00      	add	r7, sp, #0
 8004758:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004760:	b2db      	uxtb	r3, r3
 8004762:	2b21      	cmp	r3, #33	@ 0x21
 8004764:	d13e      	bne.n	80047e4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800476e:	d114      	bne.n	800479a <UART_Transmit_IT+0x48>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	691b      	ldr	r3, [r3, #16]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d110      	bne.n	800479a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6a1b      	ldr	r3, [r3, #32]
 800477c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	881b      	ldrh	r3, [r3, #0]
 8004782:	461a      	mov	r2, r3
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800478c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6a1b      	ldr	r3, [r3, #32]
 8004792:	1c9a      	adds	r2, r3, #2
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	621a      	str	r2, [r3, #32]
 8004798:	e008      	b.n	80047ac <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6a1b      	ldr	r3, [r3, #32]
 800479e:	1c59      	adds	r1, r3, #1
 80047a0:	687a      	ldr	r2, [r7, #4]
 80047a2:	6211      	str	r1, [r2, #32]
 80047a4:	781a      	ldrb	r2, [r3, #0]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80047b0:	b29b      	uxth	r3, r3
 80047b2:	3b01      	subs	r3, #1
 80047b4:	b29b      	uxth	r3, r3
 80047b6:	687a      	ldr	r2, [r7, #4]
 80047b8:	4619      	mov	r1, r3
 80047ba:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d10f      	bne.n	80047e0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	68da      	ldr	r2, [r3, #12]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80047ce:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	68da      	ldr	r2, [r3, #12]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80047de:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80047e0:	2300      	movs	r3, #0
 80047e2:	e000      	b.n	80047e6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80047e4:	2302      	movs	r3, #2
  }
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	3714      	adds	r7, #20
 80047ea:	46bd      	mov	sp, r7
 80047ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f0:	4770      	bx	lr

080047f2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80047f2:	b580      	push	{r7, lr}
 80047f4:	b082      	sub	sp, #8
 80047f6:	af00      	add	r7, sp, #0
 80047f8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	68da      	ldr	r2, [r3, #12]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004808:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2220      	movs	r2, #32
 800480e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	f7ff fecc 	bl	80045b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004818:	2300      	movs	r3, #0
}
 800481a:	4618      	mov	r0, r3
 800481c:	3708      	adds	r7, #8
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}

08004822 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004822:	b580      	push	{r7, lr}
 8004824:	b08c      	sub	sp, #48	@ 0x30
 8004826:	af00      	add	r7, sp, #0
 8004828:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004830:	b2db      	uxtb	r3, r3
 8004832:	2b22      	cmp	r3, #34	@ 0x22
 8004834:	f040 80ae 	bne.w	8004994 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004840:	d117      	bne.n	8004872 <UART_Receive_IT+0x50>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	691b      	ldr	r3, [r3, #16]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d113      	bne.n	8004872 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800484a:	2300      	movs	r3, #0
 800484c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004852:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	b29b      	uxth	r3, r3
 800485c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004860:	b29a      	uxth	r2, r3
 8004862:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004864:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800486a:	1c9a      	adds	r2, r3, #2
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	629a      	str	r2, [r3, #40]	@ 0x28
 8004870:	e026      	b.n	80048c0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004876:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004878:	2300      	movs	r3, #0
 800487a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004884:	d007      	beq.n	8004896 <UART_Receive_IT+0x74>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d10a      	bne.n	80048a4 <UART_Receive_IT+0x82>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	691b      	ldr	r3, [r3, #16]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d106      	bne.n	80048a4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	b2da      	uxtb	r2, r3
 800489e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048a0:	701a      	strb	r2, [r3, #0]
 80048a2:	e008      	b.n	80048b6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	b2db      	uxtb	r3, r3
 80048ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80048b0:	b2da      	uxtb	r2, r3
 80048b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048b4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048ba:	1c5a      	adds	r2, r3, #1
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80048c4:	b29b      	uxth	r3, r3
 80048c6:	3b01      	subs	r3, #1
 80048c8:	b29b      	uxth	r3, r3
 80048ca:	687a      	ldr	r2, [r7, #4]
 80048cc:	4619      	mov	r1, r3
 80048ce:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d15d      	bne.n	8004990 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	68da      	ldr	r2, [r3, #12]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f022 0220 	bic.w	r2, r2, #32
 80048e2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	68da      	ldr	r2, [r3, #12]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80048f2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	695a      	ldr	r2, [r3, #20]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f022 0201 	bic.w	r2, r2, #1
 8004902:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2220      	movs	r2, #32
 8004908:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2200      	movs	r2, #0
 8004910:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004916:	2b01      	cmp	r3, #1
 8004918:	d135      	bne.n	8004986 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2200      	movs	r2, #0
 800491e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	330c      	adds	r3, #12
 8004926:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	e853 3f00 	ldrex	r3, [r3]
 800492e:	613b      	str	r3, [r7, #16]
   return(result);
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	f023 0310 	bic.w	r3, r3, #16
 8004936:	627b      	str	r3, [r7, #36]	@ 0x24
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	330c      	adds	r3, #12
 800493e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004940:	623a      	str	r2, [r7, #32]
 8004942:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004944:	69f9      	ldr	r1, [r7, #28]
 8004946:	6a3a      	ldr	r2, [r7, #32]
 8004948:	e841 2300 	strex	r3, r2, [r1]
 800494c:	61bb      	str	r3, [r7, #24]
   return(result);
 800494e:	69bb      	ldr	r3, [r7, #24]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d1e5      	bne.n	8004920 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 0310 	and.w	r3, r3, #16
 800495e:	2b10      	cmp	r3, #16
 8004960:	d10a      	bne.n	8004978 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004962:	2300      	movs	r3, #0
 8004964:	60fb      	str	r3, [r7, #12]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	60fb      	str	r3, [r7, #12]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	60fb      	str	r3, [r7, #12]
 8004976:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800497c:	4619      	mov	r1, r3
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f7ff fe2a 	bl	80045d8 <HAL_UARTEx_RxEventCallback>
 8004984:	e002      	b.n	800498c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f7fc f9be 	bl	8000d08 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800498c:	2300      	movs	r3, #0
 800498e:	e002      	b.n	8004996 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004990:	2300      	movs	r3, #0
 8004992:	e000      	b.n	8004996 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004994:	2302      	movs	r3, #2
  }
}
 8004996:	4618      	mov	r0, r3
 8004998:	3730      	adds	r7, #48	@ 0x30
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}
	...

080049a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80049a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049a4:	b0c0      	sub	sp, #256	@ 0x100
 80049a6:	af00      	add	r7, sp, #0
 80049a8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	691b      	ldr	r3, [r3, #16]
 80049b4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80049b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049bc:	68d9      	ldr	r1, [r3, #12]
 80049be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	ea40 0301 	orr.w	r3, r0, r1
 80049c8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80049ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049ce:	689a      	ldr	r2, [r3, #8]
 80049d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049d4:	691b      	ldr	r3, [r3, #16]
 80049d6:	431a      	orrs	r2, r3
 80049d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049dc:	695b      	ldr	r3, [r3, #20]
 80049de:	431a      	orrs	r2, r3
 80049e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049e4:	69db      	ldr	r3, [r3, #28]
 80049e6:	4313      	orrs	r3, r2
 80049e8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80049ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	68db      	ldr	r3, [r3, #12]
 80049f4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80049f8:	f021 010c 	bic.w	r1, r1, #12
 80049fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a00:	681a      	ldr	r2, [r3, #0]
 8004a02:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004a06:	430b      	orrs	r3, r1
 8004a08:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004a0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	695b      	ldr	r3, [r3, #20]
 8004a12:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004a16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a1a:	6999      	ldr	r1, [r3, #24]
 8004a1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a20:	681a      	ldr	r2, [r3, #0]
 8004a22:	ea40 0301 	orr.w	r3, r0, r1
 8004a26:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004a28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a2c:	681a      	ldr	r2, [r3, #0]
 8004a2e:	4b8f      	ldr	r3, [pc, #572]	@ (8004c6c <UART_SetConfig+0x2cc>)
 8004a30:	429a      	cmp	r2, r3
 8004a32:	d005      	beq.n	8004a40 <UART_SetConfig+0xa0>
 8004a34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a38:	681a      	ldr	r2, [r3, #0]
 8004a3a:	4b8d      	ldr	r3, [pc, #564]	@ (8004c70 <UART_SetConfig+0x2d0>)
 8004a3c:	429a      	cmp	r2, r3
 8004a3e:	d104      	bne.n	8004a4a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004a40:	f7fd fef8 	bl	8002834 <HAL_RCC_GetPCLK2Freq>
 8004a44:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004a48:	e003      	b.n	8004a52 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004a4a:	f7fd fedf 	bl	800280c <HAL_RCC_GetPCLK1Freq>
 8004a4e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a56:	69db      	ldr	r3, [r3, #28]
 8004a58:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a5c:	f040 810c 	bne.w	8004c78 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004a60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a64:	2200      	movs	r2, #0
 8004a66:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004a6a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004a6e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004a72:	4622      	mov	r2, r4
 8004a74:	462b      	mov	r3, r5
 8004a76:	1891      	adds	r1, r2, r2
 8004a78:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004a7a:	415b      	adcs	r3, r3
 8004a7c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004a7e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004a82:	4621      	mov	r1, r4
 8004a84:	eb12 0801 	adds.w	r8, r2, r1
 8004a88:	4629      	mov	r1, r5
 8004a8a:	eb43 0901 	adc.w	r9, r3, r1
 8004a8e:	f04f 0200 	mov.w	r2, #0
 8004a92:	f04f 0300 	mov.w	r3, #0
 8004a96:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a9a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a9e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004aa2:	4690      	mov	r8, r2
 8004aa4:	4699      	mov	r9, r3
 8004aa6:	4623      	mov	r3, r4
 8004aa8:	eb18 0303 	adds.w	r3, r8, r3
 8004aac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004ab0:	462b      	mov	r3, r5
 8004ab2:	eb49 0303 	adc.w	r3, r9, r3
 8004ab6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004aba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004ac6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004aca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004ace:	460b      	mov	r3, r1
 8004ad0:	18db      	adds	r3, r3, r3
 8004ad2:	653b      	str	r3, [r7, #80]	@ 0x50
 8004ad4:	4613      	mov	r3, r2
 8004ad6:	eb42 0303 	adc.w	r3, r2, r3
 8004ada:	657b      	str	r3, [r7, #84]	@ 0x54
 8004adc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004ae0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004ae4:	f7fb fb7c 	bl	80001e0 <__aeabi_uldivmod>
 8004ae8:	4602      	mov	r2, r0
 8004aea:	460b      	mov	r3, r1
 8004aec:	4b61      	ldr	r3, [pc, #388]	@ (8004c74 <UART_SetConfig+0x2d4>)
 8004aee:	fba3 2302 	umull	r2, r3, r3, r2
 8004af2:	095b      	lsrs	r3, r3, #5
 8004af4:	011c      	lsls	r4, r3, #4
 8004af6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004afa:	2200      	movs	r2, #0
 8004afc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004b00:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004b04:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004b08:	4642      	mov	r2, r8
 8004b0a:	464b      	mov	r3, r9
 8004b0c:	1891      	adds	r1, r2, r2
 8004b0e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004b10:	415b      	adcs	r3, r3
 8004b12:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b14:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004b18:	4641      	mov	r1, r8
 8004b1a:	eb12 0a01 	adds.w	sl, r2, r1
 8004b1e:	4649      	mov	r1, r9
 8004b20:	eb43 0b01 	adc.w	fp, r3, r1
 8004b24:	f04f 0200 	mov.w	r2, #0
 8004b28:	f04f 0300 	mov.w	r3, #0
 8004b2c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004b30:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004b34:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004b38:	4692      	mov	sl, r2
 8004b3a:	469b      	mov	fp, r3
 8004b3c:	4643      	mov	r3, r8
 8004b3e:	eb1a 0303 	adds.w	r3, sl, r3
 8004b42:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004b46:	464b      	mov	r3, r9
 8004b48:	eb4b 0303 	adc.w	r3, fp, r3
 8004b4c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004b50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	2200      	movs	r2, #0
 8004b58:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004b5c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004b60:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004b64:	460b      	mov	r3, r1
 8004b66:	18db      	adds	r3, r3, r3
 8004b68:	643b      	str	r3, [r7, #64]	@ 0x40
 8004b6a:	4613      	mov	r3, r2
 8004b6c:	eb42 0303 	adc.w	r3, r2, r3
 8004b70:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b72:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004b76:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004b7a:	f7fb fb31 	bl	80001e0 <__aeabi_uldivmod>
 8004b7e:	4602      	mov	r2, r0
 8004b80:	460b      	mov	r3, r1
 8004b82:	4611      	mov	r1, r2
 8004b84:	4b3b      	ldr	r3, [pc, #236]	@ (8004c74 <UART_SetConfig+0x2d4>)
 8004b86:	fba3 2301 	umull	r2, r3, r3, r1
 8004b8a:	095b      	lsrs	r3, r3, #5
 8004b8c:	2264      	movs	r2, #100	@ 0x64
 8004b8e:	fb02 f303 	mul.w	r3, r2, r3
 8004b92:	1acb      	subs	r3, r1, r3
 8004b94:	00db      	lsls	r3, r3, #3
 8004b96:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004b9a:	4b36      	ldr	r3, [pc, #216]	@ (8004c74 <UART_SetConfig+0x2d4>)
 8004b9c:	fba3 2302 	umull	r2, r3, r3, r2
 8004ba0:	095b      	lsrs	r3, r3, #5
 8004ba2:	005b      	lsls	r3, r3, #1
 8004ba4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004ba8:	441c      	add	r4, r3
 8004baa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004bae:	2200      	movs	r2, #0
 8004bb0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004bb4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004bb8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004bbc:	4642      	mov	r2, r8
 8004bbe:	464b      	mov	r3, r9
 8004bc0:	1891      	adds	r1, r2, r2
 8004bc2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004bc4:	415b      	adcs	r3, r3
 8004bc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004bc8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004bcc:	4641      	mov	r1, r8
 8004bce:	1851      	adds	r1, r2, r1
 8004bd0:	6339      	str	r1, [r7, #48]	@ 0x30
 8004bd2:	4649      	mov	r1, r9
 8004bd4:	414b      	adcs	r3, r1
 8004bd6:	637b      	str	r3, [r7, #52]	@ 0x34
 8004bd8:	f04f 0200 	mov.w	r2, #0
 8004bdc:	f04f 0300 	mov.w	r3, #0
 8004be0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004be4:	4659      	mov	r1, fp
 8004be6:	00cb      	lsls	r3, r1, #3
 8004be8:	4651      	mov	r1, sl
 8004bea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004bee:	4651      	mov	r1, sl
 8004bf0:	00ca      	lsls	r2, r1, #3
 8004bf2:	4610      	mov	r0, r2
 8004bf4:	4619      	mov	r1, r3
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	4642      	mov	r2, r8
 8004bfa:	189b      	adds	r3, r3, r2
 8004bfc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004c00:	464b      	mov	r3, r9
 8004c02:	460a      	mov	r2, r1
 8004c04:	eb42 0303 	adc.w	r3, r2, r3
 8004c08:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004c0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	2200      	movs	r2, #0
 8004c14:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004c18:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004c1c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004c20:	460b      	mov	r3, r1
 8004c22:	18db      	adds	r3, r3, r3
 8004c24:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004c26:	4613      	mov	r3, r2
 8004c28:	eb42 0303 	adc.w	r3, r2, r3
 8004c2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004c2e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004c32:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004c36:	f7fb fad3 	bl	80001e0 <__aeabi_uldivmod>
 8004c3a:	4602      	mov	r2, r0
 8004c3c:	460b      	mov	r3, r1
 8004c3e:	4b0d      	ldr	r3, [pc, #52]	@ (8004c74 <UART_SetConfig+0x2d4>)
 8004c40:	fba3 1302 	umull	r1, r3, r3, r2
 8004c44:	095b      	lsrs	r3, r3, #5
 8004c46:	2164      	movs	r1, #100	@ 0x64
 8004c48:	fb01 f303 	mul.w	r3, r1, r3
 8004c4c:	1ad3      	subs	r3, r2, r3
 8004c4e:	00db      	lsls	r3, r3, #3
 8004c50:	3332      	adds	r3, #50	@ 0x32
 8004c52:	4a08      	ldr	r2, [pc, #32]	@ (8004c74 <UART_SetConfig+0x2d4>)
 8004c54:	fba2 2303 	umull	r2, r3, r2, r3
 8004c58:	095b      	lsrs	r3, r3, #5
 8004c5a:	f003 0207 	and.w	r2, r3, #7
 8004c5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4422      	add	r2, r4
 8004c66:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004c68:	e106      	b.n	8004e78 <UART_SetConfig+0x4d8>
 8004c6a:	bf00      	nop
 8004c6c:	40011000 	.word	0x40011000
 8004c70:	40011400 	.word	0x40011400
 8004c74:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004c78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004c82:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004c86:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004c8a:	4642      	mov	r2, r8
 8004c8c:	464b      	mov	r3, r9
 8004c8e:	1891      	adds	r1, r2, r2
 8004c90:	6239      	str	r1, [r7, #32]
 8004c92:	415b      	adcs	r3, r3
 8004c94:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c96:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004c9a:	4641      	mov	r1, r8
 8004c9c:	1854      	adds	r4, r2, r1
 8004c9e:	4649      	mov	r1, r9
 8004ca0:	eb43 0501 	adc.w	r5, r3, r1
 8004ca4:	f04f 0200 	mov.w	r2, #0
 8004ca8:	f04f 0300 	mov.w	r3, #0
 8004cac:	00eb      	lsls	r3, r5, #3
 8004cae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004cb2:	00e2      	lsls	r2, r4, #3
 8004cb4:	4614      	mov	r4, r2
 8004cb6:	461d      	mov	r5, r3
 8004cb8:	4643      	mov	r3, r8
 8004cba:	18e3      	adds	r3, r4, r3
 8004cbc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004cc0:	464b      	mov	r3, r9
 8004cc2:	eb45 0303 	adc.w	r3, r5, r3
 8004cc6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004cca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004cd6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004cda:	f04f 0200 	mov.w	r2, #0
 8004cde:	f04f 0300 	mov.w	r3, #0
 8004ce2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004ce6:	4629      	mov	r1, r5
 8004ce8:	008b      	lsls	r3, r1, #2
 8004cea:	4621      	mov	r1, r4
 8004cec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004cf0:	4621      	mov	r1, r4
 8004cf2:	008a      	lsls	r2, r1, #2
 8004cf4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004cf8:	f7fb fa72 	bl	80001e0 <__aeabi_uldivmod>
 8004cfc:	4602      	mov	r2, r0
 8004cfe:	460b      	mov	r3, r1
 8004d00:	4b60      	ldr	r3, [pc, #384]	@ (8004e84 <UART_SetConfig+0x4e4>)
 8004d02:	fba3 2302 	umull	r2, r3, r3, r2
 8004d06:	095b      	lsrs	r3, r3, #5
 8004d08:	011c      	lsls	r4, r3, #4
 8004d0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d0e:	2200      	movs	r2, #0
 8004d10:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004d14:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004d18:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004d1c:	4642      	mov	r2, r8
 8004d1e:	464b      	mov	r3, r9
 8004d20:	1891      	adds	r1, r2, r2
 8004d22:	61b9      	str	r1, [r7, #24]
 8004d24:	415b      	adcs	r3, r3
 8004d26:	61fb      	str	r3, [r7, #28]
 8004d28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d2c:	4641      	mov	r1, r8
 8004d2e:	1851      	adds	r1, r2, r1
 8004d30:	6139      	str	r1, [r7, #16]
 8004d32:	4649      	mov	r1, r9
 8004d34:	414b      	adcs	r3, r1
 8004d36:	617b      	str	r3, [r7, #20]
 8004d38:	f04f 0200 	mov.w	r2, #0
 8004d3c:	f04f 0300 	mov.w	r3, #0
 8004d40:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004d44:	4659      	mov	r1, fp
 8004d46:	00cb      	lsls	r3, r1, #3
 8004d48:	4651      	mov	r1, sl
 8004d4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d4e:	4651      	mov	r1, sl
 8004d50:	00ca      	lsls	r2, r1, #3
 8004d52:	4610      	mov	r0, r2
 8004d54:	4619      	mov	r1, r3
 8004d56:	4603      	mov	r3, r0
 8004d58:	4642      	mov	r2, r8
 8004d5a:	189b      	adds	r3, r3, r2
 8004d5c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004d60:	464b      	mov	r3, r9
 8004d62:	460a      	mov	r2, r1
 8004d64:	eb42 0303 	adc.w	r3, r2, r3
 8004d68:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004d6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	2200      	movs	r2, #0
 8004d74:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004d76:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004d78:	f04f 0200 	mov.w	r2, #0
 8004d7c:	f04f 0300 	mov.w	r3, #0
 8004d80:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004d84:	4649      	mov	r1, r9
 8004d86:	008b      	lsls	r3, r1, #2
 8004d88:	4641      	mov	r1, r8
 8004d8a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d8e:	4641      	mov	r1, r8
 8004d90:	008a      	lsls	r2, r1, #2
 8004d92:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004d96:	f7fb fa23 	bl	80001e0 <__aeabi_uldivmod>
 8004d9a:	4602      	mov	r2, r0
 8004d9c:	460b      	mov	r3, r1
 8004d9e:	4611      	mov	r1, r2
 8004da0:	4b38      	ldr	r3, [pc, #224]	@ (8004e84 <UART_SetConfig+0x4e4>)
 8004da2:	fba3 2301 	umull	r2, r3, r3, r1
 8004da6:	095b      	lsrs	r3, r3, #5
 8004da8:	2264      	movs	r2, #100	@ 0x64
 8004daa:	fb02 f303 	mul.w	r3, r2, r3
 8004dae:	1acb      	subs	r3, r1, r3
 8004db0:	011b      	lsls	r3, r3, #4
 8004db2:	3332      	adds	r3, #50	@ 0x32
 8004db4:	4a33      	ldr	r2, [pc, #204]	@ (8004e84 <UART_SetConfig+0x4e4>)
 8004db6:	fba2 2303 	umull	r2, r3, r2, r3
 8004dba:	095b      	lsrs	r3, r3, #5
 8004dbc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004dc0:	441c      	add	r4, r3
 8004dc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	673b      	str	r3, [r7, #112]	@ 0x70
 8004dca:	677a      	str	r2, [r7, #116]	@ 0x74
 8004dcc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004dd0:	4642      	mov	r2, r8
 8004dd2:	464b      	mov	r3, r9
 8004dd4:	1891      	adds	r1, r2, r2
 8004dd6:	60b9      	str	r1, [r7, #8]
 8004dd8:	415b      	adcs	r3, r3
 8004dda:	60fb      	str	r3, [r7, #12]
 8004ddc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004de0:	4641      	mov	r1, r8
 8004de2:	1851      	adds	r1, r2, r1
 8004de4:	6039      	str	r1, [r7, #0]
 8004de6:	4649      	mov	r1, r9
 8004de8:	414b      	adcs	r3, r1
 8004dea:	607b      	str	r3, [r7, #4]
 8004dec:	f04f 0200 	mov.w	r2, #0
 8004df0:	f04f 0300 	mov.w	r3, #0
 8004df4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004df8:	4659      	mov	r1, fp
 8004dfa:	00cb      	lsls	r3, r1, #3
 8004dfc:	4651      	mov	r1, sl
 8004dfe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e02:	4651      	mov	r1, sl
 8004e04:	00ca      	lsls	r2, r1, #3
 8004e06:	4610      	mov	r0, r2
 8004e08:	4619      	mov	r1, r3
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	4642      	mov	r2, r8
 8004e0e:	189b      	adds	r3, r3, r2
 8004e10:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004e12:	464b      	mov	r3, r9
 8004e14:	460a      	mov	r2, r1
 8004e16:	eb42 0303 	adc.w	r3, r2, r3
 8004e1a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004e1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	2200      	movs	r2, #0
 8004e24:	663b      	str	r3, [r7, #96]	@ 0x60
 8004e26:	667a      	str	r2, [r7, #100]	@ 0x64
 8004e28:	f04f 0200 	mov.w	r2, #0
 8004e2c:	f04f 0300 	mov.w	r3, #0
 8004e30:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004e34:	4649      	mov	r1, r9
 8004e36:	008b      	lsls	r3, r1, #2
 8004e38:	4641      	mov	r1, r8
 8004e3a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e3e:	4641      	mov	r1, r8
 8004e40:	008a      	lsls	r2, r1, #2
 8004e42:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004e46:	f7fb f9cb 	bl	80001e0 <__aeabi_uldivmod>
 8004e4a:	4602      	mov	r2, r0
 8004e4c:	460b      	mov	r3, r1
 8004e4e:	4b0d      	ldr	r3, [pc, #52]	@ (8004e84 <UART_SetConfig+0x4e4>)
 8004e50:	fba3 1302 	umull	r1, r3, r3, r2
 8004e54:	095b      	lsrs	r3, r3, #5
 8004e56:	2164      	movs	r1, #100	@ 0x64
 8004e58:	fb01 f303 	mul.w	r3, r1, r3
 8004e5c:	1ad3      	subs	r3, r2, r3
 8004e5e:	011b      	lsls	r3, r3, #4
 8004e60:	3332      	adds	r3, #50	@ 0x32
 8004e62:	4a08      	ldr	r2, [pc, #32]	@ (8004e84 <UART_SetConfig+0x4e4>)
 8004e64:	fba2 2303 	umull	r2, r3, r2, r3
 8004e68:	095b      	lsrs	r3, r3, #5
 8004e6a:	f003 020f 	and.w	r2, r3, #15
 8004e6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4422      	add	r2, r4
 8004e76:	609a      	str	r2, [r3, #8]
}
 8004e78:	bf00      	nop
 8004e7a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e84:	51eb851f 	.word	0x51eb851f

08004e88 <__NVIC_SetPriority>:
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b083      	sub	sp, #12
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	4603      	mov	r3, r0
 8004e90:	6039      	str	r1, [r7, #0]
 8004e92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	db0a      	blt.n	8004eb2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	b2da      	uxtb	r2, r3
 8004ea0:	490c      	ldr	r1, [pc, #48]	@ (8004ed4 <__NVIC_SetPriority+0x4c>)
 8004ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ea6:	0112      	lsls	r2, r2, #4
 8004ea8:	b2d2      	uxtb	r2, r2
 8004eaa:	440b      	add	r3, r1
 8004eac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004eb0:	e00a      	b.n	8004ec8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	b2da      	uxtb	r2, r3
 8004eb6:	4908      	ldr	r1, [pc, #32]	@ (8004ed8 <__NVIC_SetPriority+0x50>)
 8004eb8:	79fb      	ldrb	r3, [r7, #7]
 8004eba:	f003 030f 	and.w	r3, r3, #15
 8004ebe:	3b04      	subs	r3, #4
 8004ec0:	0112      	lsls	r2, r2, #4
 8004ec2:	b2d2      	uxtb	r2, r2
 8004ec4:	440b      	add	r3, r1
 8004ec6:	761a      	strb	r2, [r3, #24]
}
 8004ec8:	bf00      	nop
 8004eca:	370c      	adds	r7, #12
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed2:	4770      	bx	lr
 8004ed4:	e000e100 	.word	0xe000e100
 8004ed8:	e000ed00 	.word	0xe000ed00

08004edc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004edc:	b580      	push	{r7, lr}
 8004ede:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004ee0:	4b05      	ldr	r3, [pc, #20]	@ (8004ef8 <SysTick_Handler+0x1c>)
 8004ee2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004ee4:	f001 fd46 	bl	8006974 <xTaskGetSchedulerState>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	2b01      	cmp	r3, #1
 8004eec:	d001      	beq.n	8004ef2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004eee:	f002 fb3b 	bl	8007568 <xPortSysTickHandler>
  }
}
 8004ef2:	bf00      	nop
 8004ef4:	bd80      	pop	{r7, pc}
 8004ef6:	bf00      	nop
 8004ef8:	e000e010 	.word	0xe000e010

08004efc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004efc:	b580      	push	{r7, lr}
 8004efe:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004f00:	2100      	movs	r1, #0
 8004f02:	f06f 0004 	mvn.w	r0, #4
 8004f06:	f7ff ffbf 	bl	8004e88 <__NVIC_SetPriority>
#endif
}
 8004f0a:	bf00      	nop
 8004f0c:	bd80      	pop	{r7, pc}
	...

08004f10 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004f10:	b480      	push	{r7}
 8004f12:	b083      	sub	sp, #12
 8004f14:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f16:	f3ef 8305 	mrs	r3, IPSR
 8004f1a:	603b      	str	r3, [r7, #0]
  return(result);
 8004f1c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d003      	beq.n	8004f2a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004f22:	f06f 0305 	mvn.w	r3, #5
 8004f26:	607b      	str	r3, [r7, #4]
 8004f28:	e00c      	b.n	8004f44 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004f2a:	4b0a      	ldr	r3, [pc, #40]	@ (8004f54 <osKernelInitialize+0x44>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d105      	bne.n	8004f3e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004f32:	4b08      	ldr	r3, [pc, #32]	@ (8004f54 <osKernelInitialize+0x44>)
 8004f34:	2201      	movs	r2, #1
 8004f36:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004f38:	2300      	movs	r3, #0
 8004f3a:	607b      	str	r3, [r7, #4]
 8004f3c:	e002      	b.n	8004f44 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004f3e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004f42:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004f44:	687b      	ldr	r3, [r7, #4]
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	370c      	adds	r7, #12
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f50:	4770      	bx	lr
 8004f52:	bf00      	nop
 8004f54:	2000026c 	.word	0x2000026c

08004f58 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b082      	sub	sp, #8
 8004f5c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f5e:	f3ef 8305 	mrs	r3, IPSR
 8004f62:	603b      	str	r3, [r7, #0]
  return(result);
 8004f64:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d003      	beq.n	8004f72 <osKernelStart+0x1a>
    stat = osErrorISR;
 8004f6a:	f06f 0305 	mvn.w	r3, #5
 8004f6e:	607b      	str	r3, [r7, #4]
 8004f70:	e010      	b.n	8004f94 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004f72:	4b0b      	ldr	r3, [pc, #44]	@ (8004fa0 <osKernelStart+0x48>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	2b01      	cmp	r3, #1
 8004f78:	d109      	bne.n	8004f8e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004f7a:	f7ff ffbf 	bl	8004efc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004f7e:	4b08      	ldr	r3, [pc, #32]	@ (8004fa0 <osKernelStart+0x48>)
 8004f80:	2202      	movs	r2, #2
 8004f82:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004f84:	f001 f892 	bl	80060ac <vTaskStartScheduler>
      stat = osOK;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	607b      	str	r3, [r7, #4]
 8004f8c:	e002      	b.n	8004f94 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004f8e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004f92:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004f94:	687b      	ldr	r3, [r7, #4]
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	3708      	adds	r7, #8
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}
 8004f9e:	bf00      	nop
 8004fa0:	2000026c 	.word	0x2000026c

08004fa4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b08e      	sub	sp, #56	@ 0x38
 8004fa8:	af04      	add	r7, sp, #16
 8004faa:	60f8      	str	r0, [r7, #12]
 8004fac:	60b9      	str	r1, [r7, #8]
 8004fae:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004fb4:	f3ef 8305 	mrs	r3, IPSR
 8004fb8:	617b      	str	r3, [r7, #20]
  return(result);
 8004fba:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d17e      	bne.n	80050be <osThreadNew+0x11a>
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d07b      	beq.n	80050be <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004fc6:	2380      	movs	r3, #128	@ 0x80
 8004fc8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004fca:	2318      	movs	r3, #24
 8004fcc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8004fd2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004fd6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d045      	beq.n	800506a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d002      	beq.n	8004fec <osThreadNew+0x48>
        name = attr->name;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	699b      	ldr	r3, [r3, #24]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d002      	beq.n	8004ffa <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	699b      	ldr	r3, [r3, #24]
 8004ff8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004ffa:	69fb      	ldr	r3, [r7, #28]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d008      	beq.n	8005012 <osThreadNew+0x6e>
 8005000:	69fb      	ldr	r3, [r7, #28]
 8005002:	2b38      	cmp	r3, #56	@ 0x38
 8005004:	d805      	bhi.n	8005012 <osThreadNew+0x6e>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	f003 0301 	and.w	r3, r3, #1
 800500e:	2b00      	cmp	r3, #0
 8005010:	d001      	beq.n	8005016 <osThreadNew+0x72>
        return (NULL);
 8005012:	2300      	movs	r3, #0
 8005014:	e054      	b.n	80050c0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	695b      	ldr	r3, [r3, #20]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d003      	beq.n	8005026 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	695b      	ldr	r3, [r3, #20]
 8005022:	089b      	lsrs	r3, r3, #2
 8005024:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d00e      	beq.n	800504c <osThreadNew+0xa8>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	68db      	ldr	r3, [r3, #12]
 8005032:	2ba7      	cmp	r3, #167	@ 0xa7
 8005034:	d90a      	bls.n	800504c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800503a:	2b00      	cmp	r3, #0
 800503c:	d006      	beq.n	800504c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	695b      	ldr	r3, [r3, #20]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d002      	beq.n	800504c <osThreadNew+0xa8>
        mem = 1;
 8005046:	2301      	movs	r3, #1
 8005048:	61bb      	str	r3, [r7, #24]
 800504a:	e010      	b.n	800506e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	689b      	ldr	r3, [r3, #8]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d10c      	bne.n	800506e <osThreadNew+0xca>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	68db      	ldr	r3, [r3, #12]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d108      	bne.n	800506e <osThreadNew+0xca>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	691b      	ldr	r3, [r3, #16]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d104      	bne.n	800506e <osThreadNew+0xca>
          mem = 0;
 8005064:	2300      	movs	r3, #0
 8005066:	61bb      	str	r3, [r7, #24]
 8005068:	e001      	b.n	800506e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800506a:	2300      	movs	r3, #0
 800506c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800506e:	69bb      	ldr	r3, [r7, #24]
 8005070:	2b01      	cmp	r3, #1
 8005072:	d110      	bne.n	8005096 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005078:	687a      	ldr	r2, [r7, #4]
 800507a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800507c:	9202      	str	r2, [sp, #8]
 800507e:	9301      	str	r3, [sp, #4]
 8005080:	69fb      	ldr	r3, [r7, #28]
 8005082:	9300      	str	r3, [sp, #0]
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	6a3a      	ldr	r2, [r7, #32]
 8005088:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800508a:	68f8      	ldr	r0, [r7, #12]
 800508c:	f000 fe1a 	bl	8005cc4 <xTaskCreateStatic>
 8005090:	4603      	mov	r3, r0
 8005092:	613b      	str	r3, [r7, #16]
 8005094:	e013      	b.n	80050be <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005096:	69bb      	ldr	r3, [r7, #24]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d110      	bne.n	80050be <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800509c:	6a3b      	ldr	r3, [r7, #32]
 800509e:	b29a      	uxth	r2, r3
 80050a0:	f107 0310 	add.w	r3, r7, #16
 80050a4:	9301      	str	r3, [sp, #4]
 80050a6:	69fb      	ldr	r3, [r7, #28]
 80050a8:	9300      	str	r3, [sp, #0]
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80050ae:	68f8      	ldr	r0, [r7, #12]
 80050b0:	f000 fe68 	bl	8005d84 <xTaskCreate>
 80050b4:	4603      	mov	r3, r0
 80050b6:	2b01      	cmp	r3, #1
 80050b8:	d001      	beq.n	80050be <osThreadNew+0x11a>
            hTask = NULL;
 80050ba:	2300      	movs	r3, #0
 80050bc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80050be:	693b      	ldr	r3, [r7, #16]
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	3728      	adds	r7, #40	@ 0x28
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}

080050c8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b084      	sub	sp, #16
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80050d0:	f3ef 8305 	mrs	r3, IPSR
 80050d4:	60bb      	str	r3, [r7, #8]
  return(result);
 80050d6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d003      	beq.n	80050e4 <osDelay+0x1c>
    stat = osErrorISR;
 80050dc:	f06f 0305 	mvn.w	r3, #5
 80050e0:	60fb      	str	r3, [r7, #12]
 80050e2:	e007      	b.n	80050f4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80050e4:	2300      	movs	r3, #0
 80050e6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d002      	beq.n	80050f4 <osDelay+0x2c>
      vTaskDelay(ticks);
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	f000 ffa6 	bl	8006040 <vTaskDelay>
    }
  }

  return (stat);
 80050f4:	68fb      	ldr	r3, [r7, #12]
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	3710      	adds	r7, #16
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}
	...

08005100 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005100:	b480      	push	{r7}
 8005102:	b085      	sub	sp, #20
 8005104:	af00      	add	r7, sp, #0
 8005106:	60f8      	str	r0, [r7, #12]
 8005108:	60b9      	str	r1, [r7, #8]
 800510a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	4a07      	ldr	r2, [pc, #28]	@ (800512c <vApplicationGetIdleTaskMemory+0x2c>)
 8005110:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	4a06      	ldr	r2, [pc, #24]	@ (8005130 <vApplicationGetIdleTaskMemory+0x30>)
 8005116:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2280      	movs	r2, #128	@ 0x80
 800511c:	601a      	str	r2, [r3, #0]
}
 800511e:	bf00      	nop
 8005120:	3714      	adds	r7, #20
 8005122:	46bd      	mov	sp, r7
 8005124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005128:	4770      	bx	lr
 800512a:	bf00      	nop
 800512c:	20000270 	.word	0x20000270
 8005130:	20000318 	.word	0x20000318

08005134 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005134:	b480      	push	{r7}
 8005136:	b085      	sub	sp, #20
 8005138:	af00      	add	r7, sp, #0
 800513a:	60f8      	str	r0, [r7, #12]
 800513c:	60b9      	str	r1, [r7, #8]
 800513e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	4a07      	ldr	r2, [pc, #28]	@ (8005160 <vApplicationGetTimerTaskMemory+0x2c>)
 8005144:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	4a06      	ldr	r2, [pc, #24]	@ (8005164 <vApplicationGetTimerTaskMemory+0x30>)
 800514a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005152:	601a      	str	r2, [r3, #0]
}
 8005154:	bf00      	nop
 8005156:	3714      	adds	r7, #20
 8005158:	46bd      	mov	sp, r7
 800515a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515e:	4770      	bx	lr
 8005160:	20000518 	.word	0x20000518
 8005164:	200005c0 	.word	0x200005c0

08005168 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005168:	b480      	push	{r7}
 800516a:	b083      	sub	sp, #12
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	f103 0208 	add.w	r2, r3, #8
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005180:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	f103 0208 	add.w	r2, r3, #8
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	f103 0208 	add.w	r2, r3, #8
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2200      	movs	r2, #0
 800519a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800519c:	bf00      	nop
 800519e:	370c      	adds	r7, #12
 80051a0:	46bd      	mov	sp, r7
 80051a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a6:	4770      	bx	lr

080051a8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80051a8:	b480      	push	{r7}
 80051aa:	b083      	sub	sp, #12
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2200      	movs	r2, #0
 80051b4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80051b6:	bf00      	nop
 80051b8:	370c      	adds	r7, #12
 80051ba:	46bd      	mov	sp, r7
 80051bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c0:	4770      	bx	lr

080051c2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80051c2:	b480      	push	{r7}
 80051c4:	b085      	sub	sp, #20
 80051c6:	af00      	add	r7, sp, #0
 80051c8:	6078      	str	r0, [r7, #4]
 80051ca:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	68fa      	ldr	r2, [r7, #12]
 80051d6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	689a      	ldr	r2, [r3, #8]
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	689b      	ldr	r3, [r3, #8]
 80051e4:	683a      	ldr	r2, [r7, #0]
 80051e6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	683a      	ldr	r2, [r7, #0]
 80051ec:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	687a      	ldr	r2, [r7, #4]
 80051f2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	1c5a      	adds	r2, r3, #1
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	601a      	str	r2, [r3, #0]
}
 80051fe:	bf00      	nop
 8005200:	3714      	adds	r7, #20
 8005202:	46bd      	mov	sp, r7
 8005204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005208:	4770      	bx	lr

0800520a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800520a:	b480      	push	{r7}
 800520c:	b085      	sub	sp, #20
 800520e:	af00      	add	r7, sp, #0
 8005210:	6078      	str	r0, [r7, #4]
 8005212:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005220:	d103      	bne.n	800522a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	691b      	ldr	r3, [r3, #16]
 8005226:	60fb      	str	r3, [r7, #12]
 8005228:	e00c      	b.n	8005244 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	3308      	adds	r3, #8
 800522e:	60fb      	str	r3, [r7, #12]
 8005230:	e002      	b.n	8005238 <vListInsert+0x2e>
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	60fb      	str	r3, [r7, #12]
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	68ba      	ldr	r2, [r7, #8]
 8005240:	429a      	cmp	r2, r3
 8005242:	d2f6      	bcs.n	8005232 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	685a      	ldr	r2, [r3, #4]
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	683a      	ldr	r2, [r7, #0]
 8005252:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	68fa      	ldr	r2, [r7, #12]
 8005258:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	683a      	ldr	r2, [r7, #0]
 800525e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	687a      	ldr	r2, [r7, #4]
 8005264:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	1c5a      	adds	r2, r3, #1
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	601a      	str	r2, [r3, #0]
}
 8005270:	bf00      	nop
 8005272:	3714      	adds	r7, #20
 8005274:	46bd      	mov	sp, r7
 8005276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527a:	4770      	bx	lr

0800527c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800527c:	b480      	push	{r7}
 800527e:	b085      	sub	sp, #20
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	691b      	ldr	r3, [r3, #16]
 8005288:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	687a      	ldr	r2, [r7, #4]
 8005290:	6892      	ldr	r2, [r2, #8]
 8005292:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	689b      	ldr	r3, [r3, #8]
 8005298:	687a      	ldr	r2, [r7, #4]
 800529a:	6852      	ldr	r2, [r2, #4]
 800529c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	687a      	ldr	r2, [r7, #4]
 80052a4:	429a      	cmp	r2, r3
 80052a6:	d103      	bne.n	80052b0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	689a      	ldr	r2, [r3, #8]
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2200      	movs	r2, #0
 80052b4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	1e5a      	subs	r2, r3, #1
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
}
 80052c4:	4618      	mov	r0, r3
 80052c6:	3714      	adds	r7, #20
 80052c8:	46bd      	mov	sp, r7
 80052ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ce:	4770      	bx	lr

080052d0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b084      	sub	sp, #16
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
 80052d8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d10b      	bne.n	80052fc <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80052e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052e8:	f383 8811 	msr	BASEPRI, r3
 80052ec:	f3bf 8f6f 	isb	sy
 80052f0:	f3bf 8f4f 	dsb	sy
 80052f4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80052f6:	bf00      	nop
 80052f8:	bf00      	nop
 80052fa:	e7fd      	b.n	80052f8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80052fc:	f002 f8a4 	bl	8007448 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681a      	ldr	r2, [r3, #0]
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005308:	68f9      	ldr	r1, [r7, #12]
 800530a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800530c:	fb01 f303 	mul.w	r3, r1, r3
 8005310:	441a      	add	r2, r3
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	2200      	movs	r2, #0
 800531a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681a      	ldr	r2, [r3, #0]
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681a      	ldr	r2, [r3, #0]
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800532c:	3b01      	subs	r3, #1
 800532e:	68f9      	ldr	r1, [r7, #12]
 8005330:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005332:	fb01 f303 	mul.w	r3, r1, r3
 8005336:	441a      	add	r2, r3
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	22ff      	movs	r2, #255	@ 0xff
 8005340:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	22ff      	movs	r2, #255	@ 0xff
 8005348:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d114      	bne.n	800537c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	691b      	ldr	r3, [r3, #16]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d01a      	beq.n	8005390 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	3310      	adds	r3, #16
 800535e:	4618      	mov	r0, r3
 8005360:	f001 f942 	bl	80065e8 <xTaskRemoveFromEventList>
 8005364:	4603      	mov	r3, r0
 8005366:	2b00      	cmp	r3, #0
 8005368:	d012      	beq.n	8005390 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800536a:	4b0d      	ldr	r3, [pc, #52]	@ (80053a0 <xQueueGenericReset+0xd0>)
 800536c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005370:	601a      	str	r2, [r3, #0]
 8005372:	f3bf 8f4f 	dsb	sy
 8005376:	f3bf 8f6f 	isb	sy
 800537a:	e009      	b.n	8005390 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	3310      	adds	r3, #16
 8005380:	4618      	mov	r0, r3
 8005382:	f7ff fef1 	bl	8005168 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	3324      	adds	r3, #36	@ 0x24
 800538a:	4618      	mov	r0, r3
 800538c:	f7ff feec 	bl	8005168 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005390:	f002 f88c 	bl	80074ac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005394:	2301      	movs	r3, #1
}
 8005396:	4618      	mov	r0, r3
 8005398:	3710      	adds	r7, #16
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}
 800539e:	bf00      	nop
 80053a0:	e000ed04 	.word	0xe000ed04

080053a4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b08e      	sub	sp, #56	@ 0x38
 80053a8:	af02      	add	r7, sp, #8
 80053aa:	60f8      	str	r0, [r7, #12]
 80053ac:	60b9      	str	r1, [r7, #8]
 80053ae:	607a      	str	r2, [r7, #4]
 80053b0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d10b      	bne.n	80053d0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80053b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053bc:	f383 8811 	msr	BASEPRI, r3
 80053c0:	f3bf 8f6f 	isb	sy
 80053c4:	f3bf 8f4f 	dsb	sy
 80053c8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80053ca:	bf00      	nop
 80053cc:	bf00      	nop
 80053ce:	e7fd      	b.n	80053cc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d10b      	bne.n	80053ee <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80053d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053da:	f383 8811 	msr	BASEPRI, r3
 80053de:	f3bf 8f6f 	isb	sy
 80053e2:	f3bf 8f4f 	dsb	sy
 80053e6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80053e8:	bf00      	nop
 80053ea:	bf00      	nop
 80053ec:	e7fd      	b.n	80053ea <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d002      	beq.n	80053fa <xQueueGenericCreateStatic+0x56>
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d001      	beq.n	80053fe <xQueueGenericCreateStatic+0x5a>
 80053fa:	2301      	movs	r3, #1
 80053fc:	e000      	b.n	8005400 <xQueueGenericCreateStatic+0x5c>
 80053fe:	2300      	movs	r3, #0
 8005400:	2b00      	cmp	r3, #0
 8005402:	d10b      	bne.n	800541c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8005404:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005408:	f383 8811 	msr	BASEPRI, r3
 800540c:	f3bf 8f6f 	isb	sy
 8005410:	f3bf 8f4f 	dsb	sy
 8005414:	623b      	str	r3, [r7, #32]
}
 8005416:	bf00      	nop
 8005418:	bf00      	nop
 800541a:	e7fd      	b.n	8005418 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d102      	bne.n	8005428 <xQueueGenericCreateStatic+0x84>
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d101      	bne.n	800542c <xQueueGenericCreateStatic+0x88>
 8005428:	2301      	movs	r3, #1
 800542a:	e000      	b.n	800542e <xQueueGenericCreateStatic+0x8a>
 800542c:	2300      	movs	r3, #0
 800542e:	2b00      	cmp	r3, #0
 8005430:	d10b      	bne.n	800544a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8005432:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005436:	f383 8811 	msr	BASEPRI, r3
 800543a:	f3bf 8f6f 	isb	sy
 800543e:	f3bf 8f4f 	dsb	sy
 8005442:	61fb      	str	r3, [r7, #28]
}
 8005444:	bf00      	nop
 8005446:	bf00      	nop
 8005448:	e7fd      	b.n	8005446 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800544a:	2350      	movs	r3, #80	@ 0x50
 800544c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	2b50      	cmp	r3, #80	@ 0x50
 8005452:	d00b      	beq.n	800546c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8005454:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005458:	f383 8811 	msr	BASEPRI, r3
 800545c:	f3bf 8f6f 	isb	sy
 8005460:	f3bf 8f4f 	dsb	sy
 8005464:	61bb      	str	r3, [r7, #24]
}
 8005466:	bf00      	nop
 8005468:	bf00      	nop
 800546a:	e7fd      	b.n	8005468 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800546c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8005472:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005474:	2b00      	cmp	r3, #0
 8005476:	d00d      	beq.n	8005494 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005478:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800547a:	2201      	movs	r2, #1
 800547c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005480:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005484:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005486:	9300      	str	r3, [sp, #0]
 8005488:	4613      	mov	r3, r2
 800548a:	687a      	ldr	r2, [r7, #4]
 800548c:	68b9      	ldr	r1, [r7, #8]
 800548e:	68f8      	ldr	r0, [r7, #12]
 8005490:	f000 f805 	bl	800549e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005494:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8005496:	4618      	mov	r0, r3
 8005498:	3730      	adds	r7, #48	@ 0x30
 800549a:	46bd      	mov	sp, r7
 800549c:	bd80      	pop	{r7, pc}

0800549e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800549e:	b580      	push	{r7, lr}
 80054a0:	b084      	sub	sp, #16
 80054a2:	af00      	add	r7, sp, #0
 80054a4:	60f8      	str	r0, [r7, #12]
 80054a6:	60b9      	str	r1, [r7, #8]
 80054a8:	607a      	str	r2, [r7, #4]
 80054aa:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d103      	bne.n	80054ba <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80054b2:	69bb      	ldr	r3, [r7, #24]
 80054b4:	69ba      	ldr	r2, [r7, #24]
 80054b6:	601a      	str	r2, [r3, #0]
 80054b8:	e002      	b.n	80054c0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80054ba:	69bb      	ldr	r3, [r7, #24]
 80054bc:	687a      	ldr	r2, [r7, #4]
 80054be:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80054c0:	69bb      	ldr	r3, [r7, #24]
 80054c2:	68fa      	ldr	r2, [r7, #12]
 80054c4:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80054c6:	69bb      	ldr	r3, [r7, #24]
 80054c8:	68ba      	ldr	r2, [r7, #8]
 80054ca:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80054cc:	2101      	movs	r1, #1
 80054ce:	69b8      	ldr	r0, [r7, #24]
 80054d0:	f7ff fefe 	bl	80052d0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80054d4:	69bb      	ldr	r3, [r7, #24]
 80054d6:	78fa      	ldrb	r2, [r7, #3]
 80054d8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80054dc:	bf00      	nop
 80054de:	3710      	adds	r7, #16
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}

080054e4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b08e      	sub	sp, #56	@ 0x38
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	60f8      	str	r0, [r7, #12]
 80054ec:	60b9      	str	r1, [r7, #8]
 80054ee:	607a      	str	r2, [r7, #4]
 80054f0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80054f2:	2300      	movs	r3, #0
 80054f4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80054fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d10b      	bne.n	8005518 <xQueueGenericSend+0x34>
	__asm volatile
 8005500:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005504:	f383 8811 	msr	BASEPRI, r3
 8005508:	f3bf 8f6f 	isb	sy
 800550c:	f3bf 8f4f 	dsb	sy
 8005510:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005512:	bf00      	nop
 8005514:	bf00      	nop
 8005516:	e7fd      	b.n	8005514 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d103      	bne.n	8005526 <xQueueGenericSend+0x42>
 800551e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005522:	2b00      	cmp	r3, #0
 8005524:	d101      	bne.n	800552a <xQueueGenericSend+0x46>
 8005526:	2301      	movs	r3, #1
 8005528:	e000      	b.n	800552c <xQueueGenericSend+0x48>
 800552a:	2300      	movs	r3, #0
 800552c:	2b00      	cmp	r3, #0
 800552e:	d10b      	bne.n	8005548 <xQueueGenericSend+0x64>
	__asm volatile
 8005530:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005534:	f383 8811 	msr	BASEPRI, r3
 8005538:	f3bf 8f6f 	isb	sy
 800553c:	f3bf 8f4f 	dsb	sy
 8005540:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005542:	bf00      	nop
 8005544:	bf00      	nop
 8005546:	e7fd      	b.n	8005544 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	2b02      	cmp	r3, #2
 800554c:	d103      	bne.n	8005556 <xQueueGenericSend+0x72>
 800554e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005550:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005552:	2b01      	cmp	r3, #1
 8005554:	d101      	bne.n	800555a <xQueueGenericSend+0x76>
 8005556:	2301      	movs	r3, #1
 8005558:	e000      	b.n	800555c <xQueueGenericSend+0x78>
 800555a:	2300      	movs	r3, #0
 800555c:	2b00      	cmp	r3, #0
 800555e:	d10b      	bne.n	8005578 <xQueueGenericSend+0x94>
	__asm volatile
 8005560:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005564:	f383 8811 	msr	BASEPRI, r3
 8005568:	f3bf 8f6f 	isb	sy
 800556c:	f3bf 8f4f 	dsb	sy
 8005570:	623b      	str	r3, [r7, #32]
}
 8005572:	bf00      	nop
 8005574:	bf00      	nop
 8005576:	e7fd      	b.n	8005574 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005578:	f001 f9fc 	bl	8006974 <xTaskGetSchedulerState>
 800557c:	4603      	mov	r3, r0
 800557e:	2b00      	cmp	r3, #0
 8005580:	d102      	bne.n	8005588 <xQueueGenericSend+0xa4>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d101      	bne.n	800558c <xQueueGenericSend+0xa8>
 8005588:	2301      	movs	r3, #1
 800558a:	e000      	b.n	800558e <xQueueGenericSend+0xaa>
 800558c:	2300      	movs	r3, #0
 800558e:	2b00      	cmp	r3, #0
 8005590:	d10b      	bne.n	80055aa <xQueueGenericSend+0xc6>
	__asm volatile
 8005592:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005596:	f383 8811 	msr	BASEPRI, r3
 800559a:	f3bf 8f6f 	isb	sy
 800559e:	f3bf 8f4f 	dsb	sy
 80055a2:	61fb      	str	r3, [r7, #28]
}
 80055a4:	bf00      	nop
 80055a6:	bf00      	nop
 80055a8:	e7fd      	b.n	80055a6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80055aa:	f001 ff4d 	bl	8007448 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80055ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80055b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055b6:	429a      	cmp	r2, r3
 80055b8:	d302      	bcc.n	80055c0 <xQueueGenericSend+0xdc>
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	2b02      	cmp	r3, #2
 80055be:	d129      	bne.n	8005614 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80055c0:	683a      	ldr	r2, [r7, #0]
 80055c2:	68b9      	ldr	r1, [r7, #8]
 80055c4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80055c6:	f000 fa0f 	bl	80059e8 <prvCopyDataToQueue>
 80055ca:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80055cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d010      	beq.n	80055f6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80055d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055d6:	3324      	adds	r3, #36	@ 0x24
 80055d8:	4618      	mov	r0, r3
 80055da:	f001 f805 	bl	80065e8 <xTaskRemoveFromEventList>
 80055de:	4603      	mov	r3, r0
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d013      	beq.n	800560c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80055e4:	4b3f      	ldr	r3, [pc, #252]	@ (80056e4 <xQueueGenericSend+0x200>)
 80055e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80055ea:	601a      	str	r2, [r3, #0]
 80055ec:	f3bf 8f4f 	dsb	sy
 80055f0:	f3bf 8f6f 	isb	sy
 80055f4:	e00a      	b.n	800560c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80055f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d007      	beq.n	800560c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80055fc:	4b39      	ldr	r3, [pc, #228]	@ (80056e4 <xQueueGenericSend+0x200>)
 80055fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005602:	601a      	str	r2, [r3, #0]
 8005604:	f3bf 8f4f 	dsb	sy
 8005608:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800560c:	f001 ff4e 	bl	80074ac <vPortExitCritical>
				return pdPASS;
 8005610:	2301      	movs	r3, #1
 8005612:	e063      	b.n	80056dc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d103      	bne.n	8005622 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800561a:	f001 ff47 	bl	80074ac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800561e:	2300      	movs	r3, #0
 8005620:	e05c      	b.n	80056dc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005622:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005624:	2b00      	cmp	r3, #0
 8005626:	d106      	bne.n	8005636 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005628:	f107 0314 	add.w	r3, r7, #20
 800562c:	4618      	mov	r0, r3
 800562e:	f001 f83f 	bl	80066b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005632:	2301      	movs	r3, #1
 8005634:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005636:	f001 ff39 	bl	80074ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800563a:	f000 fda7 	bl	800618c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800563e:	f001 ff03 	bl	8007448 <vPortEnterCritical>
 8005642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005644:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005648:	b25b      	sxtb	r3, r3
 800564a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800564e:	d103      	bne.n	8005658 <xQueueGenericSend+0x174>
 8005650:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005652:	2200      	movs	r2, #0
 8005654:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005658:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800565a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800565e:	b25b      	sxtb	r3, r3
 8005660:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005664:	d103      	bne.n	800566e <xQueueGenericSend+0x18a>
 8005666:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005668:	2200      	movs	r2, #0
 800566a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800566e:	f001 ff1d 	bl	80074ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005672:	1d3a      	adds	r2, r7, #4
 8005674:	f107 0314 	add.w	r3, r7, #20
 8005678:	4611      	mov	r1, r2
 800567a:	4618      	mov	r0, r3
 800567c:	f001 f82e 	bl	80066dc <xTaskCheckForTimeOut>
 8005680:	4603      	mov	r3, r0
 8005682:	2b00      	cmp	r3, #0
 8005684:	d124      	bne.n	80056d0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005686:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005688:	f000 faa6 	bl	8005bd8 <prvIsQueueFull>
 800568c:	4603      	mov	r3, r0
 800568e:	2b00      	cmp	r3, #0
 8005690:	d018      	beq.n	80056c4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005694:	3310      	adds	r3, #16
 8005696:	687a      	ldr	r2, [r7, #4]
 8005698:	4611      	mov	r1, r2
 800569a:	4618      	mov	r0, r3
 800569c:	f000 ff52 	bl	8006544 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80056a0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80056a2:	f000 fa31 	bl	8005b08 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80056a6:	f000 fd7f 	bl	80061a8 <xTaskResumeAll>
 80056aa:	4603      	mov	r3, r0
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	f47f af7c 	bne.w	80055aa <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80056b2:	4b0c      	ldr	r3, [pc, #48]	@ (80056e4 <xQueueGenericSend+0x200>)
 80056b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80056b8:	601a      	str	r2, [r3, #0]
 80056ba:	f3bf 8f4f 	dsb	sy
 80056be:	f3bf 8f6f 	isb	sy
 80056c2:	e772      	b.n	80055aa <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80056c4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80056c6:	f000 fa1f 	bl	8005b08 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80056ca:	f000 fd6d 	bl	80061a8 <xTaskResumeAll>
 80056ce:	e76c      	b.n	80055aa <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80056d0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80056d2:	f000 fa19 	bl	8005b08 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80056d6:	f000 fd67 	bl	80061a8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80056da:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80056dc:	4618      	mov	r0, r3
 80056de:	3738      	adds	r7, #56	@ 0x38
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bd80      	pop	{r7, pc}
 80056e4:	e000ed04 	.word	0xe000ed04

080056e8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b090      	sub	sp, #64	@ 0x40
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	60f8      	str	r0, [r7, #12]
 80056f0:	60b9      	str	r1, [r7, #8]
 80056f2:	607a      	str	r2, [r7, #4]
 80056f4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80056fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d10b      	bne.n	8005718 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8005700:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005704:	f383 8811 	msr	BASEPRI, r3
 8005708:	f3bf 8f6f 	isb	sy
 800570c:	f3bf 8f4f 	dsb	sy
 8005710:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005712:	bf00      	nop
 8005714:	bf00      	nop
 8005716:	e7fd      	b.n	8005714 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d103      	bne.n	8005726 <xQueueGenericSendFromISR+0x3e>
 800571e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005722:	2b00      	cmp	r3, #0
 8005724:	d101      	bne.n	800572a <xQueueGenericSendFromISR+0x42>
 8005726:	2301      	movs	r3, #1
 8005728:	e000      	b.n	800572c <xQueueGenericSendFromISR+0x44>
 800572a:	2300      	movs	r3, #0
 800572c:	2b00      	cmp	r3, #0
 800572e:	d10b      	bne.n	8005748 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8005730:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005734:	f383 8811 	msr	BASEPRI, r3
 8005738:	f3bf 8f6f 	isb	sy
 800573c:	f3bf 8f4f 	dsb	sy
 8005740:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005742:	bf00      	nop
 8005744:	bf00      	nop
 8005746:	e7fd      	b.n	8005744 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	2b02      	cmp	r3, #2
 800574c:	d103      	bne.n	8005756 <xQueueGenericSendFromISR+0x6e>
 800574e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005750:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005752:	2b01      	cmp	r3, #1
 8005754:	d101      	bne.n	800575a <xQueueGenericSendFromISR+0x72>
 8005756:	2301      	movs	r3, #1
 8005758:	e000      	b.n	800575c <xQueueGenericSendFromISR+0x74>
 800575a:	2300      	movs	r3, #0
 800575c:	2b00      	cmp	r3, #0
 800575e:	d10b      	bne.n	8005778 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8005760:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005764:	f383 8811 	msr	BASEPRI, r3
 8005768:	f3bf 8f6f 	isb	sy
 800576c:	f3bf 8f4f 	dsb	sy
 8005770:	623b      	str	r3, [r7, #32]
}
 8005772:	bf00      	nop
 8005774:	bf00      	nop
 8005776:	e7fd      	b.n	8005774 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005778:	f001 ff46 	bl	8007608 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800577c:	f3ef 8211 	mrs	r2, BASEPRI
 8005780:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005784:	f383 8811 	msr	BASEPRI, r3
 8005788:	f3bf 8f6f 	isb	sy
 800578c:	f3bf 8f4f 	dsb	sy
 8005790:	61fa      	str	r2, [r7, #28]
 8005792:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005794:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005796:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005798:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800579a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800579c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800579e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057a0:	429a      	cmp	r2, r3
 80057a2:	d302      	bcc.n	80057aa <xQueueGenericSendFromISR+0xc2>
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	2b02      	cmp	r3, #2
 80057a8:	d12f      	bne.n	800580a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80057aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057ac:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80057b0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80057b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80057ba:	683a      	ldr	r2, [r7, #0]
 80057bc:	68b9      	ldr	r1, [r7, #8]
 80057be:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80057c0:	f000 f912 	bl	80059e8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80057c4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80057c8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80057cc:	d112      	bne.n	80057f4 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80057ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d016      	beq.n	8005804 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80057d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057d8:	3324      	adds	r3, #36	@ 0x24
 80057da:	4618      	mov	r0, r3
 80057dc:	f000 ff04 	bl	80065e8 <xTaskRemoveFromEventList>
 80057e0:	4603      	mov	r3, r0
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d00e      	beq.n	8005804 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d00b      	beq.n	8005804 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2201      	movs	r2, #1
 80057f0:	601a      	str	r2, [r3, #0]
 80057f2:	e007      	b.n	8005804 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80057f4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80057f8:	3301      	adds	r3, #1
 80057fa:	b2db      	uxtb	r3, r3
 80057fc:	b25a      	sxtb	r2, r3
 80057fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005800:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005804:	2301      	movs	r3, #1
 8005806:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8005808:	e001      	b.n	800580e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800580a:	2300      	movs	r3, #0
 800580c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800580e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005810:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005818:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800581a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800581c:	4618      	mov	r0, r3
 800581e:	3740      	adds	r7, #64	@ 0x40
 8005820:	46bd      	mov	sp, r7
 8005822:	bd80      	pop	{r7, pc}

08005824 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b08c      	sub	sp, #48	@ 0x30
 8005828:	af00      	add	r7, sp, #0
 800582a:	60f8      	str	r0, [r7, #12]
 800582c:	60b9      	str	r1, [r7, #8]
 800582e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005830:	2300      	movs	r3, #0
 8005832:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005838:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800583a:	2b00      	cmp	r3, #0
 800583c:	d10b      	bne.n	8005856 <xQueueReceive+0x32>
	__asm volatile
 800583e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005842:	f383 8811 	msr	BASEPRI, r3
 8005846:	f3bf 8f6f 	isb	sy
 800584a:	f3bf 8f4f 	dsb	sy
 800584e:	623b      	str	r3, [r7, #32]
}
 8005850:	bf00      	nop
 8005852:	bf00      	nop
 8005854:	e7fd      	b.n	8005852 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d103      	bne.n	8005864 <xQueueReceive+0x40>
 800585c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800585e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005860:	2b00      	cmp	r3, #0
 8005862:	d101      	bne.n	8005868 <xQueueReceive+0x44>
 8005864:	2301      	movs	r3, #1
 8005866:	e000      	b.n	800586a <xQueueReceive+0x46>
 8005868:	2300      	movs	r3, #0
 800586a:	2b00      	cmp	r3, #0
 800586c:	d10b      	bne.n	8005886 <xQueueReceive+0x62>
	__asm volatile
 800586e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005872:	f383 8811 	msr	BASEPRI, r3
 8005876:	f3bf 8f6f 	isb	sy
 800587a:	f3bf 8f4f 	dsb	sy
 800587e:	61fb      	str	r3, [r7, #28]
}
 8005880:	bf00      	nop
 8005882:	bf00      	nop
 8005884:	e7fd      	b.n	8005882 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005886:	f001 f875 	bl	8006974 <xTaskGetSchedulerState>
 800588a:	4603      	mov	r3, r0
 800588c:	2b00      	cmp	r3, #0
 800588e:	d102      	bne.n	8005896 <xQueueReceive+0x72>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d101      	bne.n	800589a <xQueueReceive+0x76>
 8005896:	2301      	movs	r3, #1
 8005898:	e000      	b.n	800589c <xQueueReceive+0x78>
 800589a:	2300      	movs	r3, #0
 800589c:	2b00      	cmp	r3, #0
 800589e:	d10b      	bne.n	80058b8 <xQueueReceive+0x94>
	__asm volatile
 80058a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058a4:	f383 8811 	msr	BASEPRI, r3
 80058a8:	f3bf 8f6f 	isb	sy
 80058ac:	f3bf 8f4f 	dsb	sy
 80058b0:	61bb      	str	r3, [r7, #24]
}
 80058b2:	bf00      	nop
 80058b4:	bf00      	nop
 80058b6:	e7fd      	b.n	80058b4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80058b8:	f001 fdc6 	bl	8007448 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80058bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058c0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80058c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d01f      	beq.n	8005908 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80058c8:	68b9      	ldr	r1, [r7, #8]
 80058ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80058cc:	f000 f8f6 	bl	8005abc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80058d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058d2:	1e5a      	subs	r2, r3, #1
 80058d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058d6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80058d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058da:	691b      	ldr	r3, [r3, #16]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d00f      	beq.n	8005900 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80058e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058e2:	3310      	adds	r3, #16
 80058e4:	4618      	mov	r0, r3
 80058e6:	f000 fe7f 	bl	80065e8 <xTaskRemoveFromEventList>
 80058ea:	4603      	mov	r3, r0
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d007      	beq.n	8005900 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80058f0:	4b3c      	ldr	r3, [pc, #240]	@ (80059e4 <xQueueReceive+0x1c0>)
 80058f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80058f6:	601a      	str	r2, [r3, #0]
 80058f8:	f3bf 8f4f 	dsb	sy
 80058fc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005900:	f001 fdd4 	bl	80074ac <vPortExitCritical>
				return pdPASS;
 8005904:	2301      	movs	r3, #1
 8005906:	e069      	b.n	80059dc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d103      	bne.n	8005916 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800590e:	f001 fdcd 	bl	80074ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005912:	2300      	movs	r3, #0
 8005914:	e062      	b.n	80059dc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005916:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005918:	2b00      	cmp	r3, #0
 800591a:	d106      	bne.n	800592a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800591c:	f107 0310 	add.w	r3, r7, #16
 8005920:	4618      	mov	r0, r3
 8005922:	f000 fec5 	bl	80066b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005926:	2301      	movs	r3, #1
 8005928:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800592a:	f001 fdbf 	bl	80074ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800592e:	f000 fc2d 	bl	800618c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005932:	f001 fd89 	bl	8007448 <vPortEnterCritical>
 8005936:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005938:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800593c:	b25b      	sxtb	r3, r3
 800593e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005942:	d103      	bne.n	800594c <xQueueReceive+0x128>
 8005944:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005946:	2200      	movs	r2, #0
 8005948:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800594c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800594e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005952:	b25b      	sxtb	r3, r3
 8005954:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005958:	d103      	bne.n	8005962 <xQueueReceive+0x13e>
 800595a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800595c:	2200      	movs	r2, #0
 800595e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005962:	f001 fda3 	bl	80074ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005966:	1d3a      	adds	r2, r7, #4
 8005968:	f107 0310 	add.w	r3, r7, #16
 800596c:	4611      	mov	r1, r2
 800596e:	4618      	mov	r0, r3
 8005970:	f000 feb4 	bl	80066dc <xTaskCheckForTimeOut>
 8005974:	4603      	mov	r3, r0
 8005976:	2b00      	cmp	r3, #0
 8005978:	d123      	bne.n	80059c2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800597a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800597c:	f000 f916 	bl	8005bac <prvIsQueueEmpty>
 8005980:	4603      	mov	r3, r0
 8005982:	2b00      	cmp	r3, #0
 8005984:	d017      	beq.n	80059b6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005986:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005988:	3324      	adds	r3, #36	@ 0x24
 800598a:	687a      	ldr	r2, [r7, #4]
 800598c:	4611      	mov	r1, r2
 800598e:	4618      	mov	r0, r3
 8005990:	f000 fdd8 	bl	8006544 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005994:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005996:	f000 f8b7 	bl	8005b08 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800599a:	f000 fc05 	bl	80061a8 <xTaskResumeAll>
 800599e:	4603      	mov	r3, r0
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d189      	bne.n	80058b8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80059a4:	4b0f      	ldr	r3, [pc, #60]	@ (80059e4 <xQueueReceive+0x1c0>)
 80059a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80059aa:	601a      	str	r2, [r3, #0]
 80059ac:	f3bf 8f4f 	dsb	sy
 80059b0:	f3bf 8f6f 	isb	sy
 80059b4:	e780      	b.n	80058b8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80059b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80059b8:	f000 f8a6 	bl	8005b08 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80059bc:	f000 fbf4 	bl	80061a8 <xTaskResumeAll>
 80059c0:	e77a      	b.n	80058b8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80059c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80059c4:	f000 f8a0 	bl	8005b08 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80059c8:	f000 fbee 	bl	80061a8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80059cc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80059ce:	f000 f8ed 	bl	8005bac <prvIsQueueEmpty>
 80059d2:	4603      	mov	r3, r0
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	f43f af6f 	beq.w	80058b8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80059da:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80059dc:	4618      	mov	r0, r3
 80059de:	3730      	adds	r7, #48	@ 0x30
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bd80      	pop	{r7, pc}
 80059e4:	e000ed04 	.word	0xe000ed04

080059e8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b086      	sub	sp, #24
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	60f8      	str	r0, [r7, #12]
 80059f0:	60b9      	str	r1, [r7, #8]
 80059f2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80059f4:	2300      	movs	r3, #0
 80059f6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059fc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d10d      	bne.n	8005a22 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d14d      	bne.n	8005aaa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	689b      	ldr	r3, [r3, #8]
 8005a12:	4618      	mov	r0, r3
 8005a14:	f000 ffcc 	bl	80069b0 <xTaskPriorityDisinherit>
 8005a18:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	609a      	str	r2, [r3, #8]
 8005a20:	e043      	b.n	8005aaa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d119      	bne.n	8005a5c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	6858      	ldr	r0, [r3, #4]
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a30:	461a      	mov	r2, r3
 8005a32:	68b9      	ldr	r1, [r7, #8]
 8005a34:	f002 f89c 	bl	8007b70 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	685a      	ldr	r2, [r3, #4]
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a40:	441a      	add	r2, r3
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	685a      	ldr	r2, [r3, #4]
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	689b      	ldr	r3, [r3, #8]
 8005a4e:	429a      	cmp	r2, r3
 8005a50:	d32b      	bcc.n	8005aaa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681a      	ldr	r2, [r3, #0]
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	605a      	str	r2, [r3, #4]
 8005a5a:	e026      	b.n	8005aaa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	68d8      	ldr	r0, [r3, #12]
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a64:	461a      	mov	r2, r3
 8005a66:	68b9      	ldr	r1, [r7, #8]
 8005a68:	f002 f882 	bl	8007b70 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	68da      	ldr	r2, [r3, #12]
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a74:	425b      	negs	r3, r3
 8005a76:	441a      	add	r2, r3
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	68da      	ldr	r2, [r3, #12]
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	429a      	cmp	r2, r3
 8005a86:	d207      	bcs.n	8005a98 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	689a      	ldr	r2, [r3, #8]
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a90:	425b      	negs	r3, r3
 8005a92:	441a      	add	r2, r3
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2b02      	cmp	r3, #2
 8005a9c:	d105      	bne.n	8005aaa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005a9e:	693b      	ldr	r3, [r7, #16]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d002      	beq.n	8005aaa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005aa4:	693b      	ldr	r3, [r7, #16]
 8005aa6:	3b01      	subs	r3, #1
 8005aa8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005aaa:	693b      	ldr	r3, [r7, #16]
 8005aac:	1c5a      	adds	r2, r3, #1
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005ab2:	697b      	ldr	r3, [r7, #20]
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	3718      	adds	r7, #24
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}

08005abc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b082      	sub	sp, #8
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
 8005ac4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d018      	beq.n	8005b00 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	68da      	ldr	r2, [r3, #12]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ad6:	441a      	add	r2, r3
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	68da      	ldr	r2, [r3, #12]
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	689b      	ldr	r3, [r3, #8]
 8005ae4:	429a      	cmp	r2, r3
 8005ae6:	d303      	bcc.n	8005af0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681a      	ldr	r2, [r3, #0]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	68d9      	ldr	r1, [r3, #12]
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005af8:	461a      	mov	r2, r3
 8005afa:	6838      	ldr	r0, [r7, #0]
 8005afc:	f002 f838 	bl	8007b70 <memcpy>
	}
}
 8005b00:	bf00      	nop
 8005b02:	3708      	adds	r7, #8
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bd80      	pop	{r7, pc}

08005b08 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b084      	sub	sp, #16
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005b10:	f001 fc9a 	bl	8007448 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005b1a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005b1c:	e011      	b.n	8005b42 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d012      	beq.n	8005b4c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	3324      	adds	r3, #36	@ 0x24
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	f000 fd5c 	bl	80065e8 <xTaskRemoveFromEventList>
 8005b30:	4603      	mov	r3, r0
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d001      	beq.n	8005b3a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005b36:	f000 fe35 	bl	80067a4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005b3a:	7bfb      	ldrb	r3, [r7, #15]
 8005b3c:	3b01      	subs	r3, #1
 8005b3e:	b2db      	uxtb	r3, r3
 8005b40:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005b42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	dce9      	bgt.n	8005b1e <prvUnlockQueue+0x16>
 8005b4a:	e000      	b.n	8005b4e <prvUnlockQueue+0x46>
					break;
 8005b4c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	22ff      	movs	r2, #255	@ 0xff
 8005b52:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005b56:	f001 fca9 	bl	80074ac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005b5a:	f001 fc75 	bl	8007448 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005b64:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005b66:	e011      	b.n	8005b8c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	691b      	ldr	r3, [r3, #16]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d012      	beq.n	8005b96 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	3310      	adds	r3, #16
 8005b74:	4618      	mov	r0, r3
 8005b76:	f000 fd37 	bl	80065e8 <xTaskRemoveFromEventList>
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d001      	beq.n	8005b84 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005b80:	f000 fe10 	bl	80067a4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005b84:	7bbb      	ldrb	r3, [r7, #14]
 8005b86:	3b01      	subs	r3, #1
 8005b88:	b2db      	uxtb	r3, r3
 8005b8a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005b8c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	dce9      	bgt.n	8005b68 <prvUnlockQueue+0x60>
 8005b94:	e000      	b.n	8005b98 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005b96:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	22ff      	movs	r2, #255	@ 0xff
 8005b9c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005ba0:	f001 fc84 	bl	80074ac <vPortExitCritical>
}
 8005ba4:	bf00      	nop
 8005ba6:	3710      	adds	r7, #16
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	bd80      	pop	{r7, pc}

08005bac <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b084      	sub	sp, #16
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005bb4:	f001 fc48 	bl	8007448 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d102      	bne.n	8005bc6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	60fb      	str	r3, [r7, #12]
 8005bc4:	e001      	b.n	8005bca <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005bca:	f001 fc6f 	bl	80074ac <vPortExitCritical>

	return xReturn;
 8005bce:	68fb      	ldr	r3, [r7, #12]
}
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	3710      	adds	r7, #16
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bd80      	pop	{r7, pc}

08005bd8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b084      	sub	sp, #16
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005be0:	f001 fc32 	bl	8007448 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bec:	429a      	cmp	r2, r3
 8005bee:	d102      	bne.n	8005bf6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	60fb      	str	r3, [r7, #12]
 8005bf4:	e001      	b.n	8005bfa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005bfa:	f001 fc57 	bl	80074ac <vPortExitCritical>

	return xReturn;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
}
 8005c00:	4618      	mov	r0, r3
 8005c02:	3710      	adds	r7, #16
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bd80      	pop	{r7, pc}

08005c08 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005c08:	b480      	push	{r7}
 8005c0a:	b085      	sub	sp, #20
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
 8005c10:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005c12:	2300      	movs	r3, #0
 8005c14:	60fb      	str	r3, [r7, #12]
 8005c16:	e014      	b.n	8005c42 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005c18:	4a0f      	ldr	r2, [pc, #60]	@ (8005c58 <vQueueAddToRegistry+0x50>)
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d10b      	bne.n	8005c3c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005c24:	490c      	ldr	r1, [pc, #48]	@ (8005c58 <vQueueAddToRegistry+0x50>)
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	683a      	ldr	r2, [r7, #0]
 8005c2a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005c2e:	4a0a      	ldr	r2, [pc, #40]	@ (8005c58 <vQueueAddToRegistry+0x50>)
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	00db      	lsls	r3, r3, #3
 8005c34:	4413      	add	r3, r2
 8005c36:	687a      	ldr	r2, [r7, #4]
 8005c38:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005c3a:	e006      	b.n	8005c4a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	3301      	adds	r3, #1
 8005c40:	60fb      	str	r3, [r7, #12]
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	2b07      	cmp	r3, #7
 8005c46:	d9e7      	bls.n	8005c18 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005c48:	bf00      	nop
 8005c4a:	bf00      	nop
 8005c4c:	3714      	adds	r7, #20
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c54:	4770      	bx	lr
 8005c56:	bf00      	nop
 8005c58:	200009c0 	.word	0x200009c0

08005c5c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b086      	sub	sp, #24
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	60f8      	str	r0, [r7, #12]
 8005c64:	60b9      	str	r1, [r7, #8]
 8005c66:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005c6c:	f001 fbec 	bl	8007448 <vPortEnterCritical>
 8005c70:	697b      	ldr	r3, [r7, #20]
 8005c72:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005c76:	b25b      	sxtb	r3, r3
 8005c78:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005c7c:	d103      	bne.n	8005c86 <vQueueWaitForMessageRestricted+0x2a>
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	2200      	movs	r2, #0
 8005c82:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005c86:	697b      	ldr	r3, [r7, #20]
 8005c88:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005c8c:	b25b      	sxtb	r3, r3
 8005c8e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005c92:	d103      	bne.n	8005c9c <vQueueWaitForMessageRestricted+0x40>
 8005c94:	697b      	ldr	r3, [r7, #20]
 8005c96:	2200      	movs	r2, #0
 8005c98:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005c9c:	f001 fc06 	bl	80074ac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d106      	bne.n	8005cb6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	3324      	adds	r3, #36	@ 0x24
 8005cac:	687a      	ldr	r2, [r7, #4]
 8005cae:	68b9      	ldr	r1, [r7, #8]
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	f000 fc6d 	bl	8006590 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005cb6:	6978      	ldr	r0, [r7, #20]
 8005cb8:	f7ff ff26 	bl	8005b08 <prvUnlockQueue>
	}
 8005cbc:	bf00      	nop
 8005cbe:	3718      	adds	r7, #24
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bd80      	pop	{r7, pc}

08005cc4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b08e      	sub	sp, #56	@ 0x38
 8005cc8:	af04      	add	r7, sp, #16
 8005cca:	60f8      	str	r0, [r7, #12]
 8005ccc:	60b9      	str	r1, [r7, #8]
 8005cce:	607a      	str	r2, [r7, #4]
 8005cd0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005cd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d10b      	bne.n	8005cf0 <xTaskCreateStatic+0x2c>
	__asm volatile
 8005cd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cdc:	f383 8811 	msr	BASEPRI, r3
 8005ce0:	f3bf 8f6f 	isb	sy
 8005ce4:	f3bf 8f4f 	dsb	sy
 8005ce8:	623b      	str	r3, [r7, #32]
}
 8005cea:	bf00      	nop
 8005cec:	bf00      	nop
 8005cee:	e7fd      	b.n	8005cec <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005cf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d10b      	bne.n	8005d0e <xTaskCreateStatic+0x4a>
	__asm volatile
 8005cf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cfa:	f383 8811 	msr	BASEPRI, r3
 8005cfe:	f3bf 8f6f 	isb	sy
 8005d02:	f3bf 8f4f 	dsb	sy
 8005d06:	61fb      	str	r3, [r7, #28]
}
 8005d08:	bf00      	nop
 8005d0a:	bf00      	nop
 8005d0c:	e7fd      	b.n	8005d0a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005d0e:	23a8      	movs	r3, #168	@ 0xa8
 8005d10:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	2ba8      	cmp	r3, #168	@ 0xa8
 8005d16:	d00b      	beq.n	8005d30 <xTaskCreateStatic+0x6c>
	__asm volatile
 8005d18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d1c:	f383 8811 	msr	BASEPRI, r3
 8005d20:	f3bf 8f6f 	isb	sy
 8005d24:	f3bf 8f4f 	dsb	sy
 8005d28:	61bb      	str	r3, [r7, #24]
}
 8005d2a:	bf00      	nop
 8005d2c:	bf00      	nop
 8005d2e:	e7fd      	b.n	8005d2c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005d30:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005d32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d01e      	beq.n	8005d76 <xTaskCreateStatic+0xb2>
 8005d38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d01b      	beq.n	8005d76 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005d3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d40:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d44:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005d46:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d4a:	2202      	movs	r2, #2
 8005d4c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005d50:	2300      	movs	r3, #0
 8005d52:	9303      	str	r3, [sp, #12]
 8005d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d56:	9302      	str	r3, [sp, #8]
 8005d58:	f107 0314 	add.w	r3, r7, #20
 8005d5c:	9301      	str	r3, [sp, #4]
 8005d5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d60:	9300      	str	r3, [sp, #0]
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	687a      	ldr	r2, [r7, #4]
 8005d66:	68b9      	ldr	r1, [r7, #8]
 8005d68:	68f8      	ldr	r0, [r7, #12]
 8005d6a:	f000 f851 	bl	8005e10 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005d6e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005d70:	f000 f8f6 	bl	8005f60 <prvAddNewTaskToReadyList>
 8005d74:	e001      	b.n	8005d7a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005d76:	2300      	movs	r3, #0
 8005d78:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005d7a:	697b      	ldr	r3, [r7, #20]
	}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	3728      	adds	r7, #40	@ 0x28
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bd80      	pop	{r7, pc}

08005d84 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b08c      	sub	sp, #48	@ 0x30
 8005d88:	af04      	add	r7, sp, #16
 8005d8a:	60f8      	str	r0, [r7, #12]
 8005d8c:	60b9      	str	r1, [r7, #8]
 8005d8e:	603b      	str	r3, [r7, #0]
 8005d90:	4613      	mov	r3, r2
 8005d92:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005d94:	88fb      	ldrh	r3, [r7, #6]
 8005d96:	009b      	lsls	r3, r3, #2
 8005d98:	4618      	mov	r0, r3
 8005d9a:	f001 fc77 	bl	800768c <pvPortMalloc>
 8005d9e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d00e      	beq.n	8005dc4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005da6:	20a8      	movs	r0, #168	@ 0xa8
 8005da8:	f001 fc70 	bl	800768c <pvPortMalloc>
 8005dac:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005dae:	69fb      	ldr	r3, [r7, #28]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d003      	beq.n	8005dbc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005db4:	69fb      	ldr	r3, [r7, #28]
 8005db6:	697a      	ldr	r2, [r7, #20]
 8005db8:	631a      	str	r2, [r3, #48]	@ 0x30
 8005dba:	e005      	b.n	8005dc8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005dbc:	6978      	ldr	r0, [r7, #20]
 8005dbe:	f001 fd33 	bl	8007828 <vPortFree>
 8005dc2:	e001      	b.n	8005dc8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005dc8:	69fb      	ldr	r3, [r7, #28]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d017      	beq.n	8005dfe <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005dce:	69fb      	ldr	r3, [r7, #28]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005dd6:	88fa      	ldrh	r2, [r7, #6]
 8005dd8:	2300      	movs	r3, #0
 8005dda:	9303      	str	r3, [sp, #12]
 8005ddc:	69fb      	ldr	r3, [r7, #28]
 8005dde:	9302      	str	r3, [sp, #8]
 8005de0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005de2:	9301      	str	r3, [sp, #4]
 8005de4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005de6:	9300      	str	r3, [sp, #0]
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	68b9      	ldr	r1, [r7, #8]
 8005dec:	68f8      	ldr	r0, [r7, #12]
 8005dee:	f000 f80f 	bl	8005e10 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005df2:	69f8      	ldr	r0, [r7, #28]
 8005df4:	f000 f8b4 	bl	8005f60 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005df8:	2301      	movs	r3, #1
 8005dfa:	61bb      	str	r3, [r7, #24]
 8005dfc:	e002      	b.n	8005e04 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005dfe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005e02:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005e04:	69bb      	ldr	r3, [r7, #24]
	}
 8005e06:	4618      	mov	r0, r3
 8005e08:	3720      	adds	r7, #32
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd80      	pop	{r7, pc}
	...

08005e10 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b088      	sub	sp, #32
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	60f8      	str	r0, [r7, #12]
 8005e18:	60b9      	str	r1, [r7, #8]
 8005e1a:	607a      	str	r2, [r7, #4]
 8005e1c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005e1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e20:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	009b      	lsls	r3, r3, #2
 8005e26:	461a      	mov	r2, r3
 8005e28:	21a5      	movs	r1, #165	@ 0xa5
 8005e2a:	f001 fe1d 	bl	8007a68 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005e2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e30:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005e38:	3b01      	subs	r3, #1
 8005e3a:	009b      	lsls	r3, r3, #2
 8005e3c:	4413      	add	r3, r2
 8005e3e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005e40:	69bb      	ldr	r3, [r7, #24]
 8005e42:	f023 0307 	bic.w	r3, r3, #7
 8005e46:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005e48:	69bb      	ldr	r3, [r7, #24]
 8005e4a:	f003 0307 	and.w	r3, r3, #7
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d00b      	beq.n	8005e6a <prvInitialiseNewTask+0x5a>
	__asm volatile
 8005e52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e56:	f383 8811 	msr	BASEPRI, r3
 8005e5a:	f3bf 8f6f 	isb	sy
 8005e5e:	f3bf 8f4f 	dsb	sy
 8005e62:	617b      	str	r3, [r7, #20]
}
 8005e64:	bf00      	nop
 8005e66:	bf00      	nop
 8005e68:	e7fd      	b.n	8005e66 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d01f      	beq.n	8005eb0 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005e70:	2300      	movs	r3, #0
 8005e72:	61fb      	str	r3, [r7, #28]
 8005e74:	e012      	b.n	8005e9c <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005e76:	68ba      	ldr	r2, [r7, #8]
 8005e78:	69fb      	ldr	r3, [r7, #28]
 8005e7a:	4413      	add	r3, r2
 8005e7c:	7819      	ldrb	r1, [r3, #0]
 8005e7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e80:	69fb      	ldr	r3, [r7, #28]
 8005e82:	4413      	add	r3, r2
 8005e84:	3334      	adds	r3, #52	@ 0x34
 8005e86:	460a      	mov	r2, r1
 8005e88:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005e8a:	68ba      	ldr	r2, [r7, #8]
 8005e8c:	69fb      	ldr	r3, [r7, #28]
 8005e8e:	4413      	add	r3, r2
 8005e90:	781b      	ldrb	r3, [r3, #0]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d006      	beq.n	8005ea4 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005e96:	69fb      	ldr	r3, [r7, #28]
 8005e98:	3301      	adds	r3, #1
 8005e9a:	61fb      	str	r3, [r7, #28]
 8005e9c:	69fb      	ldr	r3, [r7, #28]
 8005e9e:	2b0f      	cmp	r3, #15
 8005ea0:	d9e9      	bls.n	8005e76 <prvInitialiseNewTask+0x66>
 8005ea2:	e000      	b.n	8005ea6 <prvInitialiseNewTask+0x96>
			{
				break;
 8005ea4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005ea6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005eae:	e003      	b.n	8005eb8 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005eb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005eb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005eba:	2b37      	cmp	r3, #55	@ 0x37
 8005ebc:	d901      	bls.n	8005ec2 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005ebe:	2337      	movs	r3, #55	@ 0x37
 8005ec0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005ec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ec4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005ec6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005ec8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005ecc:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005ece:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005ed4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ed6:	3304      	adds	r3, #4
 8005ed8:	4618      	mov	r0, r3
 8005eda:	f7ff f965 	bl	80051a8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005ede:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ee0:	3318      	adds	r3, #24
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	f7ff f960 	bl	80051a8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005ee8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005eec:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005eee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ef0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005ef4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ef6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005ef8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005efa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005efc:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005efe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f00:	2200      	movs	r2, #0
 8005f02:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005f06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f08:	2200      	movs	r2, #0
 8005f0a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005f0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f10:	3354      	adds	r3, #84	@ 0x54
 8005f12:	224c      	movs	r2, #76	@ 0x4c
 8005f14:	2100      	movs	r1, #0
 8005f16:	4618      	mov	r0, r3
 8005f18:	f001 fda6 	bl	8007a68 <memset>
 8005f1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f1e:	4a0d      	ldr	r2, [pc, #52]	@ (8005f54 <prvInitialiseNewTask+0x144>)
 8005f20:	659a      	str	r2, [r3, #88]	@ 0x58
 8005f22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f24:	4a0c      	ldr	r2, [pc, #48]	@ (8005f58 <prvInitialiseNewTask+0x148>)
 8005f26:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005f28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f2a:	4a0c      	ldr	r2, [pc, #48]	@ (8005f5c <prvInitialiseNewTask+0x14c>)
 8005f2c:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005f2e:	683a      	ldr	r2, [r7, #0]
 8005f30:	68f9      	ldr	r1, [r7, #12]
 8005f32:	69b8      	ldr	r0, [r7, #24]
 8005f34:	f001 f95a 	bl	80071ec <pxPortInitialiseStack>
 8005f38:	4602      	mov	r2, r0
 8005f3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f3c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005f3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d002      	beq.n	8005f4a <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005f44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f48:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005f4a:	bf00      	nop
 8005f4c:	3720      	adds	r7, #32
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}
 8005f52:	bf00      	nop
 8005f54:	20004c54 	.word	0x20004c54
 8005f58:	20004cbc 	.word	0x20004cbc
 8005f5c:	20004d24 	.word	0x20004d24

08005f60 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b082      	sub	sp, #8
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005f68:	f001 fa6e 	bl	8007448 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005f6c:	4b2d      	ldr	r3, [pc, #180]	@ (8006024 <prvAddNewTaskToReadyList+0xc4>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	3301      	adds	r3, #1
 8005f72:	4a2c      	ldr	r2, [pc, #176]	@ (8006024 <prvAddNewTaskToReadyList+0xc4>)
 8005f74:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005f76:	4b2c      	ldr	r3, [pc, #176]	@ (8006028 <prvAddNewTaskToReadyList+0xc8>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d109      	bne.n	8005f92 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005f7e:	4a2a      	ldr	r2, [pc, #168]	@ (8006028 <prvAddNewTaskToReadyList+0xc8>)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005f84:	4b27      	ldr	r3, [pc, #156]	@ (8006024 <prvAddNewTaskToReadyList+0xc4>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	2b01      	cmp	r3, #1
 8005f8a:	d110      	bne.n	8005fae <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005f8c:	f000 fc2e 	bl	80067ec <prvInitialiseTaskLists>
 8005f90:	e00d      	b.n	8005fae <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005f92:	4b26      	ldr	r3, [pc, #152]	@ (800602c <prvAddNewTaskToReadyList+0xcc>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d109      	bne.n	8005fae <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005f9a:	4b23      	ldr	r3, [pc, #140]	@ (8006028 <prvAddNewTaskToReadyList+0xc8>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fa4:	429a      	cmp	r2, r3
 8005fa6:	d802      	bhi.n	8005fae <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005fa8:	4a1f      	ldr	r2, [pc, #124]	@ (8006028 <prvAddNewTaskToReadyList+0xc8>)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005fae:	4b20      	ldr	r3, [pc, #128]	@ (8006030 <prvAddNewTaskToReadyList+0xd0>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	3301      	adds	r3, #1
 8005fb4:	4a1e      	ldr	r2, [pc, #120]	@ (8006030 <prvAddNewTaskToReadyList+0xd0>)
 8005fb6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005fb8:	4b1d      	ldr	r3, [pc, #116]	@ (8006030 <prvAddNewTaskToReadyList+0xd0>)
 8005fba:	681a      	ldr	r2, [r3, #0]
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fc4:	4b1b      	ldr	r3, [pc, #108]	@ (8006034 <prvAddNewTaskToReadyList+0xd4>)
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	429a      	cmp	r2, r3
 8005fca:	d903      	bls.n	8005fd4 <prvAddNewTaskToReadyList+0x74>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fd0:	4a18      	ldr	r2, [pc, #96]	@ (8006034 <prvAddNewTaskToReadyList+0xd4>)
 8005fd2:	6013      	str	r3, [r2, #0]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fd8:	4613      	mov	r3, r2
 8005fda:	009b      	lsls	r3, r3, #2
 8005fdc:	4413      	add	r3, r2
 8005fde:	009b      	lsls	r3, r3, #2
 8005fe0:	4a15      	ldr	r2, [pc, #84]	@ (8006038 <prvAddNewTaskToReadyList+0xd8>)
 8005fe2:	441a      	add	r2, r3
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	3304      	adds	r3, #4
 8005fe8:	4619      	mov	r1, r3
 8005fea:	4610      	mov	r0, r2
 8005fec:	f7ff f8e9 	bl	80051c2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005ff0:	f001 fa5c 	bl	80074ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005ff4:	4b0d      	ldr	r3, [pc, #52]	@ (800602c <prvAddNewTaskToReadyList+0xcc>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d00e      	beq.n	800601a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005ffc:	4b0a      	ldr	r3, [pc, #40]	@ (8006028 <prvAddNewTaskToReadyList+0xc8>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006006:	429a      	cmp	r2, r3
 8006008:	d207      	bcs.n	800601a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800600a:	4b0c      	ldr	r3, [pc, #48]	@ (800603c <prvAddNewTaskToReadyList+0xdc>)
 800600c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006010:	601a      	str	r2, [r3, #0]
 8006012:	f3bf 8f4f 	dsb	sy
 8006016:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800601a:	bf00      	nop
 800601c:	3708      	adds	r7, #8
 800601e:	46bd      	mov	sp, r7
 8006020:	bd80      	pop	{r7, pc}
 8006022:	bf00      	nop
 8006024:	20000ed4 	.word	0x20000ed4
 8006028:	20000a00 	.word	0x20000a00
 800602c:	20000ee0 	.word	0x20000ee0
 8006030:	20000ef0 	.word	0x20000ef0
 8006034:	20000edc 	.word	0x20000edc
 8006038:	20000a04 	.word	0x20000a04
 800603c:	e000ed04 	.word	0xe000ed04

08006040 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006040:	b580      	push	{r7, lr}
 8006042:	b084      	sub	sp, #16
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006048:	2300      	movs	r3, #0
 800604a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d018      	beq.n	8006084 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006052:	4b14      	ldr	r3, [pc, #80]	@ (80060a4 <vTaskDelay+0x64>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d00b      	beq.n	8006072 <vTaskDelay+0x32>
	__asm volatile
 800605a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800605e:	f383 8811 	msr	BASEPRI, r3
 8006062:	f3bf 8f6f 	isb	sy
 8006066:	f3bf 8f4f 	dsb	sy
 800606a:	60bb      	str	r3, [r7, #8]
}
 800606c:	bf00      	nop
 800606e:	bf00      	nop
 8006070:	e7fd      	b.n	800606e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006072:	f000 f88b 	bl	800618c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006076:	2100      	movs	r1, #0
 8006078:	6878      	ldr	r0, [r7, #4]
 800607a:	f000 fd09 	bl	8006a90 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800607e:	f000 f893 	bl	80061a8 <xTaskResumeAll>
 8006082:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d107      	bne.n	800609a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800608a:	4b07      	ldr	r3, [pc, #28]	@ (80060a8 <vTaskDelay+0x68>)
 800608c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006090:	601a      	str	r2, [r3, #0]
 8006092:	f3bf 8f4f 	dsb	sy
 8006096:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800609a:	bf00      	nop
 800609c:	3710      	adds	r7, #16
 800609e:	46bd      	mov	sp, r7
 80060a0:	bd80      	pop	{r7, pc}
 80060a2:	bf00      	nop
 80060a4:	20000efc 	.word	0x20000efc
 80060a8:	e000ed04 	.word	0xe000ed04

080060ac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b08a      	sub	sp, #40	@ 0x28
 80060b0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80060b2:	2300      	movs	r3, #0
 80060b4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80060b6:	2300      	movs	r3, #0
 80060b8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80060ba:	463a      	mov	r2, r7
 80060bc:	1d39      	adds	r1, r7, #4
 80060be:	f107 0308 	add.w	r3, r7, #8
 80060c2:	4618      	mov	r0, r3
 80060c4:	f7ff f81c 	bl	8005100 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80060c8:	6839      	ldr	r1, [r7, #0]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	68ba      	ldr	r2, [r7, #8]
 80060ce:	9202      	str	r2, [sp, #8]
 80060d0:	9301      	str	r3, [sp, #4]
 80060d2:	2300      	movs	r3, #0
 80060d4:	9300      	str	r3, [sp, #0]
 80060d6:	2300      	movs	r3, #0
 80060d8:	460a      	mov	r2, r1
 80060da:	4924      	ldr	r1, [pc, #144]	@ (800616c <vTaskStartScheduler+0xc0>)
 80060dc:	4824      	ldr	r0, [pc, #144]	@ (8006170 <vTaskStartScheduler+0xc4>)
 80060de:	f7ff fdf1 	bl	8005cc4 <xTaskCreateStatic>
 80060e2:	4603      	mov	r3, r0
 80060e4:	4a23      	ldr	r2, [pc, #140]	@ (8006174 <vTaskStartScheduler+0xc8>)
 80060e6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80060e8:	4b22      	ldr	r3, [pc, #136]	@ (8006174 <vTaskStartScheduler+0xc8>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d002      	beq.n	80060f6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80060f0:	2301      	movs	r3, #1
 80060f2:	617b      	str	r3, [r7, #20]
 80060f4:	e001      	b.n	80060fa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80060f6:	2300      	movs	r3, #0
 80060f8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	2b01      	cmp	r3, #1
 80060fe:	d102      	bne.n	8006106 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006100:	f000 fd1a 	bl	8006b38 <xTimerCreateTimerTask>
 8006104:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	2b01      	cmp	r3, #1
 800610a:	d11b      	bne.n	8006144 <vTaskStartScheduler+0x98>
	__asm volatile
 800610c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006110:	f383 8811 	msr	BASEPRI, r3
 8006114:	f3bf 8f6f 	isb	sy
 8006118:	f3bf 8f4f 	dsb	sy
 800611c:	613b      	str	r3, [r7, #16]
}
 800611e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006120:	4b15      	ldr	r3, [pc, #84]	@ (8006178 <vTaskStartScheduler+0xcc>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	3354      	adds	r3, #84	@ 0x54
 8006126:	4a15      	ldr	r2, [pc, #84]	@ (800617c <vTaskStartScheduler+0xd0>)
 8006128:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800612a:	4b15      	ldr	r3, [pc, #84]	@ (8006180 <vTaskStartScheduler+0xd4>)
 800612c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006130:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006132:	4b14      	ldr	r3, [pc, #80]	@ (8006184 <vTaskStartScheduler+0xd8>)
 8006134:	2201      	movs	r2, #1
 8006136:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006138:	4b13      	ldr	r3, [pc, #76]	@ (8006188 <vTaskStartScheduler+0xdc>)
 800613a:	2200      	movs	r2, #0
 800613c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800613e:	f001 f8df 	bl	8007300 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006142:	e00f      	b.n	8006164 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006144:	697b      	ldr	r3, [r7, #20]
 8006146:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800614a:	d10b      	bne.n	8006164 <vTaskStartScheduler+0xb8>
	__asm volatile
 800614c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006150:	f383 8811 	msr	BASEPRI, r3
 8006154:	f3bf 8f6f 	isb	sy
 8006158:	f3bf 8f4f 	dsb	sy
 800615c:	60fb      	str	r3, [r7, #12]
}
 800615e:	bf00      	nop
 8006160:	bf00      	nop
 8006162:	e7fd      	b.n	8006160 <vTaskStartScheduler+0xb4>
}
 8006164:	bf00      	nop
 8006166:	3718      	adds	r7, #24
 8006168:	46bd      	mov	sp, r7
 800616a:	bd80      	pop	{r7, pc}
 800616c:	08007c70 	.word	0x08007c70
 8006170:	080067bd 	.word	0x080067bd
 8006174:	20000ef8 	.word	0x20000ef8
 8006178:	20000a00 	.word	0x20000a00
 800617c:	20000010 	.word	0x20000010
 8006180:	20000ef4 	.word	0x20000ef4
 8006184:	20000ee0 	.word	0x20000ee0
 8006188:	20000ed8 	.word	0x20000ed8

0800618c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800618c:	b480      	push	{r7}
 800618e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006190:	4b04      	ldr	r3, [pc, #16]	@ (80061a4 <vTaskSuspendAll+0x18>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	3301      	adds	r3, #1
 8006196:	4a03      	ldr	r2, [pc, #12]	@ (80061a4 <vTaskSuspendAll+0x18>)
 8006198:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800619a:	bf00      	nop
 800619c:	46bd      	mov	sp, r7
 800619e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a2:	4770      	bx	lr
 80061a4:	20000efc 	.word	0x20000efc

080061a8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b084      	sub	sp, #16
 80061ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80061ae:	2300      	movs	r3, #0
 80061b0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80061b2:	2300      	movs	r3, #0
 80061b4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80061b6:	4b42      	ldr	r3, [pc, #264]	@ (80062c0 <xTaskResumeAll+0x118>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d10b      	bne.n	80061d6 <xTaskResumeAll+0x2e>
	__asm volatile
 80061be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061c2:	f383 8811 	msr	BASEPRI, r3
 80061c6:	f3bf 8f6f 	isb	sy
 80061ca:	f3bf 8f4f 	dsb	sy
 80061ce:	603b      	str	r3, [r7, #0]
}
 80061d0:	bf00      	nop
 80061d2:	bf00      	nop
 80061d4:	e7fd      	b.n	80061d2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80061d6:	f001 f937 	bl	8007448 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80061da:	4b39      	ldr	r3, [pc, #228]	@ (80062c0 <xTaskResumeAll+0x118>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	3b01      	subs	r3, #1
 80061e0:	4a37      	ldr	r2, [pc, #220]	@ (80062c0 <xTaskResumeAll+0x118>)
 80061e2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80061e4:	4b36      	ldr	r3, [pc, #216]	@ (80062c0 <xTaskResumeAll+0x118>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d162      	bne.n	80062b2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80061ec:	4b35      	ldr	r3, [pc, #212]	@ (80062c4 <xTaskResumeAll+0x11c>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d05e      	beq.n	80062b2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80061f4:	e02f      	b.n	8006256 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061f6:	4b34      	ldr	r3, [pc, #208]	@ (80062c8 <xTaskResumeAll+0x120>)
 80061f8:	68db      	ldr	r3, [r3, #12]
 80061fa:	68db      	ldr	r3, [r3, #12]
 80061fc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	3318      	adds	r3, #24
 8006202:	4618      	mov	r0, r3
 8006204:	f7ff f83a 	bl	800527c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	3304      	adds	r3, #4
 800620c:	4618      	mov	r0, r3
 800620e:	f7ff f835 	bl	800527c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006216:	4b2d      	ldr	r3, [pc, #180]	@ (80062cc <xTaskResumeAll+0x124>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	429a      	cmp	r2, r3
 800621c:	d903      	bls.n	8006226 <xTaskResumeAll+0x7e>
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006222:	4a2a      	ldr	r2, [pc, #168]	@ (80062cc <xTaskResumeAll+0x124>)
 8006224:	6013      	str	r3, [r2, #0]
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800622a:	4613      	mov	r3, r2
 800622c:	009b      	lsls	r3, r3, #2
 800622e:	4413      	add	r3, r2
 8006230:	009b      	lsls	r3, r3, #2
 8006232:	4a27      	ldr	r2, [pc, #156]	@ (80062d0 <xTaskResumeAll+0x128>)
 8006234:	441a      	add	r2, r3
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	3304      	adds	r3, #4
 800623a:	4619      	mov	r1, r3
 800623c:	4610      	mov	r0, r2
 800623e:	f7fe ffc0 	bl	80051c2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006246:	4b23      	ldr	r3, [pc, #140]	@ (80062d4 <xTaskResumeAll+0x12c>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800624c:	429a      	cmp	r2, r3
 800624e:	d302      	bcc.n	8006256 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8006250:	4b21      	ldr	r3, [pc, #132]	@ (80062d8 <xTaskResumeAll+0x130>)
 8006252:	2201      	movs	r2, #1
 8006254:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006256:	4b1c      	ldr	r3, [pc, #112]	@ (80062c8 <xTaskResumeAll+0x120>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d1cb      	bne.n	80061f6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d001      	beq.n	8006268 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006264:	f000 fb66 	bl	8006934 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006268:	4b1c      	ldr	r3, [pc, #112]	@ (80062dc <xTaskResumeAll+0x134>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d010      	beq.n	8006296 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006274:	f000 f846 	bl	8006304 <xTaskIncrementTick>
 8006278:	4603      	mov	r3, r0
 800627a:	2b00      	cmp	r3, #0
 800627c:	d002      	beq.n	8006284 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800627e:	4b16      	ldr	r3, [pc, #88]	@ (80062d8 <xTaskResumeAll+0x130>)
 8006280:	2201      	movs	r2, #1
 8006282:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	3b01      	subs	r3, #1
 8006288:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d1f1      	bne.n	8006274 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8006290:	4b12      	ldr	r3, [pc, #72]	@ (80062dc <xTaskResumeAll+0x134>)
 8006292:	2200      	movs	r2, #0
 8006294:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006296:	4b10      	ldr	r3, [pc, #64]	@ (80062d8 <xTaskResumeAll+0x130>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d009      	beq.n	80062b2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800629e:	2301      	movs	r3, #1
 80062a0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80062a2:	4b0f      	ldr	r3, [pc, #60]	@ (80062e0 <xTaskResumeAll+0x138>)
 80062a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80062a8:	601a      	str	r2, [r3, #0]
 80062aa:	f3bf 8f4f 	dsb	sy
 80062ae:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80062b2:	f001 f8fb 	bl	80074ac <vPortExitCritical>

	return xAlreadyYielded;
 80062b6:	68bb      	ldr	r3, [r7, #8]
}
 80062b8:	4618      	mov	r0, r3
 80062ba:	3710      	adds	r7, #16
 80062bc:	46bd      	mov	sp, r7
 80062be:	bd80      	pop	{r7, pc}
 80062c0:	20000efc 	.word	0x20000efc
 80062c4:	20000ed4 	.word	0x20000ed4
 80062c8:	20000e94 	.word	0x20000e94
 80062cc:	20000edc 	.word	0x20000edc
 80062d0:	20000a04 	.word	0x20000a04
 80062d4:	20000a00 	.word	0x20000a00
 80062d8:	20000ee8 	.word	0x20000ee8
 80062dc:	20000ee4 	.word	0x20000ee4
 80062e0:	e000ed04 	.word	0xe000ed04

080062e4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80062e4:	b480      	push	{r7}
 80062e6:	b083      	sub	sp, #12
 80062e8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80062ea:	4b05      	ldr	r3, [pc, #20]	@ (8006300 <xTaskGetTickCount+0x1c>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80062f0:	687b      	ldr	r3, [r7, #4]
}
 80062f2:	4618      	mov	r0, r3
 80062f4:	370c      	adds	r7, #12
 80062f6:	46bd      	mov	sp, r7
 80062f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fc:	4770      	bx	lr
 80062fe:	bf00      	nop
 8006300:	20000ed8 	.word	0x20000ed8

08006304 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b086      	sub	sp, #24
 8006308:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800630a:	2300      	movs	r3, #0
 800630c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800630e:	4b4f      	ldr	r3, [pc, #316]	@ (800644c <xTaskIncrementTick+0x148>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	2b00      	cmp	r3, #0
 8006314:	f040 8090 	bne.w	8006438 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006318:	4b4d      	ldr	r3, [pc, #308]	@ (8006450 <xTaskIncrementTick+0x14c>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	3301      	adds	r3, #1
 800631e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006320:	4a4b      	ldr	r2, [pc, #300]	@ (8006450 <xTaskIncrementTick+0x14c>)
 8006322:	693b      	ldr	r3, [r7, #16]
 8006324:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d121      	bne.n	8006370 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800632c:	4b49      	ldr	r3, [pc, #292]	@ (8006454 <xTaskIncrementTick+0x150>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d00b      	beq.n	800634e <xTaskIncrementTick+0x4a>
	__asm volatile
 8006336:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800633a:	f383 8811 	msr	BASEPRI, r3
 800633e:	f3bf 8f6f 	isb	sy
 8006342:	f3bf 8f4f 	dsb	sy
 8006346:	603b      	str	r3, [r7, #0]
}
 8006348:	bf00      	nop
 800634a:	bf00      	nop
 800634c:	e7fd      	b.n	800634a <xTaskIncrementTick+0x46>
 800634e:	4b41      	ldr	r3, [pc, #260]	@ (8006454 <xTaskIncrementTick+0x150>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	60fb      	str	r3, [r7, #12]
 8006354:	4b40      	ldr	r3, [pc, #256]	@ (8006458 <xTaskIncrementTick+0x154>)
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4a3e      	ldr	r2, [pc, #248]	@ (8006454 <xTaskIncrementTick+0x150>)
 800635a:	6013      	str	r3, [r2, #0]
 800635c:	4a3e      	ldr	r2, [pc, #248]	@ (8006458 <xTaskIncrementTick+0x154>)
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	6013      	str	r3, [r2, #0]
 8006362:	4b3e      	ldr	r3, [pc, #248]	@ (800645c <xTaskIncrementTick+0x158>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	3301      	adds	r3, #1
 8006368:	4a3c      	ldr	r2, [pc, #240]	@ (800645c <xTaskIncrementTick+0x158>)
 800636a:	6013      	str	r3, [r2, #0]
 800636c:	f000 fae2 	bl	8006934 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006370:	4b3b      	ldr	r3, [pc, #236]	@ (8006460 <xTaskIncrementTick+0x15c>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	693a      	ldr	r2, [r7, #16]
 8006376:	429a      	cmp	r2, r3
 8006378:	d349      	bcc.n	800640e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800637a:	4b36      	ldr	r3, [pc, #216]	@ (8006454 <xTaskIncrementTick+0x150>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d104      	bne.n	800638e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006384:	4b36      	ldr	r3, [pc, #216]	@ (8006460 <xTaskIncrementTick+0x15c>)
 8006386:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800638a:	601a      	str	r2, [r3, #0]
					break;
 800638c:	e03f      	b.n	800640e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800638e:	4b31      	ldr	r3, [pc, #196]	@ (8006454 <xTaskIncrementTick+0x150>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	68db      	ldr	r3, [r3, #12]
 8006394:	68db      	ldr	r3, [r3, #12]
 8006396:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	685b      	ldr	r3, [r3, #4]
 800639c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800639e:	693a      	ldr	r2, [r7, #16]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	429a      	cmp	r2, r3
 80063a4:	d203      	bcs.n	80063ae <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80063a6:	4a2e      	ldr	r2, [pc, #184]	@ (8006460 <xTaskIncrementTick+0x15c>)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80063ac:	e02f      	b.n	800640e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	3304      	adds	r3, #4
 80063b2:	4618      	mov	r0, r3
 80063b4:	f7fe ff62 	bl	800527c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d004      	beq.n	80063ca <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	3318      	adds	r3, #24
 80063c4:	4618      	mov	r0, r3
 80063c6:	f7fe ff59 	bl	800527c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063ce:	4b25      	ldr	r3, [pc, #148]	@ (8006464 <xTaskIncrementTick+0x160>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	429a      	cmp	r2, r3
 80063d4:	d903      	bls.n	80063de <xTaskIncrementTick+0xda>
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063da:	4a22      	ldr	r2, [pc, #136]	@ (8006464 <xTaskIncrementTick+0x160>)
 80063dc:	6013      	str	r3, [r2, #0]
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063e2:	4613      	mov	r3, r2
 80063e4:	009b      	lsls	r3, r3, #2
 80063e6:	4413      	add	r3, r2
 80063e8:	009b      	lsls	r3, r3, #2
 80063ea:	4a1f      	ldr	r2, [pc, #124]	@ (8006468 <xTaskIncrementTick+0x164>)
 80063ec:	441a      	add	r2, r3
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	3304      	adds	r3, #4
 80063f2:	4619      	mov	r1, r3
 80063f4:	4610      	mov	r0, r2
 80063f6:	f7fe fee4 	bl	80051c2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063fe:	4b1b      	ldr	r3, [pc, #108]	@ (800646c <xTaskIncrementTick+0x168>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006404:	429a      	cmp	r2, r3
 8006406:	d3b8      	bcc.n	800637a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006408:	2301      	movs	r3, #1
 800640a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800640c:	e7b5      	b.n	800637a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800640e:	4b17      	ldr	r3, [pc, #92]	@ (800646c <xTaskIncrementTick+0x168>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006414:	4914      	ldr	r1, [pc, #80]	@ (8006468 <xTaskIncrementTick+0x164>)
 8006416:	4613      	mov	r3, r2
 8006418:	009b      	lsls	r3, r3, #2
 800641a:	4413      	add	r3, r2
 800641c:	009b      	lsls	r3, r3, #2
 800641e:	440b      	add	r3, r1
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	2b01      	cmp	r3, #1
 8006424:	d901      	bls.n	800642a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8006426:	2301      	movs	r3, #1
 8006428:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800642a:	4b11      	ldr	r3, [pc, #68]	@ (8006470 <xTaskIncrementTick+0x16c>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d007      	beq.n	8006442 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8006432:	2301      	movs	r3, #1
 8006434:	617b      	str	r3, [r7, #20]
 8006436:	e004      	b.n	8006442 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006438:	4b0e      	ldr	r3, [pc, #56]	@ (8006474 <xTaskIncrementTick+0x170>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	3301      	adds	r3, #1
 800643e:	4a0d      	ldr	r2, [pc, #52]	@ (8006474 <xTaskIncrementTick+0x170>)
 8006440:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006442:	697b      	ldr	r3, [r7, #20]
}
 8006444:	4618      	mov	r0, r3
 8006446:	3718      	adds	r7, #24
 8006448:	46bd      	mov	sp, r7
 800644a:	bd80      	pop	{r7, pc}
 800644c:	20000efc 	.word	0x20000efc
 8006450:	20000ed8 	.word	0x20000ed8
 8006454:	20000e8c 	.word	0x20000e8c
 8006458:	20000e90 	.word	0x20000e90
 800645c:	20000eec 	.word	0x20000eec
 8006460:	20000ef4 	.word	0x20000ef4
 8006464:	20000edc 	.word	0x20000edc
 8006468:	20000a04 	.word	0x20000a04
 800646c:	20000a00 	.word	0x20000a00
 8006470:	20000ee8 	.word	0x20000ee8
 8006474:	20000ee4 	.word	0x20000ee4

08006478 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006478:	b480      	push	{r7}
 800647a:	b085      	sub	sp, #20
 800647c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800647e:	4b2b      	ldr	r3, [pc, #172]	@ (800652c <vTaskSwitchContext+0xb4>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d003      	beq.n	800648e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006486:	4b2a      	ldr	r3, [pc, #168]	@ (8006530 <vTaskSwitchContext+0xb8>)
 8006488:	2201      	movs	r2, #1
 800648a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800648c:	e047      	b.n	800651e <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800648e:	4b28      	ldr	r3, [pc, #160]	@ (8006530 <vTaskSwitchContext+0xb8>)
 8006490:	2200      	movs	r2, #0
 8006492:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006494:	4b27      	ldr	r3, [pc, #156]	@ (8006534 <vTaskSwitchContext+0xbc>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	60fb      	str	r3, [r7, #12]
 800649a:	e011      	b.n	80064c0 <vTaskSwitchContext+0x48>
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d10b      	bne.n	80064ba <vTaskSwitchContext+0x42>
	__asm volatile
 80064a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064a6:	f383 8811 	msr	BASEPRI, r3
 80064aa:	f3bf 8f6f 	isb	sy
 80064ae:	f3bf 8f4f 	dsb	sy
 80064b2:	607b      	str	r3, [r7, #4]
}
 80064b4:	bf00      	nop
 80064b6:	bf00      	nop
 80064b8:	e7fd      	b.n	80064b6 <vTaskSwitchContext+0x3e>
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	3b01      	subs	r3, #1
 80064be:	60fb      	str	r3, [r7, #12]
 80064c0:	491d      	ldr	r1, [pc, #116]	@ (8006538 <vTaskSwitchContext+0xc0>)
 80064c2:	68fa      	ldr	r2, [r7, #12]
 80064c4:	4613      	mov	r3, r2
 80064c6:	009b      	lsls	r3, r3, #2
 80064c8:	4413      	add	r3, r2
 80064ca:	009b      	lsls	r3, r3, #2
 80064cc:	440b      	add	r3, r1
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d0e3      	beq.n	800649c <vTaskSwitchContext+0x24>
 80064d4:	68fa      	ldr	r2, [r7, #12]
 80064d6:	4613      	mov	r3, r2
 80064d8:	009b      	lsls	r3, r3, #2
 80064da:	4413      	add	r3, r2
 80064dc:	009b      	lsls	r3, r3, #2
 80064de:	4a16      	ldr	r2, [pc, #88]	@ (8006538 <vTaskSwitchContext+0xc0>)
 80064e0:	4413      	add	r3, r2
 80064e2:	60bb      	str	r3, [r7, #8]
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	685b      	ldr	r3, [r3, #4]
 80064e8:	685a      	ldr	r2, [r3, #4]
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	605a      	str	r2, [r3, #4]
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	685a      	ldr	r2, [r3, #4]
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	3308      	adds	r3, #8
 80064f6:	429a      	cmp	r2, r3
 80064f8:	d104      	bne.n	8006504 <vTaskSwitchContext+0x8c>
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	685b      	ldr	r3, [r3, #4]
 80064fe:	685a      	ldr	r2, [r3, #4]
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	605a      	str	r2, [r3, #4]
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	685b      	ldr	r3, [r3, #4]
 8006508:	68db      	ldr	r3, [r3, #12]
 800650a:	4a0c      	ldr	r2, [pc, #48]	@ (800653c <vTaskSwitchContext+0xc4>)
 800650c:	6013      	str	r3, [r2, #0]
 800650e:	4a09      	ldr	r2, [pc, #36]	@ (8006534 <vTaskSwitchContext+0xbc>)
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006514:	4b09      	ldr	r3, [pc, #36]	@ (800653c <vTaskSwitchContext+0xc4>)
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	3354      	adds	r3, #84	@ 0x54
 800651a:	4a09      	ldr	r2, [pc, #36]	@ (8006540 <vTaskSwitchContext+0xc8>)
 800651c:	6013      	str	r3, [r2, #0]
}
 800651e:	bf00      	nop
 8006520:	3714      	adds	r7, #20
 8006522:	46bd      	mov	sp, r7
 8006524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006528:	4770      	bx	lr
 800652a:	bf00      	nop
 800652c:	20000efc 	.word	0x20000efc
 8006530:	20000ee8 	.word	0x20000ee8
 8006534:	20000edc 	.word	0x20000edc
 8006538:	20000a04 	.word	0x20000a04
 800653c:	20000a00 	.word	0x20000a00
 8006540:	20000010 	.word	0x20000010

08006544 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b084      	sub	sp, #16
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
 800654c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d10b      	bne.n	800656c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8006554:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006558:	f383 8811 	msr	BASEPRI, r3
 800655c:	f3bf 8f6f 	isb	sy
 8006560:	f3bf 8f4f 	dsb	sy
 8006564:	60fb      	str	r3, [r7, #12]
}
 8006566:	bf00      	nop
 8006568:	bf00      	nop
 800656a:	e7fd      	b.n	8006568 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800656c:	4b07      	ldr	r3, [pc, #28]	@ (800658c <vTaskPlaceOnEventList+0x48>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	3318      	adds	r3, #24
 8006572:	4619      	mov	r1, r3
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	f7fe fe48 	bl	800520a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800657a:	2101      	movs	r1, #1
 800657c:	6838      	ldr	r0, [r7, #0]
 800657e:	f000 fa87 	bl	8006a90 <prvAddCurrentTaskToDelayedList>
}
 8006582:	bf00      	nop
 8006584:	3710      	adds	r7, #16
 8006586:	46bd      	mov	sp, r7
 8006588:	bd80      	pop	{r7, pc}
 800658a:	bf00      	nop
 800658c:	20000a00 	.word	0x20000a00

08006590 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006590:	b580      	push	{r7, lr}
 8006592:	b086      	sub	sp, #24
 8006594:	af00      	add	r7, sp, #0
 8006596:	60f8      	str	r0, [r7, #12]
 8006598:	60b9      	str	r1, [r7, #8]
 800659a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d10b      	bne.n	80065ba <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80065a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065a6:	f383 8811 	msr	BASEPRI, r3
 80065aa:	f3bf 8f6f 	isb	sy
 80065ae:	f3bf 8f4f 	dsb	sy
 80065b2:	617b      	str	r3, [r7, #20]
}
 80065b4:	bf00      	nop
 80065b6:	bf00      	nop
 80065b8:	e7fd      	b.n	80065b6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80065ba:	4b0a      	ldr	r3, [pc, #40]	@ (80065e4 <vTaskPlaceOnEventListRestricted+0x54>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	3318      	adds	r3, #24
 80065c0:	4619      	mov	r1, r3
 80065c2:	68f8      	ldr	r0, [r7, #12]
 80065c4:	f7fe fdfd 	bl	80051c2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d002      	beq.n	80065d4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80065ce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80065d2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80065d4:	6879      	ldr	r1, [r7, #4]
 80065d6:	68b8      	ldr	r0, [r7, #8]
 80065d8:	f000 fa5a 	bl	8006a90 <prvAddCurrentTaskToDelayedList>
	}
 80065dc:	bf00      	nop
 80065de:	3718      	adds	r7, #24
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bd80      	pop	{r7, pc}
 80065e4:	20000a00 	.word	0x20000a00

080065e8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b086      	sub	sp, #24
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	68db      	ldr	r3, [r3, #12]
 80065f4:	68db      	ldr	r3, [r3, #12]
 80065f6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80065f8:	693b      	ldr	r3, [r7, #16]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d10b      	bne.n	8006616 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80065fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006602:	f383 8811 	msr	BASEPRI, r3
 8006606:	f3bf 8f6f 	isb	sy
 800660a:	f3bf 8f4f 	dsb	sy
 800660e:	60fb      	str	r3, [r7, #12]
}
 8006610:	bf00      	nop
 8006612:	bf00      	nop
 8006614:	e7fd      	b.n	8006612 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006616:	693b      	ldr	r3, [r7, #16]
 8006618:	3318      	adds	r3, #24
 800661a:	4618      	mov	r0, r3
 800661c:	f7fe fe2e 	bl	800527c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006620:	4b1d      	ldr	r3, [pc, #116]	@ (8006698 <xTaskRemoveFromEventList+0xb0>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d11d      	bne.n	8006664 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006628:	693b      	ldr	r3, [r7, #16]
 800662a:	3304      	adds	r3, #4
 800662c:	4618      	mov	r0, r3
 800662e:	f7fe fe25 	bl	800527c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006632:	693b      	ldr	r3, [r7, #16]
 8006634:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006636:	4b19      	ldr	r3, [pc, #100]	@ (800669c <xTaskRemoveFromEventList+0xb4>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	429a      	cmp	r2, r3
 800663c:	d903      	bls.n	8006646 <xTaskRemoveFromEventList+0x5e>
 800663e:	693b      	ldr	r3, [r7, #16]
 8006640:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006642:	4a16      	ldr	r2, [pc, #88]	@ (800669c <xTaskRemoveFromEventList+0xb4>)
 8006644:	6013      	str	r3, [r2, #0]
 8006646:	693b      	ldr	r3, [r7, #16]
 8006648:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800664a:	4613      	mov	r3, r2
 800664c:	009b      	lsls	r3, r3, #2
 800664e:	4413      	add	r3, r2
 8006650:	009b      	lsls	r3, r3, #2
 8006652:	4a13      	ldr	r2, [pc, #76]	@ (80066a0 <xTaskRemoveFromEventList+0xb8>)
 8006654:	441a      	add	r2, r3
 8006656:	693b      	ldr	r3, [r7, #16]
 8006658:	3304      	adds	r3, #4
 800665a:	4619      	mov	r1, r3
 800665c:	4610      	mov	r0, r2
 800665e:	f7fe fdb0 	bl	80051c2 <vListInsertEnd>
 8006662:	e005      	b.n	8006670 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006664:	693b      	ldr	r3, [r7, #16]
 8006666:	3318      	adds	r3, #24
 8006668:	4619      	mov	r1, r3
 800666a:	480e      	ldr	r0, [pc, #56]	@ (80066a4 <xTaskRemoveFromEventList+0xbc>)
 800666c:	f7fe fda9 	bl	80051c2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006670:	693b      	ldr	r3, [r7, #16]
 8006672:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006674:	4b0c      	ldr	r3, [pc, #48]	@ (80066a8 <xTaskRemoveFromEventList+0xc0>)
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800667a:	429a      	cmp	r2, r3
 800667c:	d905      	bls.n	800668a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800667e:	2301      	movs	r3, #1
 8006680:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006682:	4b0a      	ldr	r3, [pc, #40]	@ (80066ac <xTaskRemoveFromEventList+0xc4>)
 8006684:	2201      	movs	r2, #1
 8006686:	601a      	str	r2, [r3, #0]
 8006688:	e001      	b.n	800668e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800668a:	2300      	movs	r3, #0
 800668c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800668e:	697b      	ldr	r3, [r7, #20]
}
 8006690:	4618      	mov	r0, r3
 8006692:	3718      	adds	r7, #24
 8006694:	46bd      	mov	sp, r7
 8006696:	bd80      	pop	{r7, pc}
 8006698:	20000efc 	.word	0x20000efc
 800669c:	20000edc 	.word	0x20000edc
 80066a0:	20000a04 	.word	0x20000a04
 80066a4:	20000e94 	.word	0x20000e94
 80066a8:	20000a00 	.word	0x20000a00
 80066ac:	20000ee8 	.word	0x20000ee8

080066b0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80066b0:	b480      	push	{r7}
 80066b2:	b083      	sub	sp, #12
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80066b8:	4b06      	ldr	r3, [pc, #24]	@ (80066d4 <vTaskInternalSetTimeOutState+0x24>)
 80066ba:	681a      	ldr	r2, [r3, #0]
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80066c0:	4b05      	ldr	r3, [pc, #20]	@ (80066d8 <vTaskInternalSetTimeOutState+0x28>)
 80066c2:	681a      	ldr	r2, [r3, #0]
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	605a      	str	r2, [r3, #4]
}
 80066c8:	bf00      	nop
 80066ca:	370c      	adds	r7, #12
 80066cc:	46bd      	mov	sp, r7
 80066ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d2:	4770      	bx	lr
 80066d4:	20000eec 	.word	0x20000eec
 80066d8:	20000ed8 	.word	0x20000ed8

080066dc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b088      	sub	sp, #32
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
 80066e4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d10b      	bne.n	8006704 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80066ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066f0:	f383 8811 	msr	BASEPRI, r3
 80066f4:	f3bf 8f6f 	isb	sy
 80066f8:	f3bf 8f4f 	dsb	sy
 80066fc:	613b      	str	r3, [r7, #16]
}
 80066fe:	bf00      	nop
 8006700:	bf00      	nop
 8006702:	e7fd      	b.n	8006700 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d10b      	bne.n	8006722 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800670a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800670e:	f383 8811 	msr	BASEPRI, r3
 8006712:	f3bf 8f6f 	isb	sy
 8006716:	f3bf 8f4f 	dsb	sy
 800671a:	60fb      	str	r3, [r7, #12]
}
 800671c:	bf00      	nop
 800671e:	bf00      	nop
 8006720:	e7fd      	b.n	800671e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8006722:	f000 fe91 	bl	8007448 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006726:	4b1d      	ldr	r3, [pc, #116]	@ (800679c <xTaskCheckForTimeOut+0xc0>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	685b      	ldr	r3, [r3, #4]
 8006730:	69ba      	ldr	r2, [r7, #24]
 8006732:	1ad3      	subs	r3, r2, r3
 8006734:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800673e:	d102      	bne.n	8006746 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006740:	2300      	movs	r3, #0
 8006742:	61fb      	str	r3, [r7, #28]
 8006744:	e023      	b.n	800678e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681a      	ldr	r2, [r3, #0]
 800674a:	4b15      	ldr	r3, [pc, #84]	@ (80067a0 <xTaskCheckForTimeOut+0xc4>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	429a      	cmp	r2, r3
 8006750:	d007      	beq.n	8006762 <xTaskCheckForTimeOut+0x86>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	685b      	ldr	r3, [r3, #4]
 8006756:	69ba      	ldr	r2, [r7, #24]
 8006758:	429a      	cmp	r2, r3
 800675a:	d302      	bcc.n	8006762 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800675c:	2301      	movs	r3, #1
 800675e:	61fb      	str	r3, [r7, #28]
 8006760:	e015      	b.n	800678e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	697a      	ldr	r2, [r7, #20]
 8006768:	429a      	cmp	r2, r3
 800676a:	d20b      	bcs.n	8006784 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	681a      	ldr	r2, [r3, #0]
 8006770:	697b      	ldr	r3, [r7, #20]
 8006772:	1ad2      	subs	r2, r2, r3
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006778:	6878      	ldr	r0, [r7, #4]
 800677a:	f7ff ff99 	bl	80066b0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800677e:	2300      	movs	r3, #0
 8006780:	61fb      	str	r3, [r7, #28]
 8006782:	e004      	b.n	800678e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	2200      	movs	r2, #0
 8006788:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800678a:	2301      	movs	r3, #1
 800678c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800678e:	f000 fe8d 	bl	80074ac <vPortExitCritical>

	return xReturn;
 8006792:	69fb      	ldr	r3, [r7, #28]
}
 8006794:	4618      	mov	r0, r3
 8006796:	3720      	adds	r7, #32
 8006798:	46bd      	mov	sp, r7
 800679a:	bd80      	pop	{r7, pc}
 800679c:	20000ed8 	.word	0x20000ed8
 80067a0:	20000eec 	.word	0x20000eec

080067a4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80067a4:	b480      	push	{r7}
 80067a6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80067a8:	4b03      	ldr	r3, [pc, #12]	@ (80067b8 <vTaskMissedYield+0x14>)
 80067aa:	2201      	movs	r2, #1
 80067ac:	601a      	str	r2, [r3, #0]
}
 80067ae:	bf00      	nop
 80067b0:	46bd      	mov	sp, r7
 80067b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b6:	4770      	bx	lr
 80067b8:	20000ee8 	.word	0x20000ee8

080067bc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b082      	sub	sp, #8
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80067c4:	f000 f852 	bl	800686c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80067c8:	4b06      	ldr	r3, [pc, #24]	@ (80067e4 <prvIdleTask+0x28>)
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	2b01      	cmp	r3, #1
 80067ce:	d9f9      	bls.n	80067c4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80067d0:	4b05      	ldr	r3, [pc, #20]	@ (80067e8 <prvIdleTask+0x2c>)
 80067d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80067d6:	601a      	str	r2, [r3, #0]
 80067d8:	f3bf 8f4f 	dsb	sy
 80067dc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80067e0:	e7f0      	b.n	80067c4 <prvIdleTask+0x8>
 80067e2:	bf00      	nop
 80067e4:	20000a04 	.word	0x20000a04
 80067e8:	e000ed04 	.word	0xe000ed04

080067ec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b082      	sub	sp, #8
 80067f0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80067f2:	2300      	movs	r3, #0
 80067f4:	607b      	str	r3, [r7, #4]
 80067f6:	e00c      	b.n	8006812 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80067f8:	687a      	ldr	r2, [r7, #4]
 80067fa:	4613      	mov	r3, r2
 80067fc:	009b      	lsls	r3, r3, #2
 80067fe:	4413      	add	r3, r2
 8006800:	009b      	lsls	r3, r3, #2
 8006802:	4a12      	ldr	r2, [pc, #72]	@ (800684c <prvInitialiseTaskLists+0x60>)
 8006804:	4413      	add	r3, r2
 8006806:	4618      	mov	r0, r3
 8006808:	f7fe fcae 	bl	8005168 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	3301      	adds	r3, #1
 8006810:	607b      	str	r3, [r7, #4]
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2b37      	cmp	r3, #55	@ 0x37
 8006816:	d9ef      	bls.n	80067f8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006818:	480d      	ldr	r0, [pc, #52]	@ (8006850 <prvInitialiseTaskLists+0x64>)
 800681a:	f7fe fca5 	bl	8005168 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800681e:	480d      	ldr	r0, [pc, #52]	@ (8006854 <prvInitialiseTaskLists+0x68>)
 8006820:	f7fe fca2 	bl	8005168 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006824:	480c      	ldr	r0, [pc, #48]	@ (8006858 <prvInitialiseTaskLists+0x6c>)
 8006826:	f7fe fc9f 	bl	8005168 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800682a:	480c      	ldr	r0, [pc, #48]	@ (800685c <prvInitialiseTaskLists+0x70>)
 800682c:	f7fe fc9c 	bl	8005168 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006830:	480b      	ldr	r0, [pc, #44]	@ (8006860 <prvInitialiseTaskLists+0x74>)
 8006832:	f7fe fc99 	bl	8005168 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006836:	4b0b      	ldr	r3, [pc, #44]	@ (8006864 <prvInitialiseTaskLists+0x78>)
 8006838:	4a05      	ldr	r2, [pc, #20]	@ (8006850 <prvInitialiseTaskLists+0x64>)
 800683a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800683c:	4b0a      	ldr	r3, [pc, #40]	@ (8006868 <prvInitialiseTaskLists+0x7c>)
 800683e:	4a05      	ldr	r2, [pc, #20]	@ (8006854 <prvInitialiseTaskLists+0x68>)
 8006840:	601a      	str	r2, [r3, #0]
}
 8006842:	bf00      	nop
 8006844:	3708      	adds	r7, #8
 8006846:	46bd      	mov	sp, r7
 8006848:	bd80      	pop	{r7, pc}
 800684a:	bf00      	nop
 800684c:	20000a04 	.word	0x20000a04
 8006850:	20000e64 	.word	0x20000e64
 8006854:	20000e78 	.word	0x20000e78
 8006858:	20000e94 	.word	0x20000e94
 800685c:	20000ea8 	.word	0x20000ea8
 8006860:	20000ec0 	.word	0x20000ec0
 8006864:	20000e8c 	.word	0x20000e8c
 8006868:	20000e90 	.word	0x20000e90

0800686c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b082      	sub	sp, #8
 8006870:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006872:	e019      	b.n	80068a8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006874:	f000 fde8 	bl	8007448 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006878:	4b10      	ldr	r3, [pc, #64]	@ (80068bc <prvCheckTasksWaitingTermination+0x50>)
 800687a:	68db      	ldr	r3, [r3, #12]
 800687c:	68db      	ldr	r3, [r3, #12]
 800687e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	3304      	adds	r3, #4
 8006884:	4618      	mov	r0, r3
 8006886:	f7fe fcf9 	bl	800527c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800688a:	4b0d      	ldr	r3, [pc, #52]	@ (80068c0 <prvCheckTasksWaitingTermination+0x54>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	3b01      	subs	r3, #1
 8006890:	4a0b      	ldr	r2, [pc, #44]	@ (80068c0 <prvCheckTasksWaitingTermination+0x54>)
 8006892:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006894:	4b0b      	ldr	r3, [pc, #44]	@ (80068c4 <prvCheckTasksWaitingTermination+0x58>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	3b01      	subs	r3, #1
 800689a:	4a0a      	ldr	r2, [pc, #40]	@ (80068c4 <prvCheckTasksWaitingTermination+0x58>)
 800689c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800689e:	f000 fe05 	bl	80074ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80068a2:	6878      	ldr	r0, [r7, #4]
 80068a4:	f000 f810 	bl	80068c8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80068a8:	4b06      	ldr	r3, [pc, #24]	@ (80068c4 <prvCheckTasksWaitingTermination+0x58>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d1e1      	bne.n	8006874 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80068b0:	bf00      	nop
 80068b2:	bf00      	nop
 80068b4:	3708      	adds	r7, #8
 80068b6:	46bd      	mov	sp, r7
 80068b8:	bd80      	pop	{r7, pc}
 80068ba:	bf00      	nop
 80068bc:	20000ea8 	.word	0x20000ea8
 80068c0:	20000ed4 	.word	0x20000ed4
 80068c4:	20000ebc 	.word	0x20000ebc

080068c8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b084      	sub	sp, #16
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	3354      	adds	r3, #84	@ 0x54
 80068d4:	4618      	mov	r0, r3
 80068d6:	f001 f8cf 	bl	8007a78 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d108      	bne.n	80068f6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068e8:	4618      	mov	r0, r3
 80068ea:	f000 ff9d 	bl	8007828 <vPortFree>
				vPortFree( pxTCB );
 80068ee:	6878      	ldr	r0, [r7, #4]
 80068f0:	f000 ff9a 	bl	8007828 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80068f4:	e019      	b.n	800692a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80068fc:	2b01      	cmp	r3, #1
 80068fe:	d103      	bne.n	8006908 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006900:	6878      	ldr	r0, [r7, #4]
 8006902:	f000 ff91 	bl	8007828 <vPortFree>
	}
 8006906:	e010      	b.n	800692a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800690e:	2b02      	cmp	r3, #2
 8006910:	d00b      	beq.n	800692a <prvDeleteTCB+0x62>
	__asm volatile
 8006912:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006916:	f383 8811 	msr	BASEPRI, r3
 800691a:	f3bf 8f6f 	isb	sy
 800691e:	f3bf 8f4f 	dsb	sy
 8006922:	60fb      	str	r3, [r7, #12]
}
 8006924:	bf00      	nop
 8006926:	bf00      	nop
 8006928:	e7fd      	b.n	8006926 <prvDeleteTCB+0x5e>
	}
 800692a:	bf00      	nop
 800692c:	3710      	adds	r7, #16
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}
	...

08006934 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006934:	b480      	push	{r7}
 8006936:	b083      	sub	sp, #12
 8006938:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800693a:	4b0c      	ldr	r3, [pc, #48]	@ (800696c <prvResetNextTaskUnblockTime+0x38>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d104      	bne.n	800694e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006944:	4b0a      	ldr	r3, [pc, #40]	@ (8006970 <prvResetNextTaskUnblockTime+0x3c>)
 8006946:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800694a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800694c:	e008      	b.n	8006960 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800694e:	4b07      	ldr	r3, [pc, #28]	@ (800696c <prvResetNextTaskUnblockTime+0x38>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	68db      	ldr	r3, [r3, #12]
 8006954:	68db      	ldr	r3, [r3, #12]
 8006956:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	685b      	ldr	r3, [r3, #4]
 800695c:	4a04      	ldr	r2, [pc, #16]	@ (8006970 <prvResetNextTaskUnblockTime+0x3c>)
 800695e:	6013      	str	r3, [r2, #0]
}
 8006960:	bf00      	nop
 8006962:	370c      	adds	r7, #12
 8006964:	46bd      	mov	sp, r7
 8006966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696a:	4770      	bx	lr
 800696c:	20000e8c 	.word	0x20000e8c
 8006970:	20000ef4 	.word	0x20000ef4

08006974 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006974:	b480      	push	{r7}
 8006976:	b083      	sub	sp, #12
 8006978:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800697a:	4b0b      	ldr	r3, [pc, #44]	@ (80069a8 <xTaskGetSchedulerState+0x34>)
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d102      	bne.n	8006988 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006982:	2301      	movs	r3, #1
 8006984:	607b      	str	r3, [r7, #4]
 8006986:	e008      	b.n	800699a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006988:	4b08      	ldr	r3, [pc, #32]	@ (80069ac <xTaskGetSchedulerState+0x38>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d102      	bne.n	8006996 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006990:	2302      	movs	r3, #2
 8006992:	607b      	str	r3, [r7, #4]
 8006994:	e001      	b.n	800699a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006996:	2300      	movs	r3, #0
 8006998:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800699a:	687b      	ldr	r3, [r7, #4]
	}
 800699c:	4618      	mov	r0, r3
 800699e:	370c      	adds	r7, #12
 80069a0:	46bd      	mov	sp, r7
 80069a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a6:	4770      	bx	lr
 80069a8:	20000ee0 	.word	0x20000ee0
 80069ac:	20000efc 	.word	0x20000efc

080069b0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b086      	sub	sp, #24
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80069bc:	2300      	movs	r3, #0
 80069be:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d058      	beq.n	8006a78 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80069c6:	4b2f      	ldr	r3, [pc, #188]	@ (8006a84 <xTaskPriorityDisinherit+0xd4>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	693a      	ldr	r2, [r7, #16]
 80069cc:	429a      	cmp	r2, r3
 80069ce:	d00b      	beq.n	80069e8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80069d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069d4:	f383 8811 	msr	BASEPRI, r3
 80069d8:	f3bf 8f6f 	isb	sy
 80069dc:	f3bf 8f4f 	dsb	sy
 80069e0:	60fb      	str	r3, [r7, #12]
}
 80069e2:	bf00      	nop
 80069e4:	bf00      	nop
 80069e6:	e7fd      	b.n	80069e4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80069e8:	693b      	ldr	r3, [r7, #16]
 80069ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d10b      	bne.n	8006a08 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80069f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069f4:	f383 8811 	msr	BASEPRI, r3
 80069f8:	f3bf 8f6f 	isb	sy
 80069fc:	f3bf 8f4f 	dsb	sy
 8006a00:	60bb      	str	r3, [r7, #8]
}
 8006a02:	bf00      	nop
 8006a04:	bf00      	nop
 8006a06:	e7fd      	b.n	8006a04 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006a08:	693b      	ldr	r3, [r7, #16]
 8006a0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a0c:	1e5a      	subs	r2, r3, #1
 8006a0e:	693b      	ldr	r3, [r7, #16]
 8006a10:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a16:	693b      	ldr	r3, [r7, #16]
 8006a18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a1a:	429a      	cmp	r2, r3
 8006a1c:	d02c      	beq.n	8006a78 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006a1e:	693b      	ldr	r3, [r7, #16]
 8006a20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d128      	bne.n	8006a78 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006a26:	693b      	ldr	r3, [r7, #16]
 8006a28:	3304      	adds	r3, #4
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	f7fe fc26 	bl	800527c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006a30:	693b      	ldr	r3, [r7, #16]
 8006a32:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006a34:	693b      	ldr	r3, [r7, #16]
 8006a36:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a38:	693b      	ldr	r3, [r7, #16]
 8006a3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a3c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006a40:	693b      	ldr	r3, [r7, #16]
 8006a42:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006a44:	693b      	ldr	r3, [r7, #16]
 8006a46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a48:	4b0f      	ldr	r3, [pc, #60]	@ (8006a88 <xTaskPriorityDisinherit+0xd8>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	429a      	cmp	r2, r3
 8006a4e:	d903      	bls.n	8006a58 <xTaskPriorityDisinherit+0xa8>
 8006a50:	693b      	ldr	r3, [r7, #16]
 8006a52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a54:	4a0c      	ldr	r2, [pc, #48]	@ (8006a88 <xTaskPriorityDisinherit+0xd8>)
 8006a56:	6013      	str	r3, [r2, #0]
 8006a58:	693b      	ldr	r3, [r7, #16]
 8006a5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a5c:	4613      	mov	r3, r2
 8006a5e:	009b      	lsls	r3, r3, #2
 8006a60:	4413      	add	r3, r2
 8006a62:	009b      	lsls	r3, r3, #2
 8006a64:	4a09      	ldr	r2, [pc, #36]	@ (8006a8c <xTaskPriorityDisinherit+0xdc>)
 8006a66:	441a      	add	r2, r3
 8006a68:	693b      	ldr	r3, [r7, #16]
 8006a6a:	3304      	adds	r3, #4
 8006a6c:	4619      	mov	r1, r3
 8006a6e:	4610      	mov	r0, r2
 8006a70:	f7fe fba7 	bl	80051c2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006a74:	2301      	movs	r3, #1
 8006a76:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006a78:	697b      	ldr	r3, [r7, #20]
	}
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	3718      	adds	r7, #24
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bd80      	pop	{r7, pc}
 8006a82:	bf00      	nop
 8006a84:	20000a00 	.word	0x20000a00
 8006a88:	20000edc 	.word	0x20000edc
 8006a8c:	20000a04 	.word	0x20000a04

08006a90 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b084      	sub	sp, #16
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
 8006a98:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006a9a:	4b21      	ldr	r3, [pc, #132]	@ (8006b20 <prvAddCurrentTaskToDelayedList+0x90>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006aa0:	4b20      	ldr	r3, [pc, #128]	@ (8006b24 <prvAddCurrentTaskToDelayedList+0x94>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	3304      	adds	r3, #4
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	f7fe fbe8 	bl	800527c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006ab2:	d10a      	bne.n	8006aca <prvAddCurrentTaskToDelayedList+0x3a>
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d007      	beq.n	8006aca <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006aba:	4b1a      	ldr	r3, [pc, #104]	@ (8006b24 <prvAddCurrentTaskToDelayedList+0x94>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	3304      	adds	r3, #4
 8006ac0:	4619      	mov	r1, r3
 8006ac2:	4819      	ldr	r0, [pc, #100]	@ (8006b28 <prvAddCurrentTaskToDelayedList+0x98>)
 8006ac4:	f7fe fb7d 	bl	80051c2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006ac8:	e026      	b.n	8006b18 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006aca:	68fa      	ldr	r2, [r7, #12]
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	4413      	add	r3, r2
 8006ad0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006ad2:	4b14      	ldr	r3, [pc, #80]	@ (8006b24 <prvAddCurrentTaskToDelayedList+0x94>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	68ba      	ldr	r2, [r7, #8]
 8006ad8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006ada:	68ba      	ldr	r2, [r7, #8]
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	429a      	cmp	r2, r3
 8006ae0:	d209      	bcs.n	8006af6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006ae2:	4b12      	ldr	r3, [pc, #72]	@ (8006b2c <prvAddCurrentTaskToDelayedList+0x9c>)
 8006ae4:	681a      	ldr	r2, [r3, #0]
 8006ae6:	4b0f      	ldr	r3, [pc, #60]	@ (8006b24 <prvAddCurrentTaskToDelayedList+0x94>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	3304      	adds	r3, #4
 8006aec:	4619      	mov	r1, r3
 8006aee:	4610      	mov	r0, r2
 8006af0:	f7fe fb8b 	bl	800520a <vListInsert>
}
 8006af4:	e010      	b.n	8006b18 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006af6:	4b0e      	ldr	r3, [pc, #56]	@ (8006b30 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006af8:	681a      	ldr	r2, [r3, #0]
 8006afa:	4b0a      	ldr	r3, [pc, #40]	@ (8006b24 <prvAddCurrentTaskToDelayedList+0x94>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	3304      	adds	r3, #4
 8006b00:	4619      	mov	r1, r3
 8006b02:	4610      	mov	r0, r2
 8006b04:	f7fe fb81 	bl	800520a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006b08:	4b0a      	ldr	r3, [pc, #40]	@ (8006b34 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	68ba      	ldr	r2, [r7, #8]
 8006b0e:	429a      	cmp	r2, r3
 8006b10:	d202      	bcs.n	8006b18 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006b12:	4a08      	ldr	r2, [pc, #32]	@ (8006b34 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006b14:	68bb      	ldr	r3, [r7, #8]
 8006b16:	6013      	str	r3, [r2, #0]
}
 8006b18:	bf00      	nop
 8006b1a:	3710      	adds	r7, #16
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bd80      	pop	{r7, pc}
 8006b20:	20000ed8 	.word	0x20000ed8
 8006b24:	20000a00 	.word	0x20000a00
 8006b28:	20000ec0 	.word	0x20000ec0
 8006b2c:	20000e90 	.word	0x20000e90
 8006b30:	20000e8c 	.word	0x20000e8c
 8006b34:	20000ef4 	.word	0x20000ef4

08006b38 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b08a      	sub	sp, #40	@ 0x28
 8006b3c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006b3e:	2300      	movs	r3, #0
 8006b40:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006b42:	f000 fb13 	bl	800716c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006b46:	4b1d      	ldr	r3, [pc, #116]	@ (8006bbc <xTimerCreateTimerTask+0x84>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d021      	beq.n	8006b92 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006b4e:	2300      	movs	r3, #0
 8006b50:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006b52:	2300      	movs	r3, #0
 8006b54:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006b56:	1d3a      	adds	r2, r7, #4
 8006b58:	f107 0108 	add.w	r1, r7, #8
 8006b5c:	f107 030c 	add.w	r3, r7, #12
 8006b60:	4618      	mov	r0, r3
 8006b62:	f7fe fae7 	bl	8005134 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006b66:	6879      	ldr	r1, [r7, #4]
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	68fa      	ldr	r2, [r7, #12]
 8006b6c:	9202      	str	r2, [sp, #8]
 8006b6e:	9301      	str	r3, [sp, #4]
 8006b70:	2302      	movs	r3, #2
 8006b72:	9300      	str	r3, [sp, #0]
 8006b74:	2300      	movs	r3, #0
 8006b76:	460a      	mov	r2, r1
 8006b78:	4911      	ldr	r1, [pc, #68]	@ (8006bc0 <xTimerCreateTimerTask+0x88>)
 8006b7a:	4812      	ldr	r0, [pc, #72]	@ (8006bc4 <xTimerCreateTimerTask+0x8c>)
 8006b7c:	f7ff f8a2 	bl	8005cc4 <xTaskCreateStatic>
 8006b80:	4603      	mov	r3, r0
 8006b82:	4a11      	ldr	r2, [pc, #68]	@ (8006bc8 <xTimerCreateTimerTask+0x90>)
 8006b84:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006b86:	4b10      	ldr	r3, [pc, #64]	@ (8006bc8 <xTimerCreateTimerTask+0x90>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d001      	beq.n	8006b92 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006b8e:	2301      	movs	r3, #1
 8006b90:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006b92:	697b      	ldr	r3, [r7, #20]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d10b      	bne.n	8006bb0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8006b98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b9c:	f383 8811 	msr	BASEPRI, r3
 8006ba0:	f3bf 8f6f 	isb	sy
 8006ba4:	f3bf 8f4f 	dsb	sy
 8006ba8:	613b      	str	r3, [r7, #16]
}
 8006baa:	bf00      	nop
 8006bac:	bf00      	nop
 8006bae:	e7fd      	b.n	8006bac <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006bb0:	697b      	ldr	r3, [r7, #20]
}
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	3718      	adds	r7, #24
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	bd80      	pop	{r7, pc}
 8006bba:	bf00      	nop
 8006bbc:	20000f30 	.word	0x20000f30
 8006bc0:	08007c78 	.word	0x08007c78
 8006bc4:	08006d05 	.word	0x08006d05
 8006bc8:	20000f34 	.word	0x20000f34

08006bcc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b08a      	sub	sp, #40	@ 0x28
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	60f8      	str	r0, [r7, #12]
 8006bd4:	60b9      	str	r1, [r7, #8]
 8006bd6:	607a      	str	r2, [r7, #4]
 8006bd8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006bda:	2300      	movs	r3, #0
 8006bdc:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d10b      	bne.n	8006bfc <xTimerGenericCommand+0x30>
	__asm volatile
 8006be4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006be8:	f383 8811 	msr	BASEPRI, r3
 8006bec:	f3bf 8f6f 	isb	sy
 8006bf0:	f3bf 8f4f 	dsb	sy
 8006bf4:	623b      	str	r3, [r7, #32]
}
 8006bf6:	bf00      	nop
 8006bf8:	bf00      	nop
 8006bfa:	e7fd      	b.n	8006bf8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006bfc:	4b19      	ldr	r3, [pc, #100]	@ (8006c64 <xTimerGenericCommand+0x98>)
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d02a      	beq.n	8006c5a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	2b05      	cmp	r3, #5
 8006c14:	dc18      	bgt.n	8006c48 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006c16:	f7ff fead 	bl	8006974 <xTaskGetSchedulerState>
 8006c1a:	4603      	mov	r3, r0
 8006c1c:	2b02      	cmp	r3, #2
 8006c1e:	d109      	bne.n	8006c34 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006c20:	4b10      	ldr	r3, [pc, #64]	@ (8006c64 <xTimerGenericCommand+0x98>)
 8006c22:	6818      	ldr	r0, [r3, #0]
 8006c24:	f107 0110 	add.w	r1, r7, #16
 8006c28:	2300      	movs	r3, #0
 8006c2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c2c:	f7fe fc5a 	bl	80054e4 <xQueueGenericSend>
 8006c30:	6278      	str	r0, [r7, #36]	@ 0x24
 8006c32:	e012      	b.n	8006c5a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006c34:	4b0b      	ldr	r3, [pc, #44]	@ (8006c64 <xTimerGenericCommand+0x98>)
 8006c36:	6818      	ldr	r0, [r3, #0]
 8006c38:	f107 0110 	add.w	r1, r7, #16
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	2200      	movs	r2, #0
 8006c40:	f7fe fc50 	bl	80054e4 <xQueueGenericSend>
 8006c44:	6278      	str	r0, [r7, #36]	@ 0x24
 8006c46:	e008      	b.n	8006c5a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006c48:	4b06      	ldr	r3, [pc, #24]	@ (8006c64 <xTimerGenericCommand+0x98>)
 8006c4a:	6818      	ldr	r0, [r3, #0]
 8006c4c:	f107 0110 	add.w	r1, r7, #16
 8006c50:	2300      	movs	r3, #0
 8006c52:	683a      	ldr	r2, [r7, #0]
 8006c54:	f7fe fd48 	bl	80056e8 <xQueueGenericSendFromISR>
 8006c58:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	3728      	adds	r7, #40	@ 0x28
 8006c60:	46bd      	mov	sp, r7
 8006c62:	bd80      	pop	{r7, pc}
 8006c64:	20000f30 	.word	0x20000f30

08006c68 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b088      	sub	sp, #32
 8006c6c:	af02      	add	r7, sp, #8
 8006c6e:	6078      	str	r0, [r7, #4]
 8006c70:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c72:	4b23      	ldr	r3, [pc, #140]	@ (8006d00 <prvProcessExpiredTimer+0x98>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	68db      	ldr	r3, [r3, #12]
 8006c78:	68db      	ldr	r3, [r3, #12]
 8006c7a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006c7c:	697b      	ldr	r3, [r7, #20]
 8006c7e:	3304      	adds	r3, #4
 8006c80:	4618      	mov	r0, r3
 8006c82:	f7fe fafb 	bl	800527c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006c86:	697b      	ldr	r3, [r7, #20]
 8006c88:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006c8c:	f003 0304 	and.w	r3, r3, #4
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d023      	beq.n	8006cdc <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006c94:	697b      	ldr	r3, [r7, #20]
 8006c96:	699a      	ldr	r2, [r3, #24]
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	18d1      	adds	r1, r2, r3
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	683a      	ldr	r2, [r7, #0]
 8006ca0:	6978      	ldr	r0, [r7, #20]
 8006ca2:	f000 f8d5 	bl	8006e50 <prvInsertTimerInActiveList>
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d020      	beq.n	8006cee <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006cac:	2300      	movs	r3, #0
 8006cae:	9300      	str	r3, [sp, #0]
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	687a      	ldr	r2, [r7, #4]
 8006cb4:	2100      	movs	r1, #0
 8006cb6:	6978      	ldr	r0, [r7, #20]
 8006cb8:	f7ff ff88 	bl	8006bcc <xTimerGenericCommand>
 8006cbc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006cbe:	693b      	ldr	r3, [r7, #16]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d114      	bne.n	8006cee <prvProcessExpiredTimer+0x86>
	__asm volatile
 8006cc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cc8:	f383 8811 	msr	BASEPRI, r3
 8006ccc:	f3bf 8f6f 	isb	sy
 8006cd0:	f3bf 8f4f 	dsb	sy
 8006cd4:	60fb      	str	r3, [r7, #12]
}
 8006cd6:	bf00      	nop
 8006cd8:	bf00      	nop
 8006cda:	e7fd      	b.n	8006cd8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006cdc:	697b      	ldr	r3, [r7, #20]
 8006cde:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006ce2:	f023 0301 	bic.w	r3, r3, #1
 8006ce6:	b2da      	uxtb	r2, r3
 8006ce8:	697b      	ldr	r3, [r7, #20]
 8006cea:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006cee:	697b      	ldr	r3, [r7, #20]
 8006cf0:	6a1b      	ldr	r3, [r3, #32]
 8006cf2:	6978      	ldr	r0, [r7, #20]
 8006cf4:	4798      	blx	r3
}
 8006cf6:	bf00      	nop
 8006cf8:	3718      	adds	r7, #24
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	bd80      	pop	{r7, pc}
 8006cfe:	bf00      	nop
 8006d00:	20000f28 	.word	0x20000f28

08006d04 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b084      	sub	sp, #16
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006d0c:	f107 0308 	add.w	r3, r7, #8
 8006d10:	4618      	mov	r0, r3
 8006d12:	f000 f859 	bl	8006dc8 <prvGetNextExpireTime>
 8006d16:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	4619      	mov	r1, r3
 8006d1c:	68f8      	ldr	r0, [r7, #12]
 8006d1e:	f000 f805 	bl	8006d2c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006d22:	f000 f8d7 	bl	8006ed4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006d26:	bf00      	nop
 8006d28:	e7f0      	b.n	8006d0c <prvTimerTask+0x8>
	...

08006d2c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b084      	sub	sp, #16
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
 8006d34:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006d36:	f7ff fa29 	bl	800618c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006d3a:	f107 0308 	add.w	r3, r7, #8
 8006d3e:	4618      	mov	r0, r3
 8006d40:	f000 f866 	bl	8006e10 <prvSampleTimeNow>
 8006d44:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d130      	bne.n	8006dae <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d10a      	bne.n	8006d68 <prvProcessTimerOrBlockTask+0x3c>
 8006d52:	687a      	ldr	r2, [r7, #4]
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	429a      	cmp	r2, r3
 8006d58:	d806      	bhi.n	8006d68 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006d5a:	f7ff fa25 	bl	80061a8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006d5e:	68f9      	ldr	r1, [r7, #12]
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	f7ff ff81 	bl	8006c68 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006d66:	e024      	b.n	8006db2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d008      	beq.n	8006d80 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006d6e:	4b13      	ldr	r3, [pc, #76]	@ (8006dbc <prvProcessTimerOrBlockTask+0x90>)
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d101      	bne.n	8006d7c <prvProcessTimerOrBlockTask+0x50>
 8006d78:	2301      	movs	r3, #1
 8006d7a:	e000      	b.n	8006d7e <prvProcessTimerOrBlockTask+0x52>
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006d80:	4b0f      	ldr	r3, [pc, #60]	@ (8006dc0 <prvProcessTimerOrBlockTask+0x94>)
 8006d82:	6818      	ldr	r0, [r3, #0]
 8006d84:	687a      	ldr	r2, [r7, #4]
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	1ad3      	subs	r3, r2, r3
 8006d8a:	683a      	ldr	r2, [r7, #0]
 8006d8c:	4619      	mov	r1, r3
 8006d8e:	f7fe ff65 	bl	8005c5c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006d92:	f7ff fa09 	bl	80061a8 <xTaskResumeAll>
 8006d96:	4603      	mov	r3, r0
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d10a      	bne.n	8006db2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006d9c:	4b09      	ldr	r3, [pc, #36]	@ (8006dc4 <prvProcessTimerOrBlockTask+0x98>)
 8006d9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006da2:	601a      	str	r2, [r3, #0]
 8006da4:	f3bf 8f4f 	dsb	sy
 8006da8:	f3bf 8f6f 	isb	sy
}
 8006dac:	e001      	b.n	8006db2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006dae:	f7ff f9fb 	bl	80061a8 <xTaskResumeAll>
}
 8006db2:	bf00      	nop
 8006db4:	3710      	adds	r7, #16
 8006db6:	46bd      	mov	sp, r7
 8006db8:	bd80      	pop	{r7, pc}
 8006dba:	bf00      	nop
 8006dbc:	20000f2c 	.word	0x20000f2c
 8006dc0:	20000f30 	.word	0x20000f30
 8006dc4:	e000ed04 	.word	0xe000ed04

08006dc8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006dc8:	b480      	push	{r7}
 8006dca:	b085      	sub	sp, #20
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006dd0:	4b0e      	ldr	r3, [pc, #56]	@ (8006e0c <prvGetNextExpireTime+0x44>)
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d101      	bne.n	8006dde <prvGetNextExpireTime+0x16>
 8006dda:	2201      	movs	r2, #1
 8006ddc:	e000      	b.n	8006de0 <prvGetNextExpireTime+0x18>
 8006dde:	2200      	movs	r2, #0
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d105      	bne.n	8006df8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006dec:	4b07      	ldr	r3, [pc, #28]	@ (8006e0c <prvGetNextExpireTime+0x44>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	68db      	ldr	r3, [r3, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	60fb      	str	r3, [r7, #12]
 8006df6:	e001      	b.n	8006dfc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006df8:	2300      	movs	r3, #0
 8006dfa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
}
 8006dfe:	4618      	mov	r0, r3
 8006e00:	3714      	adds	r7, #20
 8006e02:	46bd      	mov	sp, r7
 8006e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e08:	4770      	bx	lr
 8006e0a:	bf00      	nop
 8006e0c:	20000f28 	.word	0x20000f28

08006e10 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b084      	sub	sp, #16
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006e18:	f7ff fa64 	bl	80062e4 <xTaskGetTickCount>
 8006e1c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006e1e:	4b0b      	ldr	r3, [pc, #44]	@ (8006e4c <prvSampleTimeNow+0x3c>)
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	68fa      	ldr	r2, [r7, #12]
 8006e24:	429a      	cmp	r2, r3
 8006e26:	d205      	bcs.n	8006e34 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006e28:	f000 f93a 	bl	80070a0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2201      	movs	r2, #1
 8006e30:	601a      	str	r2, [r3, #0]
 8006e32:	e002      	b.n	8006e3a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2200      	movs	r2, #0
 8006e38:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006e3a:	4a04      	ldr	r2, [pc, #16]	@ (8006e4c <prvSampleTimeNow+0x3c>)
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006e40:	68fb      	ldr	r3, [r7, #12]
}
 8006e42:	4618      	mov	r0, r3
 8006e44:	3710      	adds	r7, #16
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd80      	pop	{r7, pc}
 8006e4a:	bf00      	nop
 8006e4c:	20000f38 	.word	0x20000f38

08006e50 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b086      	sub	sp, #24
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	60f8      	str	r0, [r7, #12]
 8006e58:	60b9      	str	r1, [r7, #8]
 8006e5a:	607a      	str	r2, [r7, #4]
 8006e5c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006e5e:	2300      	movs	r3, #0
 8006e60:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	68ba      	ldr	r2, [r7, #8]
 8006e66:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	68fa      	ldr	r2, [r7, #12]
 8006e6c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006e6e:	68ba      	ldr	r2, [r7, #8]
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	429a      	cmp	r2, r3
 8006e74:	d812      	bhi.n	8006e9c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e76:	687a      	ldr	r2, [r7, #4]
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	1ad2      	subs	r2, r2, r3
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	699b      	ldr	r3, [r3, #24]
 8006e80:	429a      	cmp	r2, r3
 8006e82:	d302      	bcc.n	8006e8a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006e84:	2301      	movs	r3, #1
 8006e86:	617b      	str	r3, [r7, #20]
 8006e88:	e01b      	b.n	8006ec2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006e8a:	4b10      	ldr	r3, [pc, #64]	@ (8006ecc <prvInsertTimerInActiveList+0x7c>)
 8006e8c:	681a      	ldr	r2, [r3, #0]
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	3304      	adds	r3, #4
 8006e92:	4619      	mov	r1, r3
 8006e94:	4610      	mov	r0, r2
 8006e96:	f7fe f9b8 	bl	800520a <vListInsert>
 8006e9a:	e012      	b.n	8006ec2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006e9c:	687a      	ldr	r2, [r7, #4]
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	429a      	cmp	r2, r3
 8006ea2:	d206      	bcs.n	8006eb2 <prvInsertTimerInActiveList+0x62>
 8006ea4:	68ba      	ldr	r2, [r7, #8]
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	429a      	cmp	r2, r3
 8006eaa:	d302      	bcc.n	8006eb2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006eac:	2301      	movs	r3, #1
 8006eae:	617b      	str	r3, [r7, #20]
 8006eb0:	e007      	b.n	8006ec2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006eb2:	4b07      	ldr	r3, [pc, #28]	@ (8006ed0 <prvInsertTimerInActiveList+0x80>)
 8006eb4:	681a      	ldr	r2, [r3, #0]
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	3304      	adds	r3, #4
 8006eba:	4619      	mov	r1, r3
 8006ebc:	4610      	mov	r0, r2
 8006ebe:	f7fe f9a4 	bl	800520a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006ec2:	697b      	ldr	r3, [r7, #20]
}
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	3718      	adds	r7, #24
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	bd80      	pop	{r7, pc}
 8006ecc:	20000f2c 	.word	0x20000f2c
 8006ed0:	20000f28 	.word	0x20000f28

08006ed4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b08e      	sub	sp, #56	@ 0x38
 8006ed8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006eda:	e0ce      	b.n	800707a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	da19      	bge.n	8006f16 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006ee2:	1d3b      	adds	r3, r7, #4
 8006ee4:	3304      	adds	r3, #4
 8006ee6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006ee8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d10b      	bne.n	8006f06 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8006eee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ef2:	f383 8811 	msr	BASEPRI, r3
 8006ef6:	f3bf 8f6f 	isb	sy
 8006efa:	f3bf 8f4f 	dsb	sy
 8006efe:	61fb      	str	r3, [r7, #28]
}
 8006f00:	bf00      	nop
 8006f02:	bf00      	nop
 8006f04:	e7fd      	b.n	8006f02 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006f06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006f0c:	6850      	ldr	r0, [r2, #4]
 8006f0e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006f10:	6892      	ldr	r2, [r2, #8]
 8006f12:	4611      	mov	r1, r2
 8006f14:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	f2c0 80ae 	blt.w	800707a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006f22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f24:	695b      	ldr	r3, [r3, #20]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d004      	beq.n	8006f34 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006f2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f2c:	3304      	adds	r3, #4
 8006f2e:	4618      	mov	r0, r3
 8006f30:	f7fe f9a4 	bl	800527c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006f34:	463b      	mov	r3, r7
 8006f36:	4618      	mov	r0, r3
 8006f38:	f7ff ff6a 	bl	8006e10 <prvSampleTimeNow>
 8006f3c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2b09      	cmp	r3, #9
 8006f42:	f200 8097 	bhi.w	8007074 <prvProcessReceivedCommands+0x1a0>
 8006f46:	a201      	add	r2, pc, #4	@ (adr r2, 8006f4c <prvProcessReceivedCommands+0x78>)
 8006f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f4c:	08006f75 	.word	0x08006f75
 8006f50:	08006f75 	.word	0x08006f75
 8006f54:	08006f75 	.word	0x08006f75
 8006f58:	08006feb 	.word	0x08006feb
 8006f5c:	08006fff 	.word	0x08006fff
 8006f60:	0800704b 	.word	0x0800704b
 8006f64:	08006f75 	.word	0x08006f75
 8006f68:	08006f75 	.word	0x08006f75
 8006f6c:	08006feb 	.word	0x08006feb
 8006f70:	08006fff 	.word	0x08006fff
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006f74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f76:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006f7a:	f043 0301 	orr.w	r3, r3, #1
 8006f7e:	b2da      	uxtb	r2, r3
 8006f80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f82:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006f86:	68ba      	ldr	r2, [r7, #8]
 8006f88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f8a:	699b      	ldr	r3, [r3, #24]
 8006f8c:	18d1      	adds	r1, r2, r3
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f92:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006f94:	f7ff ff5c 	bl	8006e50 <prvInsertTimerInActiveList>
 8006f98:	4603      	mov	r3, r0
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d06c      	beq.n	8007078 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006f9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fa0:	6a1b      	ldr	r3, [r3, #32]
 8006fa2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006fa4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006fa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fa8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006fac:	f003 0304 	and.w	r3, r3, #4
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d061      	beq.n	8007078 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006fb4:	68ba      	ldr	r2, [r7, #8]
 8006fb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fb8:	699b      	ldr	r3, [r3, #24]
 8006fba:	441a      	add	r2, r3
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	9300      	str	r3, [sp, #0]
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	2100      	movs	r1, #0
 8006fc4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006fc6:	f7ff fe01 	bl	8006bcc <xTimerGenericCommand>
 8006fca:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006fcc:	6a3b      	ldr	r3, [r7, #32]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d152      	bne.n	8007078 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8006fd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fd6:	f383 8811 	msr	BASEPRI, r3
 8006fda:	f3bf 8f6f 	isb	sy
 8006fde:	f3bf 8f4f 	dsb	sy
 8006fe2:	61bb      	str	r3, [r7, #24]
}
 8006fe4:	bf00      	nop
 8006fe6:	bf00      	nop
 8006fe8:	e7fd      	b.n	8006fe6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006fea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006ff0:	f023 0301 	bic.w	r3, r3, #1
 8006ff4:	b2da      	uxtb	r2, r3
 8006ff6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ff8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006ffc:	e03d      	b.n	800707a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006ffe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007000:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007004:	f043 0301 	orr.w	r3, r3, #1
 8007008:	b2da      	uxtb	r2, r3
 800700a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800700c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007010:	68ba      	ldr	r2, [r7, #8]
 8007012:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007014:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007016:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007018:	699b      	ldr	r3, [r3, #24]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d10b      	bne.n	8007036 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800701e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007022:	f383 8811 	msr	BASEPRI, r3
 8007026:	f3bf 8f6f 	isb	sy
 800702a:	f3bf 8f4f 	dsb	sy
 800702e:	617b      	str	r3, [r7, #20]
}
 8007030:	bf00      	nop
 8007032:	bf00      	nop
 8007034:	e7fd      	b.n	8007032 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007036:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007038:	699a      	ldr	r2, [r3, #24]
 800703a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800703c:	18d1      	adds	r1, r2, r3
 800703e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007040:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007042:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007044:	f7ff ff04 	bl	8006e50 <prvInsertTimerInActiveList>
					break;
 8007048:	e017      	b.n	800707a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800704a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800704c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007050:	f003 0302 	and.w	r3, r3, #2
 8007054:	2b00      	cmp	r3, #0
 8007056:	d103      	bne.n	8007060 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8007058:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800705a:	f000 fbe5 	bl	8007828 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800705e:	e00c      	b.n	800707a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007060:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007062:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007066:	f023 0301 	bic.w	r3, r3, #1
 800706a:	b2da      	uxtb	r2, r3
 800706c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800706e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007072:	e002      	b.n	800707a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8007074:	bf00      	nop
 8007076:	e000      	b.n	800707a <prvProcessReceivedCommands+0x1a6>
					break;
 8007078:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800707a:	4b08      	ldr	r3, [pc, #32]	@ (800709c <prvProcessReceivedCommands+0x1c8>)
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	1d39      	adds	r1, r7, #4
 8007080:	2200      	movs	r2, #0
 8007082:	4618      	mov	r0, r3
 8007084:	f7fe fbce 	bl	8005824 <xQueueReceive>
 8007088:	4603      	mov	r3, r0
 800708a:	2b00      	cmp	r3, #0
 800708c:	f47f af26 	bne.w	8006edc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007090:	bf00      	nop
 8007092:	bf00      	nop
 8007094:	3730      	adds	r7, #48	@ 0x30
 8007096:	46bd      	mov	sp, r7
 8007098:	bd80      	pop	{r7, pc}
 800709a:	bf00      	nop
 800709c:	20000f30 	.word	0x20000f30

080070a0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b088      	sub	sp, #32
 80070a4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80070a6:	e049      	b.n	800713c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80070a8:	4b2e      	ldr	r3, [pc, #184]	@ (8007164 <prvSwitchTimerLists+0xc4>)
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	68db      	ldr	r3, [r3, #12]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80070b2:	4b2c      	ldr	r3, [pc, #176]	@ (8007164 <prvSwitchTimerLists+0xc4>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	68db      	ldr	r3, [r3, #12]
 80070b8:	68db      	ldr	r3, [r3, #12]
 80070ba:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	3304      	adds	r3, #4
 80070c0:	4618      	mov	r0, r3
 80070c2:	f7fe f8db 	bl	800527c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	6a1b      	ldr	r3, [r3, #32]
 80070ca:	68f8      	ldr	r0, [r7, #12]
 80070cc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80070d4:	f003 0304 	and.w	r3, r3, #4
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d02f      	beq.n	800713c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	699b      	ldr	r3, [r3, #24]
 80070e0:	693a      	ldr	r2, [r7, #16]
 80070e2:	4413      	add	r3, r2
 80070e4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80070e6:	68ba      	ldr	r2, [r7, #8]
 80070e8:	693b      	ldr	r3, [r7, #16]
 80070ea:	429a      	cmp	r2, r3
 80070ec:	d90e      	bls.n	800710c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	68ba      	ldr	r2, [r7, #8]
 80070f2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	68fa      	ldr	r2, [r7, #12]
 80070f8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80070fa:	4b1a      	ldr	r3, [pc, #104]	@ (8007164 <prvSwitchTimerLists+0xc4>)
 80070fc:	681a      	ldr	r2, [r3, #0]
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	3304      	adds	r3, #4
 8007102:	4619      	mov	r1, r3
 8007104:	4610      	mov	r0, r2
 8007106:	f7fe f880 	bl	800520a <vListInsert>
 800710a:	e017      	b.n	800713c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800710c:	2300      	movs	r3, #0
 800710e:	9300      	str	r3, [sp, #0]
 8007110:	2300      	movs	r3, #0
 8007112:	693a      	ldr	r2, [r7, #16]
 8007114:	2100      	movs	r1, #0
 8007116:	68f8      	ldr	r0, [r7, #12]
 8007118:	f7ff fd58 	bl	8006bcc <xTimerGenericCommand>
 800711c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d10b      	bne.n	800713c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8007124:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007128:	f383 8811 	msr	BASEPRI, r3
 800712c:	f3bf 8f6f 	isb	sy
 8007130:	f3bf 8f4f 	dsb	sy
 8007134:	603b      	str	r3, [r7, #0]
}
 8007136:	bf00      	nop
 8007138:	bf00      	nop
 800713a:	e7fd      	b.n	8007138 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800713c:	4b09      	ldr	r3, [pc, #36]	@ (8007164 <prvSwitchTimerLists+0xc4>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d1b0      	bne.n	80070a8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007146:	4b07      	ldr	r3, [pc, #28]	@ (8007164 <prvSwitchTimerLists+0xc4>)
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800714c:	4b06      	ldr	r3, [pc, #24]	@ (8007168 <prvSwitchTimerLists+0xc8>)
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	4a04      	ldr	r2, [pc, #16]	@ (8007164 <prvSwitchTimerLists+0xc4>)
 8007152:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007154:	4a04      	ldr	r2, [pc, #16]	@ (8007168 <prvSwitchTimerLists+0xc8>)
 8007156:	697b      	ldr	r3, [r7, #20]
 8007158:	6013      	str	r3, [r2, #0]
}
 800715a:	bf00      	nop
 800715c:	3718      	adds	r7, #24
 800715e:	46bd      	mov	sp, r7
 8007160:	bd80      	pop	{r7, pc}
 8007162:	bf00      	nop
 8007164:	20000f28 	.word	0x20000f28
 8007168:	20000f2c 	.word	0x20000f2c

0800716c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b082      	sub	sp, #8
 8007170:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007172:	f000 f969 	bl	8007448 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007176:	4b15      	ldr	r3, [pc, #84]	@ (80071cc <prvCheckForValidListAndQueue+0x60>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d120      	bne.n	80071c0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800717e:	4814      	ldr	r0, [pc, #80]	@ (80071d0 <prvCheckForValidListAndQueue+0x64>)
 8007180:	f7fd fff2 	bl	8005168 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007184:	4813      	ldr	r0, [pc, #76]	@ (80071d4 <prvCheckForValidListAndQueue+0x68>)
 8007186:	f7fd ffef 	bl	8005168 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800718a:	4b13      	ldr	r3, [pc, #76]	@ (80071d8 <prvCheckForValidListAndQueue+0x6c>)
 800718c:	4a10      	ldr	r2, [pc, #64]	@ (80071d0 <prvCheckForValidListAndQueue+0x64>)
 800718e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007190:	4b12      	ldr	r3, [pc, #72]	@ (80071dc <prvCheckForValidListAndQueue+0x70>)
 8007192:	4a10      	ldr	r2, [pc, #64]	@ (80071d4 <prvCheckForValidListAndQueue+0x68>)
 8007194:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007196:	2300      	movs	r3, #0
 8007198:	9300      	str	r3, [sp, #0]
 800719a:	4b11      	ldr	r3, [pc, #68]	@ (80071e0 <prvCheckForValidListAndQueue+0x74>)
 800719c:	4a11      	ldr	r2, [pc, #68]	@ (80071e4 <prvCheckForValidListAndQueue+0x78>)
 800719e:	2110      	movs	r1, #16
 80071a0:	200a      	movs	r0, #10
 80071a2:	f7fe f8ff 	bl	80053a4 <xQueueGenericCreateStatic>
 80071a6:	4603      	mov	r3, r0
 80071a8:	4a08      	ldr	r2, [pc, #32]	@ (80071cc <prvCheckForValidListAndQueue+0x60>)
 80071aa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80071ac:	4b07      	ldr	r3, [pc, #28]	@ (80071cc <prvCheckForValidListAndQueue+0x60>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d005      	beq.n	80071c0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80071b4:	4b05      	ldr	r3, [pc, #20]	@ (80071cc <prvCheckForValidListAndQueue+0x60>)
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	490b      	ldr	r1, [pc, #44]	@ (80071e8 <prvCheckForValidListAndQueue+0x7c>)
 80071ba:	4618      	mov	r0, r3
 80071bc:	f7fe fd24 	bl	8005c08 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80071c0:	f000 f974 	bl	80074ac <vPortExitCritical>
}
 80071c4:	bf00      	nop
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bd80      	pop	{r7, pc}
 80071ca:	bf00      	nop
 80071cc:	20000f30 	.word	0x20000f30
 80071d0:	20000f00 	.word	0x20000f00
 80071d4:	20000f14 	.word	0x20000f14
 80071d8:	20000f28 	.word	0x20000f28
 80071dc:	20000f2c 	.word	0x20000f2c
 80071e0:	20000fdc 	.word	0x20000fdc
 80071e4:	20000f3c 	.word	0x20000f3c
 80071e8:	08007c80 	.word	0x08007c80

080071ec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80071ec:	b480      	push	{r7}
 80071ee:	b085      	sub	sp, #20
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	60f8      	str	r0, [r7, #12]
 80071f4:	60b9      	str	r1, [r7, #8]
 80071f6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	3b04      	subs	r3, #4
 80071fc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007204:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	3b04      	subs	r3, #4
 800720a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800720c:	68bb      	ldr	r3, [r7, #8]
 800720e:	f023 0201 	bic.w	r2, r3, #1
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	3b04      	subs	r3, #4
 800721a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800721c:	4a0c      	ldr	r2, [pc, #48]	@ (8007250 <pxPortInitialiseStack+0x64>)
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	3b14      	subs	r3, #20
 8007226:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007228:	687a      	ldr	r2, [r7, #4]
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	3b04      	subs	r3, #4
 8007232:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	f06f 0202 	mvn.w	r2, #2
 800723a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	3b20      	subs	r3, #32
 8007240:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007242:	68fb      	ldr	r3, [r7, #12]
}
 8007244:	4618      	mov	r0, r3
 8007246:	3714      	adds	r7, #20
 8007248:	46bd      	mov	sp, r7
 800724a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724e:	4770      	bx	lr
 8007250:	08007255 	.word	0x08007255

08007254 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007254:	b480      	push	{r7}
 8007256:	b085      	sub	sp, #20
 8007258:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800725a:	2300      	movs	r3, #0
 800725c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800725e:	4b13      	ldr	r3, [pc, #76]	@ (80072ac <prvTaskExitError+0x58>)
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007266:	d00b      	beq.n	8007280 <prvTaskExitError+0x2c>
	__asm volatile
 8007268:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800726c:	f383 8811 	msr	BASEPRI, r3
 8007270:	f3bf 8f6f 	isb	sy
 8007274:	f3bf 8f4f 	dsb	sy
 8007278:	60fb      	str	r3, [r7, #12]
}
 800727a:	bf00      	nop
 800727c:	bf00      	nop
 800727e:	e7fd      	b.n	800727c <prvTaskExitError+0x28>
	__asm volatile
 8007280:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007284:	f383 8811 	msr	BASEPRI, r3
 8007288:	f3bf 8f6f 	isb	sy
 800728c:	f3bf 8f4f 	dsb	sy
 8007290:	60bb      	str	r3, [r7, #8]
}
 8007292:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007294:	bf00      	nop
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d0fc      	beq.n	8007296 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800729c:	bf00      	nop
 800729e:	bf00      	nop
 80072a0:	3714      	adds	r7, #20
 80072a2:	46bd      	mov	sp, r7
 80072a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a8:	4770      	bx	lr
 80072aa:	bf00      	nop
 80072ac:	2000000c 	.word	0x2000000c

080072b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80072b0:	4b07      	ldr	r3, [pc, #28]	@ (80072d0 <pxCurrentTCBConst2>)
 80072b2:	6819      	ldr	r1, [r3, #0]
 80072b4:	6808      	ldr	r0, [r1, #0]
 80072b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072ba:	f380 8809 	msr	PSP, r0
 80072be:	f3bf 8f6f 	isb	sy
 80072c2:	f04f 0000 	mov.w	r0, #0
 80072c6:	f380 8811 	msr	BASEPRI, r0
 80072ca:	4770      	bx	lr
 80072cc:	f3af 8000 	nop.w

080072d0 <pxCurrentTCBConst2>:
 80072d0:	20000a00 	.word	0x20000a00
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80072d4:	bf00      	nop
 80072d6:	bf00      	nop

080072d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80072d8:	4808      	ldr	r0, [pc, #32]	@ (80072fc <prvPortStartFirstTask+0x24>)
 80072da:	6800      	ldr	r0, [r0, #0]
 80072dc:	6800      	ldr	r0, [r0, #0]
 80072de:	f380 8808 	msr	MSP, r0
 80072e2:	f04f 0000 	mov.w	r0, #0
 80072e6:	f380 8814 	msr	CONTROL, r0
 80072ea:	b662      	cpsie	i
 80072ec:	b661      	cpsie	f
 80072ee:	f3bf 8f4f 	dsb	sy
 80072f2:	f3bf 8f6f 	isb	sy
 80072f6:	df00      	svc	0
 80072f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80072fa:	bf00      	nop
 80072fc:	e000ed08 	.word	0xe000ed08

08007300 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b086      	sub	sp, #24
 8007304:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007306:	4b47      	ldr	r3, [pc, #284]	@ (8007424 <xPortStartScheduler+0x124>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	4a47      	ldr	r2, [pc, #284]	@ (8007428 <xPortStartScheduler+0x128>)
 800730c:	4293      	cmp	r3, r2
 800730e:	d10b      	bne.n	8007328 <xPortStartScheduler+0x28>
	__asm volatile
 8007310:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007314:	f383 8811 	msr	BASEPRI, r3
 8007318:	f3bf 8f6f 	isb	sy
 800731c:	f3bf 8f4f 	dsb	sy
 8007320:	613b      	str	r3, [r7, #16]
}
 8007322:	bf00      	nop
 8007324:	bf00      	nop
 8007326:	e7fd      	b.n	8007324 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007328:	4b3e      	ldr	r3, [pc, #248]	@ (8007424 <xPortStartScheduler+0x124>)
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	4a3f      	ldr	r2, [pc, #252]	@ (800742c <xPortStartScheduler+0x12c>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d10b      	bne.n	800734a <xPortStartScheduler+0x4a>
	__asm volatile
 8007332:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007336:	f383 8811 	msr	BASEPRI, r3
 800733a:	f3bf 8f6f 	isb	sy
 800733e:	f3bf 8f4f 	dsb	sy
 8007342:	60fb      	str	r3, [r7, #12]
}
 8007344:	bf00      	nop
 8007346:	bf00      	nop
 8007348:	e7fd      	b.n	8007346 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800734a:	4b39      	ldr	r3, [pc, #228]	@ (8007430 <xPortStartScheduler+0x130>)
 800734c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800734e:	697b      	ldr	r3, [r7, #20]
 8007350:	781b      	ldrb	r3, [r3, #0]
 8007352:	b2db      	uxtb	r3, r3
 8007354:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007356:	697b      	ldr	r3, [r7, #20]
 8007358:	22ff      	movs	r2, #255	@ 0xff
 800735a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800735c:	697b      	ldr	r3, [r7, #20]
 800735e:	781b      	ldrb	r3, [r3, #0]
 8007360:	b2db      	uxtb	r3, r3
 8007362:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007364:	78fb      	ldrb	r3, [r7, #3]
 8007366:	b2db      	uxtb	r3, r3
 8007368:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800736c:	b2da      	uxtb	r2, r3
 800736e:	4b31      	ldr	r3, [pc, #196]	@ (8007434 <xPortStartScheduler+0x134>)
 8007370:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007372:	4b31      	ldr	r3, [pc, #196]	@ (8007438 <xPortStartScheduler+0x138>)
 8007374:	2207      	movs	r2, #7
 8007376:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007378:	e009      	b.n	800738e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800737a:	4b2f      	ldr	r3, [pc, #188]	@ (8007438 <xPortStartScheduler+0x138>)
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	3b01      	subs	r3, #1
 8007380:	4a2d      	ldr	r2, [pc, #180]	@ (8007438 <xPortStartScheduler+0x138>)
 8007382:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007384:	78fb      	ldrb	r3, [r7, #3]
 8007386:	b2db      	uxtb	r3, r3
 8007388:	005b      	lsls	r3, r3, #1
 800738a:	b2db      	uxtb	r3, r3
 800738c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800738e:	78fb      	ldrb	r3, [r7, #3]
 8007390:	b2db      	uxtb	r3, r3
 8007392:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007396:	2b80      	cmp	r3, #128	@ 0x80
 8007398:	d0ef      	beq.n	800737a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800739a:	4b27      	ldr	r3, [pc, #156]	@ (8007438 <xPortStartScheduler+0x138>)
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f1c3 0307 	rsb	r3, r3, #7
 80073a2:	2b04      	cmp	r3, #4
 80073a4:	d00b      	beq.n	80073be <xPortStartScheduler+0xbe>
	__asm volatile
 80073a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073aa:	f383 8811 	msr	BASEPRI, r3
 80073ae:	f3bf 8f6f 	isb	sy
 80073b2:	f3bf 8f4f 	dsb	sy
 80073b6:	60bb      	str	r3, [r7, #8]
}
 80073b8:	bf00      	nop
 80073ba:	bf00      	nop
 80073bc:	e7fd      	b.n	80073ba <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80073be:	4b1e      	ldr	r3, [pc, #120]	@ (8007438 <xPortStartScheduler+0x138>)
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	021b      	lsls	r3, r3, #8
 80073c4:	4a1c      	ldr	r2, [pc, #112]	@ (8007438 <xPortStartScheduler+0x138>)
 80073c6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80073c8:	4b1b      	ldr	r3, [pc, #108]	@ (8007438 <xPortStartScheduler+0x138>)
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80073d0:	4a19      	ldr	r2, [pc, #100]	@ (8007438 <xPortStartScheduler+0x138>)
 80073d2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	b2da      	uxtb	r2, r3
 80073d8:	697b      	ldr	r3, [r7, #20]
 80073da:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80073dc:	4b17      	ldr	r3, [pc, #92]	@ (800743c <xPortStartScheduler+0x13c>)
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	4a16      	ldr	r2, [pc, #88]	@ (800743c <xPortStartScheduler+0x13c>)
 80073e2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80073e6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80073e8:	4b14      	ldr	r3, [pc, #80]	@ (800743c <xPortStartScheduler+0x13c>)
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	4a13      	ldr	r2, [pc, #76]	@ (800743c <xPortStartScheduler+0x13c>)
 80073ee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80073f2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80073f4:	f000 f8da 	bl	80075ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80073f8:	4b11      	ldr	r3, [pc, #68]	@ (8007440 <xPortStartScheduler+0x140>)
 80073fa:	2200      	movs	r2, #0
 80073fc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80073fe:	f000 f8f9 	bl	80075f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007402:	4b10      	ldr	r3, [pc, #64]	@ (8007444 <xPortStartScheduler+0x144>)
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	4a0f      	ldr	r2, [pc, #60]	@ (8007444 <xPortStartScheduler+0x144>)
 8007408:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800740c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800740e:	f7ff ff63 	bl	80072d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007412:	f7ff f831 	bl	8006478 <vTaskSwitchContext>
	prvTaskExitError();
 8007416:	f7ff ff1d 	bl	8007254 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800741a:	2300      	movs	r3, #0
}
 800741c:	4618      	mov	r0, r3
 800741e:	3718      	adds	r7, #24
 8007420:	46bd      	mov	sp, r7
 8007422:	bd80      	pop	{r7, pc}
 8007424:	e000ed00 	.word	0xe000ed00
 8007428:	410fc271 	.word	0x410fc271
 800742c:	410fc270 	.word	0x410fc270
 8007430:	e000e400 	.word	0xe000e400
 8007434:	2000102c 	.word	0x2000102c
 8007438:	20001030 	.word	0x20001030
 800743c:	e000ed20 	.word	0xe000ed20
 8007440:	2000000c 	.word	0x2000000c
 8007444:	e000ef34 	.word	0xe000ef34

08007448 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007448:	b480      	push	{r7}
 800744a:	b083      	sub	sp, #12
 800744c:	af00      	add	r7, sp, #0
	__asm volatile
 800744e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007452:	f383 8811 	msr	BASEPRI, r3
 8007456:	f3bf 8f6f 	isb	sy
 800745a:	f3bf 8f4f 	dsb	sy
 800745e:	607b      	str	r3, [r7, #4]
}
 8007460:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007462:	4b10      	ldr	r3, [pc, #64]	@ (80074a4 <vPortEnterCritical+0x5c>)
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	3301      	adds	r3, #1
 8007468:	4a0e      	ldr	r2, [pc, #56]	@ (80074a4 <vPortEnterCritical+0x5c>)
 800746a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800746c:	4b0d      	ldr	r3, [pc, #52]	@ (80074a4 <vPortEnterCritical+0x5c>)
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	2b01      	cmp	r3, #1
 8007472:	d110      	bne.n	8007496 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007474:	4b0c      	ldr	r3, [pc, #48]	@ (80074a8 <vPortEnterCritical+0x60>)
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	b2db      	uxtb	r3, r3
 800747a:	2b00      	cmp	r3, #0
 800747c:	d00b      	beq.n	8007496 <vPortEnterCritical+0x4e>
	__asm volatile
 800747e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007482:	f383 8811 	msr	BASEPRI, r3
 8007486:	f3bf 8f6f 	isb	sy
 800748a:	f3bf 8f4f 	dsb	sy
 800748e:	603b      	str	r3, [r7, #0]
}
 8007490:	bf00      	nop
 8007492:	bf00      	nop
 8007494:	e7fd      	b.n	8007492 <vPortEnterCritical+0x4a>
	}
}
 8007496:	bf00      	nop
 8007498:	370c      	adds	r7, #12
 800749a:	46bd      	mov	sp, r7
 800749c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a0:	4770      	bx	lr
 80074a2:	bf00      	nop
 80074a4:	2000000c 	.word	0x2000000c
 80074a8:	e000ed04 	.word	0xe000ed04

080074ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80074ac:	b480      	push	{r7}
 80074ae:	b083      	sub	sp, #12
 80074b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80074b2:	4b12      	ldr	r3, [pc, #72]	@ (80074fc <vPortExitCritical+0x50>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d10b      	bne.n	80074d2 <vPortExitCritical+0x26>
	__asm volatile
 80074ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074be:	f383 8811 	msr	BASEPRI, r3
 80074c2:	f3bf 8f6f 	isb	sy
 80074c6:	f3bf 8f4f 	dsb	sy
 80074ca:	607b      	str	r3, [r7, #4]
}
 80074cc:	bf00      	nop
 80074ce:	bf00      	nop
 80074d0:	e7fd      	b.n	80074ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80074d2:	4b0a      	ldr	r3, [pc, #40]	@ (80074fc <vPortExitCritical+0x50>)
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	3b01      	subs	r3, #1
 80074d8:	4a08      	ldr	r2, [pc, #32]	@ (80074fc <vPortExitCritical+0x50>)
 80074da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80074dc:	4b07      	ldr	r3, [pc, #28]	@ (80074fc <vPortExitCritical+0x50>)
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d105      	bne.n	80074f0 <vPortExitCritical+0x44>
 80074e4:	2300      	movs	r3, #0
 80074e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	f383 8811 	msr	BASEPRI, r3
}
 80074ee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80074f0:	bf00      	nop
 80074f2:	370c      	adds	r7, #12
 80074f4:	46bd      	mov	sp, r7
 80074f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fa:	4770      	bx	lr
 80074fc:	2000000c 	.word	0x2000000c

08007500 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007500:	f3ef 8009 	mrs	r0, PSP
 8007504:	f3bf 8f6f 	isb	sy
 8007508:	4b15      	ldr	r3, [pc, #84]	@ (8007560 <pxCurrentTCBConst>)
 800750a:	681a      	ldr	r2, [r3, #0]
 800750c:	f01e 0f10 	tst.w	lr, #16
 8007510:	bf08      	it	eq
 8007512:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007516:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800751a:	6010      	str	r0, [r2, #0]
 800751c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007520:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007524:	f380 8811 	msr	BASEPRI, r0
 8007528:	f3bf 8f4f 	dsb	sy
 800752c:	f3bf 8f6f 	isb	sy
 8007530:	f7fe ffa2 	bl	8006478 <vTaskSwitchContext>
 8007534:	f04f 0000 	mov.w	r0, #0
 8007538:	f380 8811 	msr	BASEPRI, r0
 800753c:	bc09      	pop	{r0, r3}
 800753e:	6819      	ldr	r1, [r3, #0]
 8007540:	6808      	ldr	r0, [r1, #0]
 8007542:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007546:	f01e 0f10 	tst.w	lr, #16
 800754a:	bf08      	it	eq
 800754c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007550:	f380 8809 	msr	PSP, r0
 8007554:	f3bf 8f6f 	isb	sy
 8007558:	4770      	bx	lr
 800755a:	bf00      	nop
 800755c:	f3af 8000 	nop.w

08007560 <pxCurrentTCBConst>:
 8007560:	20000a00 	.word	0x20000a00
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007564:	bf00      	nop
 8007566:	bf00      	nop

08007568 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b082      	sub	sp, #8
 800756c:	af00      	add	r7, sp, #0
	__asm volatile
 800756e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007572:	f383 8811 	msr	BASEPRI, r3
 8007576:	f3bf 8f6f 	isb	sy
 800757a:	f3bf 8f4f 	dsb	sy
 800757e:	607b      	str	r3, [r7, #4]
}
 8007580:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007582:	f7fe febf 	bl	8006304 <xTaskIncrementTick>
 8007586:	4603      	mov	r3, r0
 8007588:	2b00      	cmp	r3, #0
 800758a:	d003      	beq.n	8007594 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800758c:	4b06      	ldr	r3, [pc, #24]	@ (80075a8 <xPortSysTickHandler+0x40>)
 800758e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007592:	601a      	str	r2, [r3, #0]
 8007594:	2300      	movs	r3, #0
 8007596:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	f383 8811 	msr	BASEPRI, r3
}
 800759e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80075a0:	bf00      	nop
 80075a2:	3708      	adds	r7, #8
 80075a4:	46bd      	mov	sp, r7
 80075a6:	bd80      	pop	{r7, pc}
 80075a8:	e000ed04 	.word	0xe000ed04

080075ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80075ac:	b480      	push	{r7}
 80075ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80075b0:	4b0b      	ldr	r3, [pc, #44]	@ (80075e0 <vPortSetupTimerInterrupt+0x34>)
 80075b2:	2200      	movs	r2, #0
 80075b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80075b6:	4b0b      	ldr	r3, [pc, #44]	@ (80075e4 <vPortSetupTimerInterrupt+0x38>)
 80075b8:	2200      	movs	r2, #0
 80075ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80075bc:	4b0a      	ldr	r3, [pc, #40]	@ (80075e8 <vPortSetupTimerInterrupt+0x3c>)
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	4a0a      	ldr	r2, [pc, #40]	@ (80075ec <vPortSetupTimerInterrupt+0x40>)
 80075c2:	fba2 2303 	umull	r2, r3, r2, r3
 80075c6:	099b      	lsrs	r3, r3, #6
 80075c8:	4a09      	ldr	r2, [pc, #36]	@ (80075f0 <vPortSetupTimerInterrupt+0x44>)
 80075ca:	3b01      	subs	r3, #1
 80075cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80075ce:	4b04      	ldr	r3, [pc, #16]	@ (80075e0 <vPortSetupTimerInterrupt+0x34>)
 80075d0:	2207      	movs	r2, #7
 80075d2:	601a      	str	r2, [r3, #0]
}
 80075d4:	bf00      	nop
 80075d6:	46bd      	mov	sp, r7
 80075d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075dc:	4770      	bx	lr
 80075de:	bf00      	nop
 80075e0:	e000e010 	.word	0xe000e010
 80075e4:	e000e018 	.word	0xe000e018
 80075e8:	20000000 	.word	0x20000000
 80075ec:	10624dd3 	.word	0x10624dd3
 80075f0:	e000e014 	.word	0xe000e014

080075f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80075f4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007604 <vPortEnableVFP+0x10>
 80075f8:	6801      	ldr	r1, [r0, #0]
 80075fa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80075fe:	6001      	str	r1, [r0, #0]
 8007600:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007602:	bf00      	nop
 8007604:	e000ed88 	.word	0xe000ed88

08007608 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007608:	b480      	push	{r7}
 800760a:	b085      	sub	sp, #20
 800760c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800760e:	f3ef 8305 	mrs	r3, IPSR
 8007612:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	2b0f      	cmp	r3, #15
 8007618:	d915      	bls.n	8007646 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800761a:	4a18      	ldr	r2, [pc, #96]	@ (800767c <vPortValidateInterruptPriority+0x74>)
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	4413      	add	r3, r2
 8007620:	781b      	ldrb	r3, [r3, #0]
 8007622:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007624:	4b16      	ldr	r3, [pc, #88]	@ (8007680 <vPortValidateInterruptPriority+0x78>)
 8007626:	781b      	ldrb	r3, [r3, #0]
 8007628:	7afa      	ldrb	r2, [r7, #11]
 800762a:	429a      	cmp	r2, r3
 800762c:	d20b      	bcs.n	8007646 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800762e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007632:	f383 8811 	msr	BASEPRI, r3
 8007636:	f3bf 8f6f 	isb	sy
 800763a:	f3bf 8f4f 	dsb	sy
 800763e:	607b      	str	r3, [r7, #4]
}
 8007640:	bf00      	nop
 8007642:	bf00      	nop
 8007644:	e7fd      	b.n	8007642 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007646:	4b0f      	ldr	r3, [pc, #60]	@ (8007684 <vPortValidateInterruptPriority+0x7c>)
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800764e:	4b0e      	ldr	r3, [pc, #56]	@ (8007688 <vPortValidateInterruptPriority+0x80>)
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	429a      	cmp	r2, r3
 8007654:	d90b      	bls.n	800766e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007656:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800765a:	f383 8811 	msr	BASEPRI, r3
 800765e:	f3bf 8f6f 	isb	sy
 8007662:	f3bf 8f4f 	dsb	sy
 8007666:	603b      	str	r3, [r7, #0]
}
 8007668:	bf00      	nop
 800766a:	bf00      	nop
 800766c:	e7fd      	b.n	800766a <vPortValidateInterruptPriority+0x62>
	}
 800766e:	bf00      	nop
 8007670:	3714      	adds	r7, #20
 8007672:	46bd      	mov	sp, r7
 8007674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007678:	4770      	bx	lr
 800767a:	bf00      	nop
 800767c:	e000e3f0 	.word	0xe000e3f0
 8007680:	2000102c 	.word	0x2000102c
 8007684:	e000ed0c 	.word	0xe000ed0c
 8007688:	20001030 	.word	0x20001030

0800768c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b08a      	sub	sp, #40	@ 0x28
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007694:	2300      	movs	r3, #0
 8007696:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007698:	f7fe fd78 	bl	800618c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800769c:	4b5c      	ldr	r3, [pc, #368]	@ (8007810 <pvPortMalloc+0x184>)
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d101      	bne.n	80076a8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80076a4:	f000 f924 	bl	80078f0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80076a8:	4b5a      	ldr	r3, [pc, #360]	@ (8007814 <pvPortMalloc+0x188>)
 80076aa:	681a      	ldr	r2, [r3, #0]
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	4013      	ands	r3, r2
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	f040 8095 	bne.w	80077e0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d01e      	beq.n	80076fa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80076bc:	2208      	movs	r2, #8
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	4413      	add	r3, r2
 80076c2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	f003 0307 	and.w	r3, r3, #7
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d015      	beq.n	80076fa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	f023 0307 	bic.w	r3, r3, #7
 80076d4:	3308      	adds	r3, #8
 80076d6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	f003 0307 	and.w	r3, r3, #7
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d00b      	beq.n	80076fa <pvPortMalloc+0x6e>
	__asm volatile
 80076e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076e6:	f383 8811 	msr	BASEPRI, r3
 80076ea:	f3bf 8f6f 	isb	sy
 80076ee:	f3bf 8f4f 	dsb	sy
 80076f2:	617b      	str	r3, [r7, #20]
}
 80076f4:	bf00      	nop
 80076f6:	bf00      	nop
 80076f8:	e7fd      	b.n	80076f6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d06f      	beq.n	80077e0 <pvPortMalloc+0x154>
 8007700:	4b45      	ldr	r3, [pc, #276]	@ (8007818 <pvPortMalloc+0x18c>)
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	687a      	ldr	r2, [r7, #4]
 8007706:	429a      	cmp	r2, r3
 8007708:	d86a      	bhi.n	80077e0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800770a:	4b44      	ldr	r3, [pc, #272]	@ (800781c <pvPortMalloc+0x190>)
 800770c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800770e:	4b43      	ldr	r3, [pc, #268]	@ (800781c <pvPortMalloc+0x190>)
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007714:	e004      	b.n	8007720 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007718:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800771a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007722:	685b      	ldr	r3, [r3, #4]
 8007724:	687a      	ldr	r2, [r7, #4]
 8007726:	429a      	cmp	r2, r3
 8007728:	d903      	bls.n	8007732 <pvPortMalloc+0xa6>
 800772a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d1f1      	bne.n	8007716 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007732:	4b37      	ldr	r3, [pc, #220]	@ (8007810 <pvPortMalloc+0x184>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007738:	429a      	cmp	r2, r3
 800773a:	d051      	beq.n	80077e0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800773c:	6a3b      	ldr	r3, [r7, #32]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	2208      	movs	r2, #8
 8007742:	4413      	add	r3, r2
 8007744:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007748:	681a      	ldr	r2, [r3, #0]
 800774a:	6a3b      	ldr	r3, [r7, #32]
 800774c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800774e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007750:	685a      	ldr	r2, [r3, #4]
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	1ad2      	subs	r2, r2, r3
 8007756:	2308      	movs	r3, #8
 8007758:	005b      	lsls	r3, r3, #1
 800775a:	429a      	cmp	r2, r3
 800775c:	d920      	bls.n	80077a0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800775e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	4413      	add	r3, r2
 8007764:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007766:	69bb      	ldr	r3, [r7, #24]
 8007768:	f003 0307 	and.w	r3, r3, #7
 800776c:	2b00      	cmp	r3, #0
 800776e:	d00b      	beq.n	8007788 <pvPortMalloc+0xfc>
	__asm volatile
 8007770:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007774:	f383 8811 	msr	BASEPRI, r3
 8007778:	f3bf 8f6f 	isb	sy
 800777c:	f3bf 8f4f 	dsb	sy
 8007780:	613b      	str	r3, [r7, #16]
}
 8007782:	bf00      	nop
 8007784:	bf00      	nop
 8007786:	e7fd      	b.n	8007784 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800778a:	685a      	ldr	r2, [r3, #4]
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	1ad2      	subs	r2, r2, r3
 8007790:	69bb      	ldr	r3, [r7, #24]
 8007792:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007796:	687a      	ldr	r2, [r7, #4]
 8007798:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800779a:	69b8      	ldr	r0, [r7, #24]
 800779c:	f000 f90a 	bl	80079b4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80077a0:	4b1d      	ldr	r3, [pc, #116]	@ (8007818 <pvPortMalloc+0x18c>)
 80077a2:	681a      	ldr	r2, [r3, #0]
 80077a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077a6:	685b      	ldr	r3, [r3, #4]
 80077a8:	1ad3      	subs	r3, r2, r3
 80077aa:	4a1b      	ldr	r2, [pc, #108]	@ (8007818 <pvPortMalloc+0x18c>)
 80077ac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80077ae:	4b1a      	ldr	r3, [pc, #104]	@ (8007818 <pvPortMalloc+0x18c>)
 80077b0:	681a      	ldr	r2, [r3, #0]
 80077b2:	4b1b      	ldr	r3, [pc, #108]	@ (8007820 <pvPortMalloc+0x194>)
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	429a      	cmp	r2, r3
 80077b8:	d203      	bcs.n	80077c2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80077ba:	4b17      	ldr	r3, [pc, #92]	@ (8007818 <pvPortMalloc+0x18c>)
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	4a18      	ldr	r2, [pc, #96]	@ (8007820 <pvPortMalloc+0x194>)
 80077c0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80077c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077c4:	685a      	ldr	r2, [r3, #4]
 80077c6:	4b13      	ldr	r3, [pc, #76]	@ (8007814 <pvPortMalloc+0x188>)
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	431a      	orrs	r2, r3
 80077cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077ce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80077d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077d2:	2200      	movs	r2, #0
 80077d4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80077d6:	4b13      	ldr	r3, [pc, #76]	@ (8007824 <pvPortMalloc+0x198>)
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	3301      	adds	r3, #1
 80077dc:	4a11      	ldr	r2, [pc, #68]	@ (8007824 <pvPortMalloc+0x198>)
 80077de:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80077e0:	f7fe fce2 	bl	80061a8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80077e4:	69fb      	ldr	r3, [r7, #28]
 80077e6:	f003 0307 	and.w	r3, r3, #7
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d00b      	beq.n	8007806 <pvPortMalloc+0x17a>
	__asm volatile
 80077ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077f2:	f383 8811 	msr	BASEPRI, r3
 80077f6:	f3bf 8f6f 	isb	sy
 80077fa:	f3bf 8f4f 	dsb	sy
 80077fe:	60fb      	str	r3, [r7, #12]
}
 8007800:	bf00      	nop
 8007802:	bf00      	nop
 8007804:	e7fd      	b.n	8007802 <pvPortMalloc+0x176>
	return pvReturn;
 8007806:	69fb      	ldr	r3, [r7, #28]
}
 8007808:	4618      	mov	r0, r3
 800780a:	3728      	adds	r7, #40	@ 0x28
 800780c:	46bd      	mov	sp, r7
 800780e:	bd80      	pop	{r7, pc}
 8007810:	20004c3c 	.word	0x20004c3c
 8007814:	20004c50 	.word	0x20004c50
 8007818:	20004c40 	.word	0x20004c40
 800781c:	20004c34 	.word	0x20004c34
 8007820:	20004c44 	.word	0x20004c44
 8007824:	20004c48 	.word	0x20004c48

08007828 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b086      	sub	sp, #24
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d04f      	beq.n	80078da <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800783a:	2308      	movs	r3, #8
 800783c:	425b      	negs	r3, r3
 800783e:	697a      	ldr	r2, [r7, #20]
 8007840:	4413      	add	r3, r2
 8007842:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007844:	697b      	ldr	r3, [r7, #20]
 8007846:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007848:	693b      	ldr	r3, [r7, #16]
 800784a:	685a      	ldr	r2, [r3, #4]
 800784c:	4b25      	ldr	r3, [pc, #148]	@ (80078e4 <vPortFree+0xbc>)
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	4013      	ands	r3, r2
 8007852:	2b00      	cmp	r3, #0
 8007854:	d10b      	bne.n	800786e <vPortFree+0x46>
	__asm volatile
 8007856:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800785a:	f383 8811 	msr	BASEPRI, r3
 800785e:	f3bf 8f6f 	isb	sy
 8007862:	f3bf 8f4f 	dsb	sy
 8007866:	60fb      	str	r3, [r7, #12]
}
 8007868:	bf00      	nop
 800786a:	bf00      	nop
 800786c:	e7fd      	b.n	800786a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800786e:	693b      	ldr	r3, [r7, #16]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d00b      	beq.n	800788e <vPortFree+0x66>
	__asm volatile
 8007876:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800787a:	f383 8811 	msr	BASEPRI, r3
 800787e:	f3bf 8f6f 	isb	sy
 8007882:	f3bf 8f4f 	dsb	sy
 8007886:	60bb      	str	r3, [r7, #8]
}
 8007888:	bf00      	nop
 800788a:	bf00      	nop
 800788c:	e7fd      	b.n	800788a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800788e:	693b      	ldr	r3, [r7, #16]
 8007890:	685a      	ldr	r2, [r3, #4]
 8007892:	4b14      	ldr	r3, [pc, #80]	@ (80078e4 <vPortFree+0xbc>)
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	4013      	ands	r3, r2
 8007898:	2b00      	cmp	r3, #0
 800789a:	d01e      	beq.n	80078da <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800789c:	693b      	ldr	r3, [r7, #16]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d11a      	bne.n	80078da <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80078a4:	693b      	ldr	r3, [r7, #16]
 80078a6:	685a      	ldr	r2, [r3, #4]
 80078a8:	4b0e      	ldr	r3, [pc, #56]	@ (80078e4 <vPortFree+0xbc>)
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	43db      	mvns	r3, r3
 80078ae:	401a      	ands	r2, r3
 80078b0:	693b      	ldr	r3, [r7, #16]
 80078b2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80078b4:	f7fe fc6a 	bl	800618c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80078b8:	693b      	ldr	r3, [r7, #16]
 80078ba:	685a      	ldr	r2, [r3, #4]
 80078bc:	4b0a      	ldr	r3, [pc, #40]	@ (80078e8 <vPortFree+0xc0>)
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	4413      	add	r3, r2
 80078c2:	4a09      	ldr	r2, [pc, #36]	@ (80078e8 <vPortFree+0xc0>)
 80078c4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80078c6:	6938      	ldr	r0, [r7, #16]
 80078c8:	f000 f874 	bl	80079b4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80078cc:	4b07      	ldr	r3, [pc, #28]	@ (80078ec <vPortFree+0xc4>)
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	3301      	adds	r3, #1
 80078d2:	4a06      	ldr	r2, [pc, #24]	@ (80078ec <vPortFree+0xc4>)
 80078d4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80078d6:	f7fe fc67 	bl	80061a8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80078da:	bf00      	nop
 80078dc:	3718      	adds	r7, #24
 80078de:	46bd      	mov	sp, r7
 80078e0:	bd80      	pop	{r7, pc}
 80078e2:	bf00      	nop
 80078e4:	20004c50 	.word	0x20004c50
 80078e8:	20004c40 	.word	0x20004c40
 80078ec:	20004c4c 	.word	0x20004c4c

080078f0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80078f0:	b480      	push	{r7}
 80078f2:	b085      	sub	sp, #20
 80078f4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80078f6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80078fa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80078fc:	4b27      	ldr	r3, [pc, #156]	@ (800799c <prvHeapInit+0xac>)
 80078fe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	f003 0307 	and.w	r3, r3, #7
 8007906:	2b00      	cmp	r3, #0
 8007908:	d00c      	beq.n	8007924 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	3307      	adds	r3, #7
 800790e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	f023 0307 	bic.w	r3, r3, #7
 8007916:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007918:	68ba      	ldr	r2, [r7, #8]
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	1ad3      	subs	r3, r2, r3
 800791e:	4a1f      	ldr	r2, [pc, #124]	@ (800799c <prvHeapInit+0xac>)
 8007920:	4413      	add	r3, r2
 8007922:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007928:	4a1d      	ldr	r2, [pc, #116]	@ (80079a0 <prvHeapInit+0xb0>)
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800792e:	4b1c      	ldr	r3, [pc, #112]	@ (80079a0 <prvHeapInit+0xb0>)
 8007930:	2200      	movs	r2, #0
 8007932:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	68ba      	ldr	r2, [r7, #8]
 8007938:	4413      	add	r3, r2
 800793a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800793c:	2208      	movs	r2, #8
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	1a9b      	subs	r3, r3, r2
 8007942:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	f023 0307 	bic.w	r3, r3, #7
 800794a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	4a15      	ldr	r2, [pc, #84]	@ (80079a4 <prvHeapInit+0xb4>)
 8007950:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007952:	4b14      	ldr	r3, [pc, #80]	@ (80079a4 <prvHeapInit+0xb4>)
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	2200      	movs	r2, #0
 8007958:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800795a:	4b12      	ldr	r3, [pc, #72]	@ (80079a4 <prvHeapInit+0xb4>)
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	2200      	movs	r2, #0
 8007960:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	68fa      	ldr	r2, [r7, #12]
 800796a:	1ad2      	subs	r2, r2, r3
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007970:	4b0c      	ldr	r3, [pc, #48]	@ (80079a4 <prvHeapInit+0xb4>)
 8007972:	681a      	ldr	r2, [r3, #0]
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	685b      	ldr	r3, [r3, #4]
 800797c:	4a0a      	ldr	r2, [pc, #40]	@ (80079a8 <prvHeapInit+0xb8>)
 800797e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	685b      	ldr	r3, [r3, #4]
 8007984:	4a09      	ldr	r2, [pc, #36]	@ (80079ac <prvHeapInit+0xbc>)
 8007986:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007988:	4b09      	ldr	r3, [pc, #36]	@ (80079b0 <prvHeapInit+0xc0>)
 800798a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800798e:	601a      	str	r2, [r3, #0]
}
 8007990:	bf00      	nop
 8007992:	3714      	adds	r7, #20
 8007994:	46bd      	mov	sp, r7
 8007996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799a:	4770      	bx	lr
 800799c:	20001034 	.word	0x20001034
 80079a0:	20004c34 	.word	0x20004c34
 80079a4:	20004c3c 	.word	0x20004c3c
 80079a8:	20004c44 	.word	0x20004c44
 80079ac:	20004c40 	.word	0x20004c40
 80079b0:	20004c50 	.word	0x20004c50

080079b4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80079b4:	b480      	push	{r7}
 80079b6:	b085      	sub	sp, #20
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80079bc:	4b28      	ldr	r3, [pc, #160]	@ (8007a60 <prvInsertBlockIntoFreeList+0xac>)
 80079be:	60fb      	str	r3, [r7, #12]
 80079c0:	e002      	b.n	80079c8 <prvInsertBlockIntoFreeList+0x14>
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	60fb      	str	r3, [r7, #12]
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	687a      	ldr	r2, [r7, #4]
 80079ce:	429a      	cmp	r2, r3
 80079d0:	d8f7      	bhi.n	80079c2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	685b      	ldr	r3, [r3, #4]
 80079da:	68ba      	ldr	r2, [r7, #8]
 80079dc:	4413      	add	r3, r2
 80079de:	687a      	ldr	r2, [r7, #4]
 80079e0:	429a      	cmp	r2, r3
 80079e2:	d108      	bne.n	80079f6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	685a      	ldr	r2, [r3, #4]
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	685b      	ldr	r3, [r3, #4]
 80079ec:	441a      	add	r2, r3
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	685b      	ldr	r3, [r3, #4]
 80079fe:	68ba      	ldr	r2, [r7, #8]
 8007a00:	441a      	add	r2, r3
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	429a      	cmp	r2, r3
 8007a08:	d118      	bne.n	8007a3c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	681a      	ldr	r2, [r3, #0]
 8007a0e:	4b15      	ldr	r3, [pc, #84]	@ (8007a64 <prvInsertBlockIntoFreeList+0xb0>)
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	429a      	cmp	r2, r3
 8007a14:	d00d      	beq.n	8007a32 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	685a      	ldr	r2, [r3, #4]
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	685b      	ldr	r3, [r3, #4]
 8007a20:	441a      	add	r2, r3
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	681a      	ldr	r2, [r3, #0]
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	601a      	str	r2, [r3, #0]
 8007a30:	e008      	b.n	8007a44 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007a32:	4b0c      	ldr	r3, [pc, #48]	@ (8007a64 <prvInsertBlockIntoFreeList+0xb0>)
 8007a34:	681a      	ldr	r2, [r3, #0]
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	601a      	str	r2, [r3, #0]
 8007a3a:	e003      	b.n	8007a44 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	681a      	ldr	r2, [r3, #0]
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007a44:	68fa      	ldr	r2, [r7, #12]
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	429a      	cmp	r2, r3
 8007a4a:	d002      	beq.n	8007a52 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	687a      	ldr	r2, [r7, #4]
 8007a50:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007a52:	bf00      	nop
 8007a54:	3714      	adds	r7, #20
 8007a56:	46bd      	mov	sp, r7
 8007a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5c:	4770      	bx	lr
 8007a5e:	bf00      	nop
 8007a60:	20004c34 	.word	0x20004c34
 8007a64:	20004c3c 	.word	0x20004c3c

08007a68 <memset>:
 8007a68:	4402      	add	r2, r0
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	4293      	cmp	r3, r2
 8007a6e:	d100      	bne.n	8007a72 <memset+0xa>
 8007a70:	4770      	bx	lr
 8007a72:	f803 1b01 	strb.w	r1, [r3], #1
 8007a76:	e7f9      	b.n	8007a6c <memset+0x4>

08007a78 <_reclaim_reent>:
 8007a78:	4b29      	ldr	r3, [pc, #164]	@ (8007b20 <_reclaim_reent+0xa8>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	4283      	cmp	r3, r0
 8007a7e:	b570      	push	{r4, r5, r6, lr}
 8007a80:	4604      	mov	r4, r0
 8007a82:	d04b      	beq.n	8007b1c <_reclaim_reent+0xa4>
 8007a84:	69c3      	ldr	r3, [r0, #28]
 8007a86:	b1ab      	cbz	r3, 8007ab4 <_reclaim_reent+0x3c>
 8007a88:	68db      	ldr	r3, [r3, #12]
 8007a8a:	b16b      	cbz	r3, 8007aa8 <_reclaim_reent+0x30>
 8007a8c:	2500      	movs	r5, #0
 8007a8e:	69e3      	ldr	r3, [r4, #28]
 8007a90:	68db      	ldr	r3, [r3, #12]
 8007a92:	5959      	ldr	r1, [r3, r5]
 8007a94:	2900      	cmp	r1, #0
 8007a96:	d13b      	bne.n	8007b10 <_reclaim_reent+0x98>
 8007a98:	3504      	adds	r5, #4
 8007a9a:	2d80      	cmp	r5, #128	@ 0x80
 8007a9c:	d1f7      	bne.n	8007a8e <_reclaim_reent+0x16>
 8007a9e:	69e3      	ldr	r3, [r4, #28]
 8007aa0:	4620      	mov	r0, r4
 8007aa2:	68d9      	ldr	r1, [r3, #12]
 8007aa4:	f000 f872 	bl	8007b8c <_free_r>
 8007aa8:	69e3      	ldr	r3, [r4, #28]
 8007aaa:	6819      	ldr	r1, [r3, #0]
 8007aac:	b111      	cbz	r1, 8007ab4 <_reclaim_reent+0x3c>
 8007aae:	4620      	mov	r0, r4
 8007ab0:	f000 f86c 	bl	8007b8c <_free_r>
 8007ab4:	6961      	ldr	r1, [r4, #20]
 8007ab6:	b111      	cbz	r1, 8007abe <_reclaim_reent+0x46>
 8007ab8:	4620      	mov	r0, r4
 8007aba:	f000 f867 	bl	8007b8c <_free_r>
 8007abe:	69e1      	ldr	r1, [r4, #28]
 8007ac0:	b111      	cbz	r1, 8007ac8 <_reclaim_reent+0x50>
 8007ac2:	4620      	mov	r0, r4
 8007ac4:	f000 f862 	bl	8007b8c <_free_r>
 8007ac8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8007aca:	b111      	cbz	r1, 8007ad2 <_reclaim_reent+0x5a>
 8007acc:	4620      	mov	r0, r4
 8007ace:	f000 f85d 	bl	8007b8c <_free_r>
 8007ad2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007ad4:	b111      	cbz	r1, 8007adc <_reclaim_reent+0x64>
 8007ad6:	4620      	mov	r0, r4
 8007ad8:	f000 f858 	bl	8007b8c <_free_r>
 8007adc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8007ade:	b111      	cbz	r1, 8007ae6 <_reclaim_reent+0x6e>
 8007ae0:	4620      	mov	r0, r4
 8007ae2:	f000 f853 	bl	8007b8c <_free_r>
 8007ae6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8007ae8:	b111      	cbz	r1, 8007af0 <_reclaim_reent+0x78>
 8007aea:	4620      	mov	r0, r4
 8007aec:	f000 f84e 	bl	8007b8c <_free_r>
 8007af0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8007af2:	b111      	cbz	r1, 8007afa <_reclaim_reent+0x82>
 8007af4:	4620      	mov	r0, r4
 8007af6:	f000 f849 	bl	8007b8c <_free_r>
 8007afa:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8007afc:	b111      	cbz	r1, 8007b04 <_reclaim_reent+0x8c>
 8007afe:	4620      	mov	r0, r4
 8007b00:	f000 f844 	bl	8007b8c <_free_r>
 8007b04:	6a23      	ldr	r3, [r4, #32]
 8007b06:	b14b      	cbz	r3, 8007b1c <_reclaim_reent+0xa4>
 8007b08:	4620      	mov	r0, r4
 8007b0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007b0e:	4718      	bx	r3
 8007b10:	680e      	ldr	r6, [r1, #0]
 8007b12:	4620      	mov	r0, r4
 8007b14:	f000 f83a 	bl	8007b8c <_free_r>
 8007b18:	4631      	mov	r1, r6
 8007b1a:	e7bb      	b.n	8007a94 <_reclaim_reent+0x1c>
 8007b1c:	bd70      	pop	{r4, r5, r6, pc}
 8007b1e:	bf00      	nop
 8007b20:	20000010 	.word	0x20000010

08007b24 <__libc_init_array>:
 8007b24:	b570      	push	{r4, r5, r6, lr}
 8007b26:	4d0d      	ldr	r5, [pc, #52]	@ (8007b5c <__libc_init_array+0x38>)
 8007b28:	4c0d      	ldr	r4, [pc, #52]	@ (8007b60 <__libc_init_array+0x3c>)
 8007b2a:	1b64      	subs	r4, r4, r5
 8007b2c:	10a4      	asrs	r4, r4, #2
 8007b2e:	2600      	movs	r6, #0
 8007b30:	42a6      	cmp	r6, r4
 8007b32:	d109      	bne.n	8007b48 <__libc_init_array+0x24>
 8007b34:	4d0b      	ldr	r5, [pc, #44]	@ (8007b64 <__libc_init_array+0x40>)
 8007b36:	4c0c      	ldr	r4, [pc, #48]	@ (8007b68 <__libc_init_array+0x44>)
 8007b38:	f000 f87e 	bl	8007c38 <_init>
 8007b3c:	1b64      	subs	r4, r4, r5
 8007b3e:	10a4      	asrs	r4, r4, #2
 8007b40:	2600      	movs	r6, #0
 8007b42:	42a6      	cmp	r6, r4
 8007b44:	d105      	bne.n	8007b52 <__libc_init_array+0x2e>
 8007b46:	bd70      	pop	{r4, r5, r6, pc}
 8007b48:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b4c:	4798      	blx	r3
 8007b4e:	3601      	adds	r6, #1
 8007b50:	e7ee      	b.n	8007b30 <__libc_init_array+0xc>
 8007b52:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b56:	4798      	blx	r3
 8007b58:	3601      	adds	r6, #1
 8007b5a:	e7f2      	b.n	8007b42 <__libc_init_array+0x1e>
 8007b5c:	08007d14 	.word	0x08007d14
 8007b60:	08007d14 	.word	0x08007d14
 8007b64:	08007d14 	.word	0x08007d14
 8007b68:	08007d18 	.word	0x08007d18

08007b6c <__retarget_lock_acquire_recursive>:
 8007b6c:	4770      	bx	lr

08007b6e <__retarget_lock_release_recursive>:
 8007b6e:	4770      	bx	lr

08007b70 <memcpy>:
 8007b70:	440a      	add	r2, r1
 8007b72:	4291      	cmp	r1, r2
 8007b74:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8007b78:	d100      	bne.n	8007b7c <memcpy+0xc>
 8007b7a:	4770      	bx	lr
 8007b7c:	b510      	push	{r4, lr}
 8007b7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b82:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b86:	4291      	cmp	r1, r2
 8007b88:	d1f9      	bne.n	8007b7e <memcpy+0xe>
 8007b8a:	bd10      	pop	{r4, pc}

08007b8c <_free_r>:
 8007b8c:	b538      	push	{r3, r4, r5, lr}
 8007b8e:	4605      	mov	r5, r0
 8007b90:	2900      	cmp	r1, #0
 8007b92:	d041      	beq.n	8007c18 <_free_r+0x8c>
 8007b94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b98:	1f0c      	subs	r4, r1, #4
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	bfb8      	it	lt
 8007b9e:	18e4      	addlt	r4, r4, r3
 8007ba0:	f000 f83e 	bl	8007c20 <__malloc_lock>
 8007ba4:	4a1d      	ldr	r2, [pc, #116]	@ (8007c1c <_free_r+0x90>)
 8007ba6:	6813      	ldr	r3, [r2, #0]
 8007ba8:	b933      	cbnz	r3, 8007bb8 <_free_r+0x2c>
 8007baa:	6063      	str	r3, [r4, #4]
 8007bac:	6014      	str	r4, [r2, #0]
 8007bae:	4628      	mov	r0, r5
 8007bb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007bb4:	f000 b83a 	b.w	8007c2c <__malloc_unlock>
 8007bb8:	42a3      	cmp	r3, r4
 8007bba:	d908      	bls.n	8007bce <_free_r+0x42>
 8007bbc:	6820      	ldr	r0, [r4, #0]
 8007bbe:	1821      	adds	r1, r4, r0
 8007bc0:	428b      	cmp	r3, r1
 8007bc2:	bf01      	itttt	eq
 8007bc4:	6819      	ldreq	r1, [r3, #0]
 8007bc6:	685b      	ldreq	r3, [r3, #4]
 8007bc8:	1809      	addeq	r1, r1, r0
 8007bca:	6021      	streq	r1, [r4, #0]
 8007bcc:	e7ed      	b.n	8007baa <_free_r+0x1e>
 8007bce:	461a      	mov	r2, r3
 8007bd0:	685b      	ldr	r3, [r3, #4]
 8007bd2:	b10b      	cbz	r3, 8007bd8 <_free_r+0x4c>
 8007bd4:	42a3      	cmp	r3, r4
 8007bd6:	d9fa      	bls.n	8007bce <_free_r+0x42>
 8007bd8:	6811      	ldr	r1, [r2, #0]
 8007bda:	1850      	adds	r0, r2, r1
 8007bdc:	42a0      	cmp	r0, r4
 8007bde:	d10b      	bne.n	8007bf8 <_free_r+0x6c>
 8007be0:	6820      	ldr	r0, [r4, #0]
 8007be2:	4401      	add	r1, r0
 8007be4:	1850      	adds	r0, r2, r1
 8007be6:	4283      	cmp	r3, r0
 8007be8:	6011      	str	r1, [r2, #0]
 8007bea:	d1e0      	bne.n	8007bae <_free_r+0x22>
 8007bec:	6818      	ldr	r0, [r3, #0]
 8007bee:	685b      	ldr	r3, [r3, #4]
 8007bf0:	6053      	str	r3, [r2, #4]
 8007bf2:	4408      	add	r0, r1
 8007bf4:	6010      	str	r0, [r2, #0]
 8007bf6:	e7da      	b.n	8007bae <_free_r+0x22>
 8007bf8:	d902      	bls.n	8007c00 <_free_r+0x74>
 8007bfa:	230c      	movs	r3, #12
 8007bfc:	602b      	str	r3, [r5, #0]
 8007bfe:	e7d6      	b.n	8007bae <_free_r+0x22>
 8007c00:	6820      	ldr	r0, [r4, #0]
 8007c02:	1821      	adds	r1, r4, r0
 8007c04:	428b      	cmp	r3, r1
 8007c06:	bf04      	itt	eq
 8007c08:	6819      	ldreq	r1, [r3, #0]
 8007c0a:	685b      	ldreq	r3, [r3, #4]
 8007c0c:	6063      	str	r3, [r4, #4]
 8007c0e:	bf04      	itt	eq
 8007c10:	1809      	addeq	r1, r1, r0
 8007c12:	6021      	streq	r1, [r4, #0]
 8007c14:	6054      	str	r4, [r2, #4]
 8007c16:	e7ca      	b.n	8007bae <_free_r+0x22>
 8007c18:	bd38      	pop	{r3, r4, r5, pc}
 8007c1a:	bf00      	nop
 8007c1c:	20004d90 	.word	0x20004d90

08007c20 <__malloc_lock>:
 8007c20:	4801      	ldr	r0, [pc, #4]	@ (8007c28 <__malloc_lock+0x8>)
 8007c22:	f7ff bfa3 	b.w	8007b6c <__retarget_lock_acquire_recursive>
 8007c26:	bf00      	nop
 8007c28:	20004d8c 	.word	0x20004d8c

08007c2c <__malloc_unlock>:
 8007c2c:	4801      	ldr	r0, [pc, #4]	@ (8007c34 <__malloc_unlock+0x8>)
 8007c2e:	f7ff bf9e 	b.w	8007b6e <__retarget_lock_release_recursive>
 8007c32:	bf00      	nop
 8007c34:	20004d8c 	.word	0x20004d8c

08007c38 <_init>:
 8007c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c3a:	bf00      	nop
 8007c3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c3e:	bc08      	pop	{r3}
 8007c40:	469e      	mov	lr, r3
 8007c42:	4770      	bx	lr

08007c44 <_fini>:
 8007c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c46:	bf00      	nop
 8007c48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c4a:	bc08      	pop	{r3}
 8007c4c:	469e      	mov	lr, r3
 8007c4e:	4770      	bx	lr
